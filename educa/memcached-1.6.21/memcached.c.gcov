        -:    0:Source:memcached.c
        -:    0:Graph:memcached.gcno
        -:    0:Data:memcached.gcda
        -:    0:Runs:414
        -:    1:/* -*- Mode: C; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*- */
        -:    2:/*
        -:    3: *  memcached - memory caching daemon
        -:    4: *
        -:    5: *       https://www.memcached.org/
        -:    6: *
        -:    7: *  Copyright 2003 Danga Interactive, Inc.  All rights reserved.
        -:    8: *
        -:    9: *  Use and distribution licensed under the BSD license.  See
        -:   10: *  the LICENSE file for full text.
        -:   11: *
        -:   12: *  Authors:
        -:   13: *      Anatoly Vorobey <mellon@pobox.com>
        -:   14: *      Brad Fitzpatrick <brad@danga.com>
        -:   15: */
        -:   16:#include "memcached.h"
        -:   17:#include "storage.h"
        -:   18:#include "authfile.h"
        -:   19:#include "restart.h"
        -:   20:#include <sys/stat.h>
        -:   21:#include <sys/socket.h>
        -:   22:#include <sys/un.h>
        -:   23:#include <signal.h>
        -:   24:#include <sys/param.h>
        -:   25:#include <sys/resource.h>
        -:   26:#include <sys/uio.h>
        -:   27:#include <ctype.h>
        -:   28:#include <stdarg.h>
        -:   29:
        -:   30:/* some POSIX systems need the following definition
        -:   31: * to get mlockall flags out of sys/mman.h.  */
        -:   32:#ifndef _P1003_1B_VISIBLE
        -:   33:#define _P1003_1B_VISIBLE
        -:   34:#endif
        -:   35:#include <pwd.h>
        -:   36:#include <sys/mman.h>
        -:   37:#include <fcntl.h>
        -:   38:#include <netinet/tcp.h>
        -:   39:#include <arpa/inet.h>
        -:   40:#include <errno.h>
        -:   41:#include <stdlib.h>
        -:   42:#include <stdio.h>
        -:   43:#include <string.h>
        -:   44:#include <time.h>
        -:   45:#include <assert.h>
        -:   46:#include <sysexits.h>
        -:   47:#include <stddef.h>
        -:   48:
        -:   49:#ifdef HAVE_GETOPT_LONG
        -:   50:#include <getopt.h>
        -:   51:#endif
        -:   52:
        -:   53:#ifdef TLS
        -:   54:#include "tls.h"
        -:   55:#endif
        -:   56:
        -:   57:#include "proto_text.h"
        -:   58:#include "proto_bin.h"
        -:   59:#include "proto_proxy.h"
        -:   60:
        -:   61:#if defined(__FreeBSD__)
        -:   62:#include <sys/sysctl.h>
        -:   63:#endif
        -:   64:
        -:   65:/*
        -:   66: * forward declarations
        -:   67: */
        -:   68:static void drive_machine(conn *c);
        -:   69:static int new_socket(struct addrinfo *ai);
        -:   70:static ssize_t tcp_read(conn *arg, void *buf, size_t count);
        -:   71:static ssize_t tcp_sendmsg(conn *arg, struct msghdr *msg, int flags);
        -:   72:static ssize_t tcp_write(conn *arg, void *buf, size_t count);
        -:   73:
        -:   74:enum try_read_result {
        -:   75:    READ_DATA_RECEIVED,
        -:   76:    READ_NO_DATA_RECEIVED,
        -:   77:    READ_ERROR,            /** an error occurred (on the socket) (or client closed connection) */
        -:   78:    READ_MEMORY_ERROR      /** failed to allocate more memory */
        -:   79:};
        -:   80:
        -:   81:static int try_read_command_negotiate(conn *c);
        -:   82:static int try_read_command_udp(conn *c);
        -:   83:
        -:   84:static enum try_read_result try_read_network(conn *c);
        -:   85:static enum try_read_result try_read_udp(conn *c);
        -:   86:
        -:   87:static int start_conn_timeout_thread(void);
        -:   88:
        -:   89:/* stats */
        -:   90:static void stats_init(void);
        -:   91:static void conn_to_str(const conn *c, char *addr, char *svr_addr);
        -:   92:
        -:   93:/* defaults */
        -:   94:static void settings_init(void);
        -:   95:
        -:   96:/* event handling, network IO */
        -:   97:static void event_handler(const evutil_socket_t fd, const short which, void *arg);
        -:   98:static void conn_close(conn *c);
        -:   99:static void conn_init(void);
        -:  100:static bool update_event(conn *c, const int new_flags);
        -:  101:static void complete_nread(conn *c);
        -:  102:
        -:  103:static void conn_free(conn *c);
        -:  104:
        -:  105:/** exported globals **/
        -:  106:struct stats stats;
        -:  107:struct stats_state stats_state;
        -:  108:struct settings settings;
        -:  109:time_t process_started;     /* when the process was started */
        -:  110:conn **conns;
        -:  111:
        -:  112:struct slab_rebalance slab_rebal;
        -:  113:volatile int slab_rebalance_signal;
        -:  114:#ifdef EXTSTORE
        -:  115:/* hoping this is temporary; I'd prefer to cut globals, but will complete this
        -:  116: * battle another day.
        -:  117: */
        -:  118:void *ext_storage = NULL;
        -:  119:#endif
        -:  120:/** file scope variables **/
        -:  121:static conn *listen_conn = NULL;
        -:  122:static int max_fds;
        -:  123:static struct event_base *main_base;
        -:  124:
        -:  125:enum transmit_result {
        -:  126:    TRANSMIT_COMPLETE,   /** All done writing. */
        -:  127:    TRANSMIT_INCOMPLETE, /** More data remaining to write. */
        -:  128:    TRANSMIT_SOFT_ERROR, /** Can't write any more right now. */
        -:  129:    TRANSMIT_HARD_ERROR  /** Can't write (c->state is set to conn_closing) */
        -:  130:};
        -:  131:
        -:  132:/* Default methods to read from/ write to a socket */
   595470:  133:ssize_t tcp_read(conn *c, void *buf, size_t count) {
  595470*:  134:    assert (c != NULL);
   595470:  135:    return read(c->sfd, buf, count);
        -:  136:}
        -:  137:
   415294:  138:ssize_t tcp_sendmsg(conn *c, struct msghdr *msg, int flags) {
  415294*:  139:    assert (c != NULL);
   415294:  140:    return sendmsg(c->sfd, msg, flags);
        -:  141:}
        -:  142:
     4046:  143:ssize_t tcp_write(conn *c, void *buf, size_t count) {
    4046*:  144:    assert (c != NULL);
     4046:  145:    return write(c->sfd, buf, count);
        -:  146:}
        -:  147:
        -:  148:static enum transmit_result transmit(conn *c);
        -:  149:
        -:  150:/* This reduces the latency without adding lots of extra wiring to be able to
        -:  151: * notify the listener thread of when to listen again.
        -:  152: * Also, the clock timer could be broken out into its own thread and we
        -:  153: * can block the listener via a condition.
        -:  154: */
        -:  155:static volatile bool allow_new_conns = true;
        -:  156:static int stop_main_loop = NOT_STOP;
        -:  157:static struct event maxconnsevent;
    #####:  158:static void maxconns_handler(const evutil_socket_t fd, const short which, void *arg) {
    #####:  159:    struct timeval t = {.tv_sec = 0, .tv_usec = 10000};
        -:  160:
    #####:  161:    if (fd == -42 || allow_new_conns == false) {
        -:  162:        /* reschedule in 10ms if we need to keep polling */
    #####:  163:        evtimer_set(&maxconnsevent, maxconns_handler, 0);
    #####:  164:        event_base_set(main_base, &maxconnsevent);
    #####:  165:        evtimer_add(&maxconnsevent, &t);
        -:  166:    } else {
    #####:  167:        evtimer_del(&maxconnsevent);
    #####:  168:        accept_new_conns(true);
        -:  169:    }
    #####:  170:}
        -:  171:
        -:  172:/*
        -:  173: * given time value that's either unix time or delta from current unix time, return
        -:  174: * unix time. Use the fact that delta can't exceed one month (and real time value can't
        -:  175: * be that low).
        -:  176: */
   329411:  177:rel_time_t realtime(const time_t exptime) {
        -:  178:    /* no. of seconds in 30 days - largest possible delta exptime */
        -:  179:
   329411:  180:    if (exptime == 0) return 0; /* 0 means never expire */
        -:  181:
     1681:  182:    if (exptime > REALTIME_MAXDELTA) {
        -:  183:        /* if item expiration is at/before the server started, give it an
        -:  184:           expiration time of 1 second after the server started.
        -:  185:           (because 0 means don't expire).  without this, we'd
        -:  186:           underflow and wrap around to some large value way in the
        -:  187:           future, effectively making items expiring in the past
        -:  188:           really expiring never */
       13:  189:        if (exptime <= process_started)
        -:  190:            return (rel_time_t)1;
        8:  191:        return (rel_time_t)(exptime - process_started);
        -:  192:    } else {
     1668:  193:        return (rel_time_t)(exptime + current_time);
        -:  194:    }
        -:  195:}
        -:  196:
      117:  197:static void stats_init(void) {
      117:  198:    memset(&stats, 0, sizeof(struct stats));
      117:  199:    memset(&stats_state, 0, sizeof(struct stats_state));
      117:  200:    stats_state.accepting_conns = true; /* assuming we start in this state. */
        -:  201:
        -:  202:    /* make the time we started always be 2 seconds before we really
        -:  203:       did, so time(0) - time.started is never zero.  if so, things
        -:  204:       like 'settings.oldest_live' which act as booleans as well as
        -:  205:       values are now false in boolean context... */
      117:  206:    process_started = time(0) - ITEM_UPDATE_INTERVAL - 2;
      117:  207:    stats_prefix_init(settings.prefix_delimiter);
      117:  208:}
        -:  209:
        3:  210:void stats_reset(void) {
        3:  211:    STATS_LOCK();
        3:  212:    memset(&stats, 0, sizeof(struct stats));
        3:  213:    stats_prefix_clear();
        3:  214:    STATS_UNLOCK();
        3:  215:    threadlocal_stats_reset();
        3:  216:    item_stats_reset();
        3:  217:}
        -:  218:
      413:  219:static void settings_init(void) {
      413:  220:    settings.use_cas = true;
      413:  221:    settings.access = 0700;
      413:  222:    settings.port = 11211;
      413:  223:    settings.udpport = 0;
        -:  224:#ifdef TLS
        -:  225:    settings.ssl_enabled = false;
        -:  226:    settings.ssl_ctx = NULL;
        -:  227:    settings.ssl_chain_cert = NULL;
        -:  228:    settings.ssl_key = NULL;
        -:  229:    settings.ssl_verify_mode = SSL_VERIFY_NONE;
        -:  230:    settings.ssl_keyformat = SSL_FILETYPE_PEM;
        -:  231:    settings.ssl_ciphers = NULL;
        -:  232:    settings.ssl_ca_cert = NULL;
        -:  233:    settings.ssl_last_cert_refresh_time = current_time;
        -:  234:    settings.ssl_wbuf_size = 16 * 1024; // default is 16KB (SSL max frame size is 17KB)
        -:  235:    settings.ssl_session_cache = false;
        -:  236:    settings.ssl_kernel_tls = false;
        -:  237:    settings.ssl_min_version = TLS1_2_VERSION;
        -:  238:#endif
        -:  239:    /* By default this string should be NULL for getaddrinfo() */
      413:  240:    settings.inter = NULL;
      413:  241:    settings.maxbytes = 64 * 1024 * 1024; /* default is 64MB */
      413:  242:    settings.maxconns = 1024;         /* to limit connections-related memory to about 5MB */
      413:  243:    settings.verbose = 0;
      413:  244:    settings.oldest_live = 0;
      413:  245:    settings.oldest_cas = 0;          /* supplements accuracy of oldest_live */
      413:  246:    settings.evict_to_free = 1;       /* push old items out of cache when memory runs out */
      413:  247:    settings.socketpath = NULL;       /* by default, not using a unix socket */
      413:  248:    settings.auth_file = NULL;        /* by default, not using ASCII authentication tokens */
      413:  249:    settings.factor = 1.25;
      413:  250:    settings.chunk_size = 48;         /* space for a modest key and value */
      413:  251:    settings.num_threads = 4;         /* N workers */
      413:  252:    settings.num_threads_per_udp = 0;
      413:  253:    settings.prefix_delimiter = ':';
      413:  254:    settings.detail_enabled = 0;
      413:  255:    settings.reqs_per_event = 20;
      413:  256:    settings.backlog = 1024;
      413:  257:    settings.binding_protocol = negotiating_prot;
      413:  258:    settings.item_size_max = 1024 * 1024; /* The famous 1MB upper limit. */
      413:  259:    settings.slab_page_size = 1024 * 1024; /* chunks are split from 1MB pages. */
      413:  260:    settings.slab_chunk_size_max = settings.slab_page_size / 2;
      413:  261:    settings.sasl = false;
      413:  262:    settings.maxconns_fast = true;
      413:  263:    settings.lru_crawler = false;
      413:  264:    settings.lru_crawler_sleep = 100;
      413:  265:    settings.lru_crawler_tocrawl = 0;
      413:  266:    settings.lru_maintainer_thread = false;
      413:  267:    settings.lru_segmented = true;
      413:  268:    settings.hot_lru_pct = 20;
      413:  269:    settings.warm_lru_pct = 40;
      413:  270:    settings.hot_max_factor = 0.2;
      413:  271:    settings.warm_max_factor = 2.0;
      413:  272:    settings.temp_lru = false;
      413:  273:    settings.temporary_ttl = 61;
      413:  274:    settings.idle_timeout = 0; /* disabled */
      413:  275:    settings.hashpower_init = 0;
      413:  276:    settings.slab_reassign = true;
      413:  277:    settings.slab_automove = 1;
      413:  278:    settings.slab_automove_ratio = 0.8;
      413:  279:    settings.slab_automove_window = 30;
      413:  280:    settings.shutdown_command = false;
      413:  281:    settings.tail_repair_time = TAIL_REPAIR_TIME_DEFAULT;
      413:  282:    settings.flush_enabled = true;
      413:  283:    settings.dump_enabled = true;
      413:  284:    settings.crawls_persleep = 1000;
      413:  285:    settings.logger_watcher_buf_size = LOGGER_WATCHER_BUF_SIZE;
      413:  286:    settings.logger_buf_size = LOGGER_BUF_SIZE;
      413:  287:    settings.drop_privileges = false;
      413:  288:    settings.watch_enabled = true;
      413:  289:    settings.read_buf_mem_limit = 0;
        -:  290:#ifdef MEMCACHED_DEBUG
      413:  291:    settings.relaxed_privileges = false;
        -:  292:#endif
      413:  293:    settings.num_napi_ids = 0;
      413:  294:    settings.memory_file = NULL;
        -:  295:#ifdef SOCK_COOKIE_ID
      413:  296:    settings.sock_cookie_id = 0;
        -:  297:#endif
      413:  298:}
        -:  299:
        -:  300:extern pthread_mutex_t conn_lock;
        -:  301:
        -:  302:/* Connection timeout thread bits */
        -:  303:static pthread_t conn_timeout_tid;
        -:  304:static int do_run_conn_timeout_thread;
        -:  305:static pthread_cond_t conn_timeout_cond = PTHREAD_COND_INITIALIZER;
        -:  306:static pthread_mutex_t conn_timeout_lock = PTHREAD_MUTEX_INITIALIZER;
        -:  307:
        -:  308:#define CONNS_PER_SLICE 100
        1:  309:static void *conn_timeout_thread(void *arg) {
        1:  310:    int i;
        1:  311:    conn *c;
        1:  312:    rel_time_t oldest_last_cmd;
        1:  313:    int sleep_time;
        1:  314:    int sleep_slice = max_fds / CONNS_PER_SLICE;
        1:  315:    if (sleep_slice == 0)
    #####:  316:        sleep_slice = CONNS_PER_SLICE;
        -:  317:
        1:  318:    useconds_t timeslice = 1000000 / sleep_slice;
        -:  319:
        1:  320:    mutex_lock(&conn_timeout_lock);
        4:  321:    while(do_run_conn_timeout_thread) {
        4:  322:        if (settings.verbose > 2)
    #####:  323:            fprintf(stderr, "idle timeout thread at top of connection list\n");
        -:  324:
        4:  325:        oldest_last_cmd = current_time;
        -:  326:
     4100:  327:        for (i = 0; i < max_fds; i++) {
     4096:  328:            if ((i % CONNS_PER_SLICE) == 0) {
       44:  329:                if (settings.verbose > 2)
    #####:  330:                    fprintf(stderr, "idle timeout thread sleeping for %ulus\n",
        -:  331:                        (unsigned int)timeslice);
       44:  332:                usleep(timeslice);
        -:  333:            }
        -:  334:
     4096:  335:            if (!conns[i])
     4073:  336:                continue;
        -:  337:
       23:  338:            c = conns[i];
        -:  339:
       23:  340:            if (!IS_TCP(c->transport))
       16:  341:                continue;
        -:  342:
        7:  343:            if (c->state != conn_new_cmd && c->state != conn_read)
        5:  344:                continue;
        -:  345:
        2:  346:            if ((current_time - c->last_cmd_time) > settings.idle_timeout) {
        1:  347:                timeout_conn(c);
        -:  348:            } else {
        1:  349:                if (c->last_cmd_time < oldest_last_cmd)
        -:  350:                    oldest_last_cmd = c->last_cmd_time;
        -:  351:            }
        -:  352:        }
        -:  353:
        -:  354:        /* This is the soonest we could have another connection time out */
        4:  355:        sleep_time = settings.idle_timeout - (current_time - oldest_last_cmd) + 1;
        4:  356:        if (sleep_time <= 0)
        -:  357:            sleep_time = 1;
        -:  358:
        4:  359:        if (settings.verbose > 2)
    #####:  360:            fprintf(stderr,
        -:  361:                    "idle timeout thread finished pass, sleeping for %ds\n",
        -:  362:                    sleep_time);
        -:  363:
        4:  364:        struct timeval now;
        4:  365:        struct timespec to_sleep;
        4:  366:        gettimeofday(&now, NULL);
        4:  367:        to_sleep.tv_sec = now.tv_sec + sleep_time;
        4:  368:        to_sleep.tv_nsec = 0;
        -:  369:
        4:  370:        pthread_cond_timedwait(&conn_timeout_cond, &conn_timeout_lock, &to_sleep);
        -:  371:    }
        -:  372:
    #####:  373:    mutex_unlock(&conn_timeout_lock);
    #####:  374:    return NULL;
        -:  375:}
        -:  376:
        1:  377:static int start_conn_timeout_thread(void) {
        1:  378:    int ret;
        -:  379:
        1:  380:    if (settings.idle_timeout == 0)
        -:  381:        return -1;
        -:  382:
        1:  383:    do_run_conn_timeout_thread = 1;
        1:  384:    if ((ret = pthread_create(&conn_timeout_tid, NULL,
        -:  385:        conn_timeout_thread, NULL)) != 0) {
    #####:  386:        fprintf(stderr, "Can't create idle connection timeout thread: %s\n",
        -:  387:            strerror(ret));
    #####:  388:        return -1;
        -:  389:    }
        1:  390:    thread_setname(conn_timeout_tid, "mc-idletimeout");
        -:  391:
        1:  392:    return 0;
        -:  393:}
        -:  394:
        2:  395:int stop_conn_timeout_thread(void) {
        2:  396:    if (!do_run_conn_timeout_thread)
        -:  397:        return -1;
    #####:  398:    mutex_lock(&conn_timeout_lock);
    #####:  399:    do_run_conn_timeout_thread = 0;
    #####:  400:    pthread_cond_signal(&conn_timeout_cond);
    #####:  401:    mutex_unlock(&conn_timeout_lock);
    #####:  402:    pthread_join(conn_timeout_tid, NULL);
    #####:  403:    return 0;
        -:  404:}
        -:  405:
        -:  406:/*
        -:  407: * read buffer cache helper functions
        -:  408: */
   480328:  409:static void rbuf_release(conn *c) {
   480328:  410:    if (c->rbuf != NULL && c->rbytes == 0 && !IS_UDP(c->transport)) {
   474456:  411:        if (c->rbuf_malloced) {
        3:  412:            free(c->rbuf);
        3:  413:            c->rbuf_malloced = false;
        -:  414:        } else {
   474453:  415:            do_cache_free(c->thread->rbuf_cache, c->rbuf);
        -:  416:        }
   474456:  417:        c->rsize = 0;
   474456:  418:        c->rbuf = NULL;
   474456:  419:        c->rcurr = NULL;
        -:  420:    }
   480328:  421:}
        -:  422:
   478158:  423:static bool rbuf_alloc(conn *c) {
   478158:  424:    if (c->rbuf == NULL) {
   474456:  425:        c->rbuf = do_cache_alloc(c->thread->rbuf_cache);
   474456:  426:        if (!c->rbuf) {
    #####:  427:            THR_STATS_LOCK(c->thread);
    #####:  428:            c->thread->stats.read_buf_oom++;
    #####:  429:            THR_STATS_UNLOCK(c->thread);
    #####:  430:            return false;
        -:  431:        }
   474456:  432:        c->rsize = READ_BUFFER_SIZE;
   474456:  433:        c->rcurr = c->rbuf;
        -:  434:    }
        -:  435:    return true;
        -:  436:}
        -:  437:
        -:  438:// Just for handling huge ASCII multigets.
        -:  439:// The previous system was essentially the same; realloc'ing until big enough,
        -:  440:// then realloc'ing back down after the request finished.
        3:  441:bool rbuf_switch_to_malloc(conn *c) {
        -:  442:    // Might as well start with x2 and work from there.
        3:  443:    size_t size = c->rsize * 2;
        3:  444:    char *tmp = malloc(size);
        3:  445:    if (!tmp)
        -:  446:        return false;
        -:  447:
        3:  448:    memcpy(tmp, c->rcurr, c->rbytes);
        3:  449:    do_cache_free(c->thread->rbuf_cache, c->rbuf);
        -:  450:
        3:  451:    c->rcurr = c->rbuf = tmp;
        3:  452:    c->rsize = size;
        3:  453:    c->rbuf_malloced = true;
        3:  454:    return true;
        -:  455:}
        -:  456:
        -:  457:/*
        -:  458: * Initializes the connections array. We don't actually allocate connection
        -:  459: * structures until they're needed, so as to avoid wasting memory when the
        -:  460: * maximum connection count is much higher than the actual number of
        -:  461: * connections.
        -:  462: *
        -:  463: * This does end up wasting a few pointers' worth of memory for FDs that are
        -:  464: * used for things other than connections, but that's worth it in exchange for
        -:  465: * being able to directly index the conns array by FD.
        -:  466: */
      117:  467:static void conn_init(void) {
        -:  468:    /* We're unlikely to see an FD much higher than maxconns. */
      117:  469:    int next_fd = dup(1);
      117:  470:    if (next_fd < 0) {
    #####:  471:        perror("Failed to duplicate file descriptor\n");
    #####:  472:        exit(1);
        -:  473:    }
      117:  474:    int headroom = 10;      /* account for extra unexpected open FDs */
      117:  475:    struct rlimit rl;
        -:  476:
      117:  477:    max_fds = settings.maxconns + headroom + next_fd;
        -:  478:
        -:  479:    /* But if possible, get the actual highest FD we can possibly ever see. */
      117:  480:    if (getrlimit(RLIMIT_NOFILE, &rl) == 0) {
      117:  481:        max_fds = rl.rlim_max;
        -:  482:    } else {
    #####:  483:        fprintf(stderr, "Failed to query maximum file descriptor; "
        -:  484:                        "falling back to maxconns\n");
        -:  485:    }
        -:  486:
      117:  487:    close(next_fd);
        -:  488:
      117:  489:    if ((conns = calloc(max_fds, sizeof(conn *))) == NULL) {
    #####:  490:        fprintf(stderr, "Failed to allocate connection structures\n");
        -:  491:        /* This is unrecoverable so bail out early. */
    #####:  492:        exit(1);
        -:  493:    }
      117:  494:}
        -:  495:
     310*:  496:static const char *prot_text(enum protocol prot) {
     310*:  497:    char *rv = "unknown";
     310*:  498:    switch(prot) {
       2*:  499:        case ascii_prot:
       2*:  500:            rv = "ascii";
       2*:  501:            break;
       1*:  502:        case binary_prot:
       1*:  503:            rv = "binary";
       1*:  504:            break;
     307*:  505:        case negotiating_prot:
     307*:  506:            rv = "auto-negotiate";
     307*:  507:            break;
        -:  508:#ifdef PROXY
        -:  509:        case proxy_prot:
        -:  510:            rv = "proxy";
        -:  511:            break;
        -:  512:#endif
        -:  513:    }
     310*:  514:    return rv;
        -:  515:}
        -:  516:
        1:  517:void conn_close_idle(conn *c) {
        1:  518:    if (settings.idle_timeout > 0 &&
        1:  519:        (current_time - c->last_cmd_time) > settings.idle_timeout) {
        1:  520:        if (c->state != conn_new_cmd && c->state != conn_read) {
    #####:  521:            if (settings.verbose > 1)
    #####:  522:                fprintf(stderr,
        -:  523:                    "fd %d wants to timeout, but isn't in read state", c->sfd);
    #####:  524:            return;
        -:  525:        }
        -:  526:
        1:  527:        if (settings.verbose > 1)
    #####:  528:            fprintf(stderr, "Closing idle fd %d\n", c->sfd);
        -:  529:
        1:  530:        pthread_mutex_lock(&c->thread->stats.mutex);
        1:  531:        c->thread->stats.idle_kicks++;
        1:  532:        pthread_mutex_unlock(&c->thread->stats.mutex);
        -:  533:
        1:  534:        c->close_reason = IDLE_TIMEOUT_CLOSE;
        -:  535:
        1:  536:        conn_set_state(c, conn_closing);
        1:  537:        drive_machine(c);
        -:  538:    }
        -:  539:}
        -:  540:
        -:  541:/* bring conn back from a sidethread. could have had its event base moved. */
      397:  542:void conn_worker_readd(conn *c) {
      397:  543:    if (c->state == conn_io_queue) {
      384:  544:        c->io_queues_submitted--;
        -:  545:        // If we're still waiting for other queues to return, don't re-add the
        -:  546:        // connection yet.
      384:  547:        if (c->io_queues_submitted != 0) {
        -:  548:            return;
        -:  549:        }
        -:  550:    }
      397:  551:    c->ev_flags = EV_READ | EV_PERSIST;
      397:  552:    event_set(&c->event, c->sfd, c->ev_flags, event_handler, (void *)c);
      397:  553:    event_base_set(c->thread->base, &c->event);
        -:  554:
        -:  555:    // TODO: call conn_cleanup/fail/etc
      397:  556:    if (event_add(&c->event, 0) == -1) {
    #####:  557:        perror("event_add");
        -:  558:    }
        -:  559:
        -:  560:    // side thread wanted us to close immediately.
      397:  561:    if (c->state == conn_closing) {
       11:  562:        drive_machine(c);
       11:  563:        return;
      386:  564:    } else if (c->state == conn_io_queue) {
        -:  565:        // machine will know how to return based on secondary state.
      384:  566:        drive_machine(c);
        -:  567:    } else {
        2:  568:        conn_set_state(c, conn_new_cmd);
        -:  569:    }
        -:  570:}
        -:  571:
      528:  572:void thread_io_queue_add(LIBEVENT_THREAD *t, int type, void *ctx, io_queue_stack_cb cb) {
      528:  573:    io_queue_cb_t *q = t->io_queues;
      564:  574:    while (q->type != IO_QUEUE_NONE) {
       36:  575:        q++;
        -:  576:    }
      528:  577:    q->type = type;
      528:  578:    q->ctx = ctx;
      528:  579:    q->submit_cb = cb;
      528:  580:    return;
        -:  581:}
        -:  582:
     2210:  583:void conn_io_queue_setup(conn *c) {
     2210:  584:    io_queue_cb_t *qcb = c->thread->io_queues;
     2210:  585:    io_queue_t *q = c->io_queues;
     3218:  586:    while (qcb->type != IO_QUEUE_NONE) {
     1008:  587:        q->type = qcb->type;
     1008:  588:        q->ctx = qcb->ctx;
     1008:  589:        q->stack_ctx = NULL;
     1008:  590:        q->count = 0;
     1008:  591:        qcb++;
     1008:  592:        q++;
        -:  593:    }
     2210:  594:}
        -:  595:
        -:  596:// To be called from conn_release_items to ensure the stack ptrs are reset.
       28:  597:static void conn_io_queue_reset(conn *c) {
       30:  598:    for (io_queue_t *q = c->io_queues; q->type != IO_QUEUE_NONE; q++) {
       2*:  599:        assert(q->count == 0);
        2:  600:        q->stack_ctx = NULL;
        -:  601:    }
       28:  602:}
        -:  603:
     384*:  604:io_queue_cb_t *thread_io_queue_get(LIBEVENT_THREAD *t, int type) {
     384*:  605:    io_queue_cb_t *q = t->io_queues;
     384*:  606:    while (q->type != IO_QUEUE_NONE) {
     384*:  607:        if (q->type == type) {
    #####:  608:            return q;
        -:  609:        }
    #####:  610:        q++;
        -:  611:    }
        -:  612:    return NULL;
        -:  613:}
        -:  614:
      779:  615:io_queue_t *conn_io_queue_get(conn *c, int type) {
      779:  616:    io_queue_t *q = c->io_queues;
      779:  617:    while (q->type != IO_QUEUE_NONE) {
      779:  618:        if (q->type == type) {
      779:  619:            return q;
        -:  620:        }
    #####:  621:        q++;
        -:  622:    }
        -:  623:    return NULL;
        -:  624:}
        -:  625:
        -:  626:// called to return a single IO object to the original worker thread.
      386:  627:void conn_io_queue_return(io_pending_t *io) {
      386:  628:    io->return_cb(io);
      386:  629:}
        -:  630:
     2336:  631:conn *conn_new(const int sfd, enum conn_states init_state,
        -:  632:                const int event_flags,
        -:  633:                const int read_buffer_size, enum network_transport transport,
        -:  634:                struct event_base *base, void *ssl, uint64_t conntag,
        -:  635:                enum protocol bproto) {
     2336:  636:    conn *c;
        -:  637:
    2336*:  638:    assert(sfd >= 0 && sfd < max_fds);
     2336:  639:    c = conns[sfd];
        -:  640:
     2336:  641:    if (NULL == c) {
     2324:  642:        if (!(c = (conn *)calloc(1, sizeof(conn)))) {
    #####:  643:            STATS_LOCK();
    #####:  644:            stats.malloc_fails++;
    #####:  645:            STATS_UNLOCK();
    #####:  646:            fprintf(stderr, "Failed to allocate connection object\n");
    #####:  647:            return NULL;
        -:  648:        }
     2324:  649:        MEMCACHED_CONN_CREATE(c);
     2324:  650:        c->read = NULL;
     2324:  651:        c->sendmsg = NULL;
     2324:  652:        c->write = NULL;
     2324:  653:        c->rbuf = NULL;
        -:  654:
     2324:  655:        c->rsize = read_buffer_size;
        -:  656:
        -:  657:        // UDP connections use a persistent static buffer.
     2324:  658:        if (c->rsize) {
      198:  659:            c->rbuf = (char *)malloc((size_t)c->rsize);
        -:  660:        }
        -:  661:
     2324:  662:        if (c->rsize && c->rbuf == NULL) {
    #####:  663:            conn_free(c);
    #####:  664:            STATS_LOCK();
    #####:  665:            stats.malloc_fails++;
    #####:  666:            STATS_UNLOCK();
    #####:  667:            fprintf(stderr, "Failed to allocate buffers for connection\n");
    #####:  668:            return NULL;
        -:  669:        }
        -:  670:
        -:  671:
     2324:  672:        STATS_LOCK();
     2324:  673:        stats_state.conn_structs++;
     2324:  674:        STATS_UNLOCK();
        -:  675:
     2324:  676:        c->sfd = sfd;
     2324:  677:        conns[sfd] = c;
        -:  678:    }
        -:  679:
     2336:  680:    c->transport = transport;
     2336:  681:    c->protocol = bproto;
     2336:  682:    c->tag = conntag;
        -:  683:
        -:  684:    /* unix socket mode doesn't need this, so zeroed out.  but why
        -:  685:     * is this done for every command?  presumably for UDP
        -:  686:     * mode.  */
     2336:  687:    if (!settings.socketpath) {
      122:  688:        c->request_addr_size = sizeof(c->request_addr);
        -:  689:    } else {
     2214:  690:        c->request_addr_size = 0;
        -:  691:    }
        -:  692:
     2336:  693:    if (transport == tcp_transport && init_state == conn_new_cmd) {
       20:  694:        if (getpeername(sfd, (struct sockaddr *) &c->request_addr,
        -:  695:                        &c->request_addr_size)) {
    #####:  696:            perror("getpeername");
    #####:  697:            memset(&c->request_addr, 0, sizeof(c->request_addr));
        -:  698:        }
        -:  699:    }
        -:  700:
     2336:  701:    if (init_state == conn_new_cmd) {
     2138:  702:        LOGGER_LOG(NULL, LOG_CONNEVENTS, LOGGER_CONNECTION_NEW, NULL,
        -:  703:                &c->request_addr, c->request_addr_size, c->transport, 0, sfd);
        -:  704:    }
        -:  705:
     2336:  706:    if (settings.verbose > 1) {
        6:  707:        if (init_state == conn_listening) {
        6:  708:            fprintf(stderr, "<%d server listening (%s)\n", sfd,
        -:  709:                prot_text(c->protocol));
        3:  710:        } else if (IS_UDP(transport)) {
    #####:  711:            fprintf(stderr, "<%d server listening (udp)\n", sfd);
        3:  712:        } else if (c->protocol == negotiating_prot) {
        1:  713:            fprintf(stderr, "<%d new auto-negotiating client connection\n",
        -:  714:                    sfd);
        2:  715:        } else if (c->protocol == ascii_prot) {
        1:  716:            fprintf(stderr, "<%d new ascii client connection.\n", sfd);
        1:  717:        } else if (c->protocol == binary_prot) {
        1:  718:            fprintf(stderr, "<%d new binary client connection.\n", sfd);
        -:  719:#ifdef PROXY
        -:  720:        } else if (c->protocol == proxy_prot) {
        -:  721:            fprintf(stderr, "<%d new proxy client connection.\n", sfd);
        -:  722:#endif
        -:  723:        } else {
    #####:  724:            fprintf(stderr, "<%d new unknown (%d) client connection\n",
        -:  725:                sfd, c->protocol);
    #####:  726:            assert(false);
        -:  727:        }
        -:  728:    }
        -:  729:
        -:  730:#ifdef TLS
        -:  731:    c->ssl = NULL;
        -:  732:    c->ssl_wbuf = NULL;
        -:  733:    c->ssl_enabled = false;
        -:  734:#endif
     2336:  735:    c->state = init_state;
     2336:  736:    c->rlbytes = 0;
     2336:  737:    c->cmd = -1;
     2336:  738:    c->rbytes = 0;
     2336:  739:    c->rcurr = c->rbuf;
     2336:  740:    c->ritem = 0;
     2336:  741:    c->rbuf_malloced = false;
     2336:  742:    c->item_malloced = false;
     2336:  743:    c->sasl_started = false;
     2336:  744:    c->set_stale = false;
     2336:  745:    c->mset_res = false;
     2336:  746:    c->close_after_write = false;
     2336:  747:    c->last_cmd_time = current_time; /* initialize for idle kicker */
        -:  748:    // wipe all queues.
     2336:  749:    memset(c->io_queues, 0, sizeof(c->io_queues));
     2336:  750:    c->io_queues_submitted = 0;
        -:  751:
     2336:  752:    c->item = 0;
        -:  753:
     2336:  754:    c->noreply = false;
        -:  755:
        -:  756:#ifdef TLS
        -:  757:    if (ssl) {
        -:  758:        c->ssl = (SSL*)ssl;
        -:  759:        c->read = ssl_read;
        -:  760:        c->sendmsg = ssl_sendmsg;
        -:  761:        c->write = ssl_write;
        -:  762:        c->ssl_enabled = true;
        -:  763:        SSL_set_info_callback(c->ssl, ssl_callback);
        -:  764:    } else
        -:  765:#else
        -:  766:    // This must be NULL if TLS is not enabled.
    2336*:  767:    assert(ssl == NULL);
        -:  768:#endif
        -:  769:    {
     2336:  770:        c->read = tcp_read;
     2336:  771:        c->sendmsg = tcp_sendmsg;
     2336:  772:        c->write = tcp_write;
        -:  773:    }
        -:  774:
     2336:  775:    if (IS_UDP(transport)) {
       72:  776:        c->try_read_command = try_read_command_udp;
        -:  777:    } else {
     2264:  778:        switch (c->protocol) {
        7:  779:            case ascii_prot:
        7:  780:                if (settings.auth_file == NULL) {
        4:  781:                    c->authenticated = true;
        4:  782:                    c->try_read_command = try_read_command_ascii;
        -:  783:                } else {
        3:  784:                    c->authenticated = false;
        3:  785:                    c->try_read_command = try_read_command_asciiauth;
        -:  786:                }
        -:  787:                break;
        6:  788:            case binary_prot:
        -:  789:                // binprot handles its own authentication via SASL parsing.
        6:  790:                c->authenticated = false;
        6:  791:                c->try_read_command = try_read_command_binary;
        6:  792:                break;
     2251:  793:            case negotiating_prot:
     2251:  794:                c->try_read_command = try_read_command_negotiate;
     2251:  795:                break;
        -:  796:#ifdef PROXY
        -:  797:            case proxy_prot:
        -:  798:                c->try_read_command = try_read_command_proxy;
        -:  799:                break;
        -:  800:#endif
        -:  801:        }
        -:  802:    }
        -:  803:
     2336:  804:    event_set(&c->event, sfd, event_flags, event_handler, (void *)c);
     2336:  805:    event_base_set(base, &c->event);
     2336:  806:    c->ev_flags = event_flags;
        -:  807:
     2336:  808:    if (event_add(&c->event, 0) == -1) {
    #####:  809:        perror("event_add");
    #####:  810:        return NULL;
        -:  811:    }
        -:  812:
     2336:  813:    STATS_LOCK();
     2336:  814:    stats_state.curr_conns++;
     2336:  815:    stats.total_conns++;
     2336:  816:    STATS_UNLOCK();
        -:  817:
     2336:  818:    MEMCACHED_CONN_ALLOCATE(c->sfd);
        -:  819:
     2336:  820:    return c;
        -:  821:}
        -:  822:
   485447:  823:void conn_release_items(conn *c) {
  485447*:  824:    assert(c != NULL);
        -:  825:
   485447:  826:    if (c->item) {
        2:  827:        if (c->item_malloced) {
    #####:  828:            free(c->item);
    #####:  829:            c->item_malloced = false;
        -:  830:        } else {
        2:  831:            item_remove(c->item);
        -:  832:        }
        2:  833:        c->item = 0;
        -:  834:    }
        -:  835:
        -:  836:    // Cull any unsent responses.
   485447:  837:    if (c->resp_head) {
        -:  838:        mc_resp *resp = c->resp_head;
        -:  839:        // r_f() handles the chain maintenance.
      122:  840:        while (resp) {
        -:  841:            // temporary by default. hide behind a debug flag in the future:
        -:  842:            // double free detection. Transmit loops can drop out early, but
        -:  843:            // here we could infinite loop.
       94:  844:            if (resp->free) {
    #####:  845:                fprintf(stderr, "ERROR: double free detected during conn_release_items(): [%d] [%s]\n",
    #####:  846:                        c->sfd, c->protocol == binary_prot ? "binary" : "ascii");
        -:  847:                // Since this is a critical failure, just leak the memory.
        -:  848:                // If these errors are seen, an abort() can be used instead.
    #####:  849:                c->resp_head = NULL;
    #####:  850:                c->resp = NULL;
    #####:  851:                break;
        -:  852:            }
       94:  853:            resp = resp_finish(c, resp);
        -:  854:        }
       28:  855:        conn_io_queue_reset(c);
        -:  856:    }
   485447:  857:}
        -:  858:
     2138:  859:static void conn_cleanup(conn *c) {
    2138*:  860:    assert(c != NULL);
        -:  861:
     2138:  862:    conn_release_items(c);
        -:  863:#ifdef PROXY
        -:  864:    if (c->proxy_coro_ref) {
        -:  865:        proxy_cleanup_conn(c);
        -:  866:    }
        -:  867:#endif
     2138:  868:    if (c->sasl_conn) {
    #####:  869:        assert(settings.sasl);
    #####:  870:        sasl_dispose(&c->sasl_conn);
    #####:  871:        c->sasl_conn = NULL;
        -:  872:    }
        -:  873:
     2138:  874:    if (IS_UDP(c->transport)) {
    #####:  875:        conn_set_state(c, conn_read);
        -:  876:    }
     2138:  877:}
        -:  878:
        -:  879:/*
        -:  880: * Frees a connection.
        -:  881: */
    #####:  882:void conn_free(conn *c) {
    #####:  883:    if (c) {
    #####:  884:        assert(c != NULL);
    #####:  885:        assert(c->sfd >= 0 && c->sfd < max_fds);
        -:  886:
    #####:  887:        MEMCACHED_CONN_DESTROY(c);
    #####:  888:        conns[c->sfd] = NULL;
    #####:  889:        if (c->rbuf)
    #####:  890:            free(c->rbuf);
        -:  891:#ifdef TLS
        -:  892:        if (c->ssl_wbuf)
        -:  893:            c->ssl_wbuf = NULL;
        -:  894:#endif
        -:  895:
    #####:  896:        free(c);
        -:  897:    }
    #####:  898:}
        -:  899:
     2138:  900:static void conn_close(conn *c) {
    2138*:  901:    assert(c != NULL);
        -:  902:
     2138:  903:    if (c->thread) {
    2136*:  904:        LOGGER_LOG(c->thread->l, LOG_CONNEVENTS, LOGGER_CONNECTION_CLOSE, NULL,
        -:  905:                &c->request_addr, c->request_addr_size, c->transport,
        -:  906:                c->close_reason, c->sfd);
        -:  907:    }
        -:  908:
        -:  909:    /* delete the event, the socket and the conn */
     2138:  910:    event_del(&c->event);
        -:  911:
     2138:  912:    if (settings.verbose > 1)
        3:  913:        fprintf(stderr, "<%d connection closed.\n", c->sfd);
        -:  914:
     2138:  915:    conn_cleanup(c);
        -:  916:
        -:  917:    // force release of read buffer.
     2138:  918:    if (c->thread) {
     2136:  919:        c->rbytes = 0;
     2136:  920:        rbuf_release(c);
        -:  921:    }
        -:  922:
     2138:  923:    MEMCACHED_CONN_RELEASE(c->sfd);
     2138:  924:    conn_set_state(c, conn_closed);
        -:  925:#ifdef TLS
        -:  926:    if (c->ssl) {
        -:  927:        SSL_shutdown(c->ssl);
        -:  928:        SSL_free(c->ssl);
        -:  929:    }
        -:  930:#endif
     2138:  931:    close(c->sfd);
     2138:  932:    c->close_reason = 0;
     2138:  933:    pthread_mutex_lock(&conn_lock);
     2138:  934:    allow_new_conns = true;
     2138:  935:    pthread_mutex_unlock(&conn_lock);
        -:  936:
     2138:  937:    STATS_LOCK();
     2138:  938:    stats_state.curr_conns--;
     2138:  939:    STATS_UNLOCK();
        -:  940:
     2138:  941:    return;
        -:  942:}
        -:  943:
        -:  944:// Since some connections might be off on side threads and some are managed as
        -:  945:// listeners we need to walk through them all from a central point.
        -:  946:// Must be called with all worker threads hung or in the process of closing.
        2:  947:void conn_close_all(void) {
        2:  948:    int i;
     2050:  949:    for (i = 0; i < max_fds; i++) {
     2048:  950:        if (conns[i] && conns[i]->state != conn_closed) {
        3:  951:            conn_close(conns[i]);
        -:  952:        }
        -:  953:    }
        2:  954:}
        -:  955:
        -:  956:/**
        -:  957: * Convert a state name to a human readable form.
        -:  958: */
       16:  959:static const char *state_text(enum conn_states state) {
       16:  960:    const char* const statenames[] = { "conn_listening",
        -:  961:                                       "conn_new_cmd",
        -:  962:                                       "conn_waiting",
        -:  963:                                       "conn_read",
        -:  964:                                       "conn_parse_cmd",
        -:  965:                                       "conn_write",
        -:  966:                                       "conn_nread",
        -:  967:                                       "conn_swallow",
        -:  968:                                       "conn_closing",
        -:  969:                                       "conn_mwrite",
        -:  970:                                       "conn_closed",
        -:  971:                                       "conn_watch",
        -:  972:                                       "conn_io_queue" };
       16:  973:    return statenames[state];
        -:  974:}
        -:  975:
        -:  976:/*
        -:  977: * Sets a connection's current state in the state machine. Any special
        -:  978: * processing that needs to happen on certain state transitions can
        -:  979: * happen here.
        -:  980: */
  3346972:  981:void conn_set_state(conn *c, enum conn_states state) {
 3346972*:  982:    assert(c != NULL);
 3346972*:  983:    assert(state >= conn_listening && state < conn_max_state);
        -:  984:
  3346972:  985:    if (state != c->state) {
  3346971:  986:        if (settings.verbose > 2) {
    #####:  987:            fprintf(stderr, "%d: going from %s to %s\n",
        -:  988:                    c->sfd, state_text(c->state),
        -:  989:                    state_text(state));
        -:  990:        }
        -:  991:
  3346971:  992:        if (state == conn_write || state == conn_mwrite) {
  3346971:  993:            MEMCACHED_PROCESS_COMMAND_END(c->sfd, c->resp->wbuf, c->resp->wbytes);
        -:  994:        }
  3346971:  995:        c->state = state;
        -:  996:    }
  3346972:  997:}
        -:  998:
        -:  999:/*
        -: 1000: * response object helper functions
        -: 1001: */
   461193: 1002:void resp_reset(mc_resp *resp) {
   461193: 1003:    if (resp->item) {
    #####: 1004:        item_remove(resp->item);
    #####: 1005:        resp->item = NULL;
        -: 1006:    }
   461193: 1007:    if (resp->write_and_free) {
    #####: 1008:        free(resp->write_and_free);
    #####: 1009:        resp->write_and_free = NULL;
        -: 1010:    }
   461193: 1011:    resp->wbytes = 0;
   461193: 1012:    resp->tosend = 0;
   461193: 1013:    resp->iovcnt = 0;
   461193: 1014:    resp->chunked_data_iov = 0;
   461193: 1015:    resp->chunked_total = 0;
   461193: 1016:    resp->skip = false;
   461193: 1017:}
        -: 1018:
   531817: 1019:void resp_add_iov(mc_resp *resp, const void *buf, int len) {
  531817*: 1020:    assert(resp->iovcnt < MC_RESP_IOVCOUNT);
   531817: 1021:    int x = resp->iovcnt;
   531817: 1022:    resp->iov[x].iov_base = (void *)buf;
   531817: 1023:    resp->iov[x].iov_len = len;
   531817: 1024:    resp->iovcnt++;
   531817: 1025:    resp->tosend += len;
   531817: 1026:}
        -: 1027:
        -: 1028:// Notes that an IOV should be handled as a chunked item header.
        -: 1029:// TODO: I'm hoping this isn't a permanent abstraction while I learn what the
        -: 1030:// API should be.
    18975: 1031:void resp_add_chunked_iov(mc_resp *resp, const void *buf, int len) {
    18975: 1032:    resp->chunked_data_iov = resp->iovcnt;
    18975: 1033:    resp->chunked_total = len;
    18975: 1034:    resp_add_iov(resp, buf, len);
    18975: 1035:}
        -: 1036:
        -: 1037:// resp_allocate and resp_free are a wrapper around read buffers which makes
        -: 1038:// read buffers the only network memory to track.
        -: 1039:// Normally this would be too excessive. In this case it allows end users to
        -: 1040:// track a single memory limit for ephemeral connection buffers.
        -: 1041:// Fancy bit twiddling tricks are avoided to help keep this straightforward.
   620187: 1042:static mc_resp* resp_allocate(conn *c) {
   620187: 1043:    LIBEVENT_THREAD *th = c->thread;
   620187: 1044:    mc_resp *resp = NULL;
   620187: 1045:    mc_resp_bundle *b = th->open_bundle;
        -: 1046:
   620187: 1047:    if (b != NULL) {
  614360*: 1048:        for (int i = 0; i < MAX_RESP_PER_BUNDLE; i++) {
        -: 1049:            // loop around starting from the most likely to be free
   614360: 1050:            int x = (i + b->next_check) % MAX_RESP_PER_BUNDLE;
   614360: 1051:            if (b->r[x].free) {
   614360: 1052:                resp = &b->r[x];
   614360: 1053:                b->next_check = x+1;
   614360: 1054:                break;
        -: 1055:            }
        -: 1056:        }
        -: 1057:
   614360: 1058:        if (resp != NULL) {
   614360: 1059:            b->refcount++;
   614360: 1060:            memset(resp, 0, sizeof(*resp));
   614360: 1061:            resp->free = false; // redundant, for clarity.
   614360: 1062:            resp->bundle = b;
   614360: 1063:            if (b->refcount == MAX_RESP_PER_BUNDLE) {
    5723*: 1064:                assert(b->prev == NULL);
        -: 1065:                // We only allocate off the head. Assign new head.
     5723: 1066:                th->open_bundle = b->next;
        -: 1067:                // Remove ourselves from the list.
     5723: 1068:                if (b->next) {
    #####: 1069:                    b->next->prev = 0;
    #####: 1070:                    b->next = 0;
        -: 1071:                }
        -: 1072:            }
        -: 1073:        }
        -: 1074:    }
        -: 1075:
   614360: 1076:    if (resp == NULL) {
    5827*: 1077:        assert(th->open_bundle == NULL);
     5827: 1078:        b = do_cache_alloc(th->rbuf_cache);
     5827: 1079:        if (b) {
     5825: 1080:            THR_STATS_LOCK(th);
     5825: 1081:            th->stats.response_obj_bytes += READ_BUFFER_SIZE;
     5825: 1082:            THR_STATS_UNLOCK(th);
     5825: 1083:            b->next_check = 1;
     5825: 1084:            b->refcount = 1;
    81550: 1085:            for (int i = 0; i < MAX_RESP_PER_BUNDLE; i++) {
    75725: 1086:                b->r[i].free = true;
        -: 1087:            }
     5825: 1088:            b->next = 0;
     5825: 1089:            b->prev = 0;
     5825: 1090:            th->open_bundle = b;
     5825: 1091:            resp = &b->r[0];
     5825: 1092:            memset(resp, 0, sizeof(*resp));
     5825: 1093:            resp->free = false; // redundant. for clarity.
     5825: 1094:            resp->bundle = b;
        -: 1095:        } else {
        -: 1096:            return NULL;
        -: 1097:        }
        -: 1098:    }
        -: 1099:
        -: 1100:    return resp;
        -: 1101:}
        -: 1102:
   620185: 1103:void resp_free(LIBEVENT_THREAD *th, mc_resp *resp) {
   620185: 1104:    mc_resp_bundle *b = resp->bundle;
        -: 1105:
   620185: 1106:    resp->free = true;
   620185: 1107:    b->refcount--;
   620185: 1108:    if (b->refcount == 0) {
   489032: 1109:        if (b == th->open_bundle && b->next == 0) {
        -: 1110:            // This is the final bundle. Just hold and reuse to skip init loop
  483331*: 1111:            assert(b->prev == 0);
   483331: 1112:            b->next_check = 0;
        -: 1113:        } else {
        -: 1114:            // Assert that we're either in the list or at the head.
    5701*: 1115:            assert((b->next || b->prev) || b == th->open_bundle);
        -: 1116:
        -: 1117:            // unlink from list.
     5701: 1118:            mc_resp_bundle **head = &th->open_bundle;
     5701: 1119:            if (*head == b) *head = b->next;
        -: 1120:            // Not tracking the tail.
    5701*: 1121:            assert(b->next != b && b->prev != b);
        -: 1122:
     5701: 1123:            if (b->next) b->next->prev = b->prev;
    5701*: 1124:            if (b->prev) b->prev->next = b->next;
        -: 1125:
        -: 1126:            // Now completely done with this buffer.
     5701: 1127:            do_cache_free(th->rbuf_cache, b);
     5701: 1128:            THR_STATS_LOCK(th);
     5701: 1129:            th->stats.response_obj_bytes -= READ_BUFFER_SIZE;
     5701: 1130:            THR_STATS_UNLOCK(th);
        -: 1131:        }
        -: 1132:    } else {
   131153: 1133:        mc_resp_bundle **head = &th->open_bundle;
        -: 1134:        // NOTE: since we're not tracking tail, latest free ends up in head.
   131153: 1135:        if (b == th->open_bundle || (b->prev || b->next)) {
        -: 1136:            // If we're already linked, leave it in place to save CPU.
        -: 1137:        } else {
        -: 1138:            // Non-zero refcount, need to link into the freelist.
     5723: 1139:            b->prev = 0;
     5723: 1140:            b->next = *head;
     5723: 1141:            if (b->next) b->next->prev = b;
     5723: 1142:            *head = b;
        -: 1143:        }
        -: 1144:
        -: 1145:    }
   620185: 1146:    THR_STATS_LOCK(th);
   620185: 1147:    th->stats.response_obj_count--;
   620185: 1148:    THR_STATS_UNLOCK(th);
   620185: 1149:}
        -: 1150:
   620187: 1151:bool resp_start(conn *c) {
   620187: 1152:    mc_resp *resp = resp_allocate(c);
   620187: 1153:    if (!resp) {
        2: 1154:        THR_STATS_LOCK(c->thread);
        2: 1155:        c->thread->stats.response_obj_oom++;
        2: 1156:        THR_STATS_UNLOCK(c->thread);
        2: 1157:        return false;
        -: 1158:    }
        -: 1159:
        -: 1160:    // handling the stats counters here to simplify testing
   620185: 1161:    THR_STATS_LOCK(c->thread);
   620185: 1162:    c->thread->stats.response_obj_count++;
   620185: 1163:    THR_STATS_UNLOCK(c->thread);
        -: 1164:
   620185: 1165:    if (!c->resp_head) {
   483333: 1166:        c->resp_head = resp;
        -: 1167:    }
   620185: 1168:    if (!c->resp) {
   483333: 1169:        c->resp = resp;
        -: 1170:    } else {
   136852: 1171:        c->resp->next = resp;
   136852: 1172:        c->resp = resp;
        -: 1173:    }
   620185: 1174:    if (IS_UDP(c->transport)) {
        -: 1175:        // need to hold on to some data for async responses.
       18: 1176:        c->resp->request_id = c->request_id;
       18: 1177:        c->resp->request_addr = c->request_addr;
       18: 1178:        c->resp->request_addr_size = c->request_addr_size;
        -: 1179:    }
        -: 1180:    return true;
        -: 1181:}
        -: 1182:
    #####: 1183:mc_resp *resp_start_unlinked(conn *c) {
    #####: 1184:    mc_resp *resp = resp_allocate(c);
    #####: 1185:    if (!resp) {
    #####: 1186:        THR_STATS_LOCK(c->thread);
    #####: 1187:        c->thread->stats.response_obj_oom++;
    #####: 1188:        THR_STATS_UNLOCK(c->thread);
    #####: 1189:        return false;
        -: 1190:    }
        -: 1191:
        -: 1192:    // handling the stats counters here to simplify testing
    #####: 1193:    THR_STATS_LOCK(c->thread);
    #####: 1194:    c->thread->stats.response_obj_count++;
    #####: 1195:    THR_STATS_UNLOCK(c->thread);
        -: 1196:
    #####: 1197:    if (IS_UDP(c->transport)) {
        -: 1198:        // need to hold on to some data for async responses.
    #####: 1199:        c->resp->request_id = c->request_id;
    #####: 1200:        c->resp->request_addr = c->request_addr;
    #####: 1201:        c->resp->request_addr_size = c->request_addr_size;
        -: 1202:    }
        -: 1203:
        -: 1204:    return resp;
        -: 1205:}
        -: 1206:
        -: 1207:// returns next response in chain.
   620185: 1208:mc_resp* resp_finish(conn *c, mc_resp *resp) {
   620185: 1209:    mc_resp *next = resp->next;
   620185: 1210:    if (resp->item) {
        -: 1211:        // TODO: cache hash value in resp obj?
    56283: 1212:        item_remove(resp->item);
    56283: 1213:        resp->item = NULL;
        -: 1214:    }
   620185: 1215:    if (resp->write_and_free) {
     5381: 1216:        free(resp->write_and_free);
        -: 1217:    }
   620185: 1218:    if (resp->io_pending) {
      389: 1219:        io_pending_t *io = resp->io_pending;
        -: 1220:        // If we had a pending IO, tell it to internally clean up then return
        -: 1221:        // the main object back to our thread cache.
      389: 1222:        io->finalize_cb(io);
      389: 1223:        do_cache_free(c->thread->io_cache, io);
      389: 1224:        resp->io_pending = NULL;
        -: 1225:    }
   620185: 1226:    if (c->resp_head == resp) {
   620185: 1227:        c->resp_head = next;
        -: 1228:    }
   620185: 1229:    if (c->resp == resp) {
   483333: 1230:        c->resp = NULL;
        -: 1231:    }
   620185: 1232:    resp_free(c->thread, resp);
   620185: 1233:    return next;
        -: 1234:}
        -: 1235:
        -: 1236:// tells if connection has a depth of response objects to process.
       14: 1237:bool resp_has_stack(conn *c) {
       14: 1238:    return c->resp_head->next != NULL ? true : false;
        -: 1239:}
        -: 1240:
   446418: 1241:void out_string(conn *c, const char *str) {
   446418: 1242:    size_t len;
  446418*: 1243:    assert(c != NULL);
   446418: 1244:    mc_resp *resp = c->resp;
        -: 1245:
        -: 1246:    // if response was original filled with something, but we're now writing
        -: 1247:    // out an error or similar, have to reset the object first.
        -: 1248:    // TODO: since this is often redundant with allocation, how many callers
        -: 1249:    // are actually requiring it be reset? Can we fast test by just looking at
        -: 1250:    // tosend and reset if nonzero?
   446418: 1251:    resp_reset(resp);
        -: 1252:
   446418: 1253:    if (c->noreply) {
        -: 1254:        // TODO: just invalidate the response since nothing's been attempted
        -: 1255:        // to send yet?
   164201: 1256:        resp->skip = true;
   164201: 1257:        if (settings.verbose > 1)
    #####: 1258:            fprintf(stderr, ">%d NOREPLY %s\n", c->sfd, str);
   164201: 1259:        conn_set_state(c, conn_new_cmd);
   164201: 1260:        return;
        -: 1261:    }
        -: 1262:
   282217: 1263:    if (settings.verbose > 1)
    #####: 1264:        fprintf(stderr, ">%d %s\n", c->sfd, str);
        -: 1265:
        -: 1266:    // Fill response object with static string.
        -: 1267:
   282217: 1268:    len = strlen(str);
   282217: 1269:    if ((len + 2) > WRITE_BUFFER_SIZE) {
        -: 1270:        /* ought to be always enough. just fail for simplicity */
    #####: 1271:        str = "SERVER_ERROR output line too long";
    #####: 1272:        len = strlen(str);
        -: 1273:    }
        -: 1274:
   282217: 1275:    memcpy(resp->wbuf, str, len);
   282217: 1276:    memcpy(resp->wbuf + len, "\r\n", 2);
   282217: 1277:    resp_add_iov(resp, resp->wbuf, len + 2);
        -: 1278:
   282217: 1279:    conn_set_state(c, conn_new_cmd);
   282217: 1280:    return;
        -: 1281:}
        -: 1282:
        -: 1283:// For metaget-style ASCII commands. Ignores noreply, ensuring clients see
        -: 1284:// protocol level errors.
        4: 1285:void out_errstring(conn *c, const char *str) {
        4: 1286:    c->noreply = false;
        4: 1287:    out_string(c, str);
        4: 1288:}
        -: 1289:
        -: 1290:/*
        -: 1291: * Outputs a protocol-specific "out of memory" error. For ASCII clients,
        -: 1292: * this is equivalent to out_string().
        -: 1293: */
        7: 1294:void out_of_memory(conn *c, char *ascii_error) {
        7: 1295:    const static char error_prefix[] = "SERVER_ERROR ";
        7: 1296:    const static int error_prefix_len = sizeof(error_prefix) - 1;
        -: 1297:
        7: 1298:    if (c->protocol == binary_prot) {
        -: 1299:        /* Strip off the generic error prefix; it's irrelevant in binary */
    #####: 1300:        if (!strncmp(ascii_error, error_prefix, error_prefix_len)) {
    #####: 1301:            ascii_error += error_prefix_len;
        -: 1302:        }
    #####: 1303:        write_bin_error(c, PROTOCOL_BINARY_RESPONSE_ENOMEM, ascii_error, 0);
        -: 1304:    } else {
        7: 1305:        out_string(c, ascii_error);
        -: 1306:    }
        7: 1307:}
        -: 1308:
     3585: 1309:static void append_bin_stats(const char *key, const uint16_t klen,
        -: 1310:                             const char *val, const uint32_t vlen,
        -: 1311:                             conn *c) {
     3585: 1312:    char *buf = c->stats.buffer + c->stats.offset;
     3585: 1313:    uint32_t bodylen = klen + vlen;
     3585: 1314:    protocol_binary_response_header header = {
        -: 1315:        .response.magic = (uint8_t)PROTOCOL_BINARY_RES,
        -: 1316:        .response.opcode = PROTOCOL_BINARY_CMD_STAT,
     3585: 1317:        .response.keylen = (uint16_t)htons(klen),
        -: 1318:        .response.datatype = (uint8_t)PROTOCOL_BINARY_RAW_BYTES,
     3585: 1319:        .response.bodylen = htonl(bodylen),
     3585: 1320:        .response.opaque = c->opaque
        -: 1321:    };
        -: 1322:
     3585: 1323:    memcpy(buf, header.bytes, sizeof(header.response));
     3585: 1324:    buf += sizeof(header.response);
        -: 1325:
     3585: 1326:    if (klen > 0) {
     3538: 1327:        memcpy(buf, key, klen);
     3538: 1328:        buf += klen;
        -: 1329:
     3538: 1330:        if (vlen > 0) {
     3538: 1331:            memcpy(buf, val, vlen);
        -: 1332:        }
        -: 1333:    }
        -: 1334:
     3585: 1335:    c->stats.offset += sizeof(header.response) + bodylen;
     3585: 1336:}
        -: 1337:
   456654: 1338:static void append_ascii_stats(const char *key, const uint16_t klen,
        -: 1339:                               const char *val, const uint32_t vlen,
        -: 1340:                               conn *c) {
   456654: 1341:    char *pos = c->stats.buffer + c->stats.offset;
   456654: 1342:    uint32_t nbytes = 0;
   456654: 1343:    int remaining = c->stats.size - c->stats.offset;
   456654: 1344:    int room = remaining - 1;
        -: 1345:
   456654: 1346:    if (klen == 0 && vlen == 0) {
     5324: 1347:        nbytes = snprintf(pos, room, "END\r\n");
   451330: 1348:    } else if (vlen == 0) {
    #####: 1349:        nbytes = snprintf(pos, room, "STAT %s\r\n", key);
        -: 1350:    } else {
   451330: 1351:        nbytes = snprintf(pos, room, "STAT %s %s\r\n", key, val);
        -: 1352:    }
        -: 1353:
   456654: 1354:    c->stats.offset += nbytes;
   456654: 1355:}
        -: 1356:
   460239: 1357:static bool grow_stats_buf(conn *c, size_t needed) {
   460239: 1358:    size_t nsize = c->stats.size;
   460239: 1359:    size_t available = nsize - c->stats.offset;
   460239: 1360:    bool rv = true;
        -: 1361:
        -: 1362:    /* Special case: No buffer -- need to allocate fresh */
   460239: 1363:    if (c->stats.buffer == NULL) {
     5371: 1364:        nsize = 1024;
     5371: 1365:        available = c->stats.size = c->stats.offset = 0;
        -: 1366:    }
        -: 1367:
   469382: 1368:    while (needed > available) {
    9143*: 1369:        assert(nsize > 0);
     9143: 1370:        nsize = nsize << 1;
     9143: 1371:        available = nsize - c->stats.offset;
        -: 1372:    }
        -: 1373:
   460239: 1374:    if (nsize != c->stats.size) {
     9143: 1375:        char *ptr = realloc(c->stats.buffer, nsize);
     9143: 1376:        if (ptr) {
     9143: 1377:            c->stats.buffer = ptr;
     9143: 1378:            c->stats.size = nsize;
        -: 1379:        } else {
    #####: 1380:            STATS_LOCK();
    #####: 1381:            stats.malloc_fails++;
    #####: 1382:            STATS_UNLOCK();
    #####: 1383:            rv = false;
        -: 1384:        }
        -: 1385:    }
        -: 1386:
   460239: 1387:    return rv;
        -: 1388:}
        -: 1389:
   460239: 1390:void append_stats(const char *key, const uint16_t klen,
        -: 1391:                  const char *val, const uint32_t vlen,
        -: 1392:                  const void *cookie)
        -: 1393:{
        -: 1394:    /* value without a key is invalid */
   460239: 1395:    if (klen == 0 && vlen > 0) {
        -: 1396:        return;
        -: 1397:    }
        -: 1398:
   460239: 1399:    conn *c = (conn*)cookie;
        -: 1400:
   460239: 1401:    if (c->protocol == binary_prot) {
     3585: 1402:        size_t needed = vlen + klen + sizeof(protocol_binary_response_header);
     3585: 1403:        if (!grow_stats_buf(c, needed)) {
        -: 1404:            return;
        -: 1405:        }
     3585: 1406:        append_bin_stats(key, klen, val, vlen, c);
        -: 1407:    } else {
   456654: 1408:        size_t needed = vlen + klen + 10; // 10 == "STAT = \r\n"
   456654: 1409:        if (!grow_stats_buf(c, needed)) {
        -: 1410:            return;
        -: 1411:        }
   456654: 1412:        append_ascii_stats(key, klen, val, vlen, c);
        -: 1413:    }
        -: 1414:
  460239*: 1415:    assert(c->stats.offset <= c->stats.size);
        -: 1416:}
        -: 1417:
   964834: 1418:static void reset_cmd_handler(conn *c) {
   964834: 1419:    c->cmd = -1;
   964834: 1420:    c->substate = bin_no_state;
   964834: 1421:    if (c->item != NULL) {
        -: 1422:        // TODO: Any other way to get here?
        -: 1423:        // SASL auth was mistakenly using it. Nothing else should?
    #####: 1424:        if (c->item_malloced) {
    #####: 1425:            free(c->item);
    #####: 1426:            c->item_malloced = false;
        -: 1427:        } else {
    #####: 1428:            item_remove(c->item);
        -: 1429:        }
    #####: 1430:        c->item = NULL;
        -: 1431:    }
   964834: 1432:    if (c->rbytes > 0) {
   132030: 1433:        conn_set_state(c, conn_parse_cmd);
   832804: 1434:    } else if (c->resp_head) {
   358326: 1435:        conn_set_state(c, conn_mwrite);
        -: 1436:    } else {
   474478: 1437:        conn_set_state(c, conn_waiting);
        -: 1438:    }
   964834: 1439:}
        -: 1440:
   327255: 1441:static void complete_nread(conn *c) {
  327255*: 1442:    assert(c != NULL);
        -: 1443:#ifdef PROXY
        -: 1444:    assert(c->protocol == ascii_prot
        -: 1445:           || c->protocol == binary_prot
        -: 1446:           || c->protocol == proxy_prot);
        -: 1447:#else
  327255*: 1448:    assert(c->protocol == ascii_prot
        -: 1449:           || c->protocol == binary_prot);
        -: 1450:#endif
   327255: 1451:    if (c->protocol == ascii_prot) {
   302916: 1452:        complete_nread_ascii(c);
    24339: 1453:    } else if (c->protocol == binary_prot) {
    24339: 1454:        complete_nread_binary(c);
        -: 1455:#ifdef PROXY
        -: 1456:    } else if (c->protocol == proxy_prot) {
        -: 1457:        complete_nread_proxy(c);
        -: 1458:#endif
        -: 1459:    }
   327255: 1460:}
        -: 1461:
        -: 1462:/* Destination must always be chunked */
        -: 1463:/* This should be part of item.c */
    27032: 1464:static int _store_item_copy_chunks(item *d_it, item *s_it, const int len) {
    27032: 1465:    item_chunk *dch = (item_chunk *) ITEM_schunk(d_it);
        -: 1466:    /* Advance dch until we find free space */
    77099: 1467:    while (dch->size == dch->used) {
    77099: 1468:        if (dch->next) {
        -: 1469:            dch = dch->next;
        -: 1470:        } else {
        -: 1471:            break;
        -: 1472:        }
        -: 1473:    }
        -: 1474:
    27032: 1475:    if (s_it->it_flags & ITEM_CHUNKED) {
    13516: 1476:        int remain = len;
    13516: 1477:        item_chunk *sch = (item_chunk *) ITEM_schunk(s_it);
    13516: 1478:        int copied = 0;
        -: 1479:        /* Fills dch's to capacity, not straight copy sch in case data is
        -: 1480:         * being added or removed (ie append/prepend)
        -: 1481:         */
   136671: 1482:        while (sch && dch && remain) {
  123155*: 1483:            assert(dch->used <= dch->size);
   123155: 1484:            int todo = (dch->size - dch->used < sch->used - copied)
        -: 1485:                ? dch->size - dch->used : sch->used - copied;
   123155: 1486:            if (remain < todo)
        -: 1487:                todo = remain;
   123155: 1488:            memcpy(dch->data + dch->used, sch->data + copied, todo);
   123155: 1489:            dch->used += todo;
   123155: 1490:            copied += todo;
   123155: 1491:            remain -= todo;
  123155*: 1492:            assert(dch->used <= dch->size);
   123155: 1493:            if (dch->size == dch->used) {
    73103: 1494:                item_chunk *tch = do_item_alloc_chunk(dch, remain);
    73103: 1495:                if (tch) {
        -: 1496:                    dch = tch;
        -: 1497:                } else {
        -: 1498:                    return -1;
        -: 1499:                }
        -: 1500:            }
  123155*: 1501:            assert(copied <= sch->used);
   123155: 1502:            if (copied == sch->used) {
    93361: 1503:                copied = 0;
    93361: 1504:                sch = sch->next;
        -: 1505:            }
        -: 1506:        }
        -: 1507:        /* assert that the destination had enough space for the source */
   13516*: 1508:        assert(remain == 0);
        -: 1509:    } else {
        -: 1510:        int done = 0;
        -: 1511:        /* Fill dch's via a non-chunked item. */
    40548: 1512:        while (len > done && dch) {
    27032: 1513:            int todo = (dch->size - dch->used < len - done)
        -: 1514:                ? dch->size - dch->used : len - done;
        -: 1515:            //assert(dch->size - dch->used != 0);
    27032: 1516:            memcpy(dch->data + dch->used, ITEM_data(s_it) + done, todo);
    27032: 1517:            done += todo;
    27032: 1518:            dch->used += todo;
   27032*: 1519:            assert(dch->used <= dch->size);
    27032: 1520:            if (dch->size == dch->used) {
    27032: 1521:                item_chunk *tch = do_item_alloc_chunk(dch, len - done);
    27032: 1522:                if (tch) {
        -: 1523:                    dch = tch;
        -: 1524:                } else {
        -: 1525:                    return -1;
        -: 1526:                }
        -: 1527:            }
        -: 1528:        }
   13516*: 1529:        assert(len == done);
        -: 1530:    }
        -: 1531:    return 0;
        -: 1532:}
        -: 1533:
    16017: 1534:static int _store_item_copy_data(int comm, item *old_it, item *new_it, item *add_it) {
    16017: 1535:    if (comm == NREAD_APPEND || comm == NREAD_APPENDVIV) {
     8010: 1536:        if (new_it->it_flags & ITEM_CHUNKED) {
    13516: 1537:            if (_store_item_copy_chunks(new_it, old_it, old_it->nbytes - 2) == -1 ||
     6758: 1538:                _store_item_copy_chunks(new_it, add_it, add_it->nbytes) == -1) {
    #####: 1539:                return -1;
        -: 1540:            }
        -: 1541:        } else {
     1252: 1542:            memcpy(ITEM_data(new_it), ITEM_data(old_it), old_it->nbytes);
     1252: 1543:            memcpy(ITEM_data(new_it) + old_it->nbytes - 2 /* CRLF */, ITEM_data(add_it), add_it->nbytes);
        -: 1544:        }
        -: 1545:    } else {
        -: 1546:        /* NREAD_PREPEND */
     8007: 1547:        if (new_it->it_flags & ITEM_CHUNKED) {
    13516: 1548:            if (_store_item_copy_chunks(new_it, add_it, add_it->nbytes - 2) == -1 ||
     6758: 1549:                _store_item_copy_chunks(new_it, old_it, old_it->nbytes) == -1) {
    #####: 1550:                return -1;
        -: 1551:            }
        -: 1552:        } else {
     1249: 1553:            memcpy(ITEM_data(new_it), ITEM_data(add_it), add_it->nbytes);
     1249: 1554:            memcpy(ITEM_data(new_it) + add_it->nbytes - 2 /* CRLF */, ITEM_data(old_it), old_it->nbytes);
        -: 1555:        }
        -: 1556:    }
        -: 1557:    return 0;
        -: 1558:}
        -: 1559:
        -: 1560:/*
        -: 1561: * Stores an item in the cache according to the semantics of one of the set
        -: 1562: * commands. Protected by the item lock.
        -: 1563: *
        -: 1564: * Returns the state of storage.
        -: 1565: */
   327322: 1566:enum store_item_type do_store_item(item *it, int comm, LIBEVENT_THREAD *t, const uint32_t hv, int *nbytes, uint64_t *cas, bool cas_stale) {
   327322: 1567:    char *key = ITEM_key(it);
   327322: 1568:    item *old_it = do_item_get(key, it->nkey, hv, t, DONT_UPDATE);
   327322: 1569:    enum store_item_type stored = NOT_STORED;
        -: 1570:
   327322: 1571:    enum cas_result { CAS_NONE, CAS_MATCH, CAS_BADVAL, CAS_STALE, CAS_MISS };
        -: 1572:
   327322: 1573:    item *new_it = NULL;
   327322: 1574:    uint32_t flags;
        -: 1575:
        -: 1576:    /* Do the CAS test up front so we can apply to all store modes */
   327322: 1577:    enum cas_result cas_res = CAS_NONE;
        -: 1578:
   327322: 1579:    bool do_store = false;
   327322: 1580:    if (old_it != NULL) {
        -: 1581:        // Most of the CAS work requires something to compare to.
    36508: 1582:        uint64_t it_cas = ITEM_get_cas(it);
    36508: 1583:        uint64_t old_cas = ITEM_get_cas(old_it);
    36508: 1584:        if (it_cas == 0) {
        -: 1585:            cas_res = CAS_NONE;
       21: 1586:        } else if (it_cas == old_cas) {
        -: 1587:            cas_res = CAS_MATCH;
        9: 1588:        } else if (cas_stale && it_cas < old_cas) {
        -: 1589:            cas_res = CAS_STALE;
        -: 1590:        } else {
        8: 1591:            cas_res = CAS_BADVAL;
        -: 1592:        }
        -: 1593:
    36508: 1594:        switch (comm) {
      648: 1595:            case NREAD_ADD:
        -: 1596:                /* add only adds a nonexistent item, but promote to head of LRU */
      648: 1597:                do_item_update(old_it);
      648: 1598:                break;
       22: 1599:            case NREAD_CAS:
       22: 1600:                if (cas_res == CAS_MATCH) {
        -: 1601:                    // cas validates
        -: 1602:                    // it and old_it may belong to different classes.
        -: 1603:                    // I'm updating the stats for the one that's getting pushed out
       11: 1604:                    pthread_mutex_lock(&t->stats.mutex);
       11: 1605:                    t->stats.slab_stats[ITEM_clsid(old_it)].cas_hits++;
       11: 1606:                    pthread_mutex_unlock(&t->stats.mutex);
       11: 1607:                    do_store = true;
       11: 1608:                } else if (cas_res == CAS_STALE) {
        -: 1609:                    // if we're allowed to set a stale value, CAS must be lower than
        -: 1610:                    // the current item's CAS.
        -: 1611:                    // This replaces the value, but should preserve TTL, and stale
        -: 1612:                    // item marker bit + token sent if exists.
        1: 1613:                    it->exptime = old_it->exptime;
        1: 1614:                    it->it_flags |= ITEM_STALE;
        1: 1615:                    if (old_it->it_flags & ITEM_TOKEN_SENT) {
        1: 1616:                        it->it_flags |= ITEM_TOKEN_SENT;
        -: 1617:                    }
        -: 1618:
        1: 1619:                    pthread_mutex_lock(&t->stats.mutex);
        1: 1620:                    t->stats.slab_stats[ITEM_clsid(old_it)].cas_hits++;
        1: 1621:                    pthread_mutex_unlock(&t->stats.mutex);
        1: 1622:                    do_store = true;
        -: 1623:                } else {
        -: 1624:                    // NONE or BADVAL are the same for CAS cmd
       10: 1625:                    pthread_mutex_lock(&t->stats.mutex);
       10: 1626:                    t->stats.slab_stats[ITEM_clsid(old_it)].cas_badval++;
       10: 1627:                    pthread_mutex_unlock(&t->stats.mutex);
        -: 1628:
       10: 1629:                    if (settings.verbose > 1) {
    #####: 1630:                        fprintf(stderr, "CAS:  failure: expected %llu, got %llu\n",
    #####: 1631:                                (unsigned long long)ITEM_get_cas(old_it),
    #####: 1632:                                (unsigned long long)ITEM_get_cas(it));
        -: 1633:                    }
        -: 1634:                    stored = EXISTS;
        -: 1635:                }
        -: 1636:                break;
    16019: 1637:            case NREAD_APPEND:
        -: 1638:            case NREAD_PREPEND:
        -: 1639:            case NREAD_APPENDVIV:
        -: 1640:            case NREAD_PREPENDVIV:
    16019: 1641:                if (cas_res != CAS_NONE && cas_res != CAS_MATCH) {
        -: 1642:                    stored = EXISTS;
        -: 1643:                    break;
        -: 1644:                }
        -: 1645:#ifdef EXTSTORE
    16019: 1646:                if ((old_it->it_flags & ITEM_HDR) != 0) {
        -: 1647:                    /* block append/prepend from working with extstore-d items.
        -: 1648:                     * leave response code to NOT_STORED default */
        -: 1649:                    break;
        -: 1650:                }
        -: 1651:#endif
        -: 1652:                /* we have it and old_it here - alloc memory to hold both */
    16017: 1653:                FLAGS_CONV(old_it, flags);
    16017: 1654:                new_it = do_item_alloc(key, it->nkey, flags, old_it->exptime, it->nbytes + old_it->nbytes - 2 /* CRLF */);
        -: 1655:
        -: 1656:                // OOM trying to copy.
    16017: 1657:                if (new_it == NULL)
        -: 1658:                    break;
        -: 1659:                /* copy data from it and old_it to new_it */
    16017: 1660:                if (_store_item_copy_data(comm, old_it, new_it, it) == -1) {
        -: 1661:                    // failed data copy
        -: 1662:                    break;
        -: 1663:                } else {
        -: 1664:                    // refcount of new_it is 1 here. will end up 2 after link.
        -: 1665:                    // it's original ref is managed outside of this function
    16017: 1666:                    it = new_it;
    16017: 1667:                    do_store = true;
        -: 1668:                    // Upstream final object size for meta
    16017: 1669:                    if (nbytes != NULL) {
    16008: 1670:                        *nbytes = it->nbytes;
        -: 1671:                    }
        -: 1672:                }
        -: 1673:                break;
    19819: 1674:            case NREAD_REPLACE:
        -: 1675:            case NREAD_SET:
    19819: 1676:                do_store = true;
    19819: 1677:                break;
        -: 1678:        }
        -: 1679:
    36508: 1680:        if (do_store) {
    35848: 1681:            STORAGE_delete(t->storage, old_it);
    35848: 1682:            item_replace(old_it, it, hv);
    35848: 1683:            stored = STORED;
        -: 1684:        }
        -: 1685:
    36508: 1686:        do_item_remove(old_it);         /* release our reference */
    36508: 1687:        if (new_it != NULL) {
        -: 1688:            // append/prepend end up with an extra reference for new_it.
    16017: 1689:            do_item_remove(new_it);
        -: 1690:        }
        -: 1691:    } else {
        -: 1692:        /* No pre-existing item to replace or compare to. */
   290814: 1693:        if (ITEM_get_cas(it) != 0) {
        -: 1694:            /* Asked for a CAS match but nothing to compare it to. */
   290814: 1695:            cas_res = CAS_MISS;
        -: 1696:        }
        -: 1697:
   290814: 1698:        switch (comm) {
        -: 1699:            case NREAD_ADD:
        -: 1700:            case NREAD_SET:
        -: 1701:            case NREAD_APPENDVIV:
        -: 1702:            case NREAD_PREPENDVIV:
   290712: 1703:                do_store = true;
   290712: 1704:                break;
        3: 1705:            case NREAD_CAS:
        -: 1706:                // LRU expired
        3: 1707:                stored = NOT_FOUND;
        3: 1708:                pthread_mutex_lock(&t->stats.mutex);
        3: 1709:                t->stats.cas_misses++;
        3: 1710:                pthread_mutex_unlock(&t->stats.mutex);
        3: 1711:                break;
        -: 1712:            case NREAD_REPLACE:
        -: 1713:            case NREAD_APPEND:
        -: 1714:            case NREAD_PREPEND:
        -: 1715:                /* Requires an existing item. */
        -: 1716:                break;
        -: 1717:        }
        -: 1718:
        3: 1719:        if (do_store) {
   290712: 1720:            do_item_link(it, hv);
   290712: 1721:            stored = STORED;
        -: 1722:        }
        -: 1723:    }
        -: 1724:
   327322: 1725:    if (stored == STORED && cas != NULL) {
   326557: 1726:        *cas = ITEM_get_cas(it);
        -: 1727:    }
  327322*: 1728:    LOGGER_LOG(t->l, LOG_MUTATIONS, LOGGER_ITEM_STORE, NULL,
        -: 1729:            stored, comm, ITEM_key(it), it->nkey, it->nbytes, it->exptime,
        -: 1730:            ITEM_clsid(it), t->cur_sfd);
        -: 1731:
   327322: 1732:    return stored;
        -: 1733:}
        -: 1734:
        -: 1735:/* set up a connection to write a buffer then free it, used for stats */
     5381: 1736:void write_and_free(conn *c, char *buf, int bytes) {
     5381: 1737:    if (buf) {
     5381: 1738:        mc_resp *resp = c->resp;
     5381: 1739:        resp->write_and_free = buf;
     5381: 1740:        resp_add_iov(resp, buf, bytes);
     5381: 1741:        conn_set_state(c, conn_new_cmd);
        -: 1742:    } else {
    #####: 1743:        out_of_memory(c, "SERVER_ERROR out of memory writing stats");
        -: 1744:    }
     5381: 1745:}
        -: 1746:
   373975: 1747:void append_stat(const char *name, ADD_STAT add_stats, conn *c,
        -: 1748:                 const char *fmt, ...) {
   373975: 1749:    char val_str[STAT_VAL_LEN];
   373975: 1750:    int vlen;
   373975: 1751:    va_list ap;
        -: 1752:
  373975*: 1753:    assert(name);
  373975*: 1754:    assert(add_stats);
  373975*: 1755:    assert(c);
  373975*: 1756:    assert(fmt);
        -: 1757:
   373975: 1758:    va_start(ap, fmt);
   373975: 1759:    vlen = vsnprintf(val_str, sizeof(val_str) - 1, fmt, ap);
   373975: 1760:    va_end(ap);
        -: 1761:
   373975: 1762:    add_stats(name, strlen(name), val_str, vlen, c);
   373975: 1763:}
        -: 1764:
        -: 1765:/* return server specific stats only */
     3770: 1766:void server_stats(ADD_STAT add_stats, conn *c) {
     3770: 1767:    pid_t pid = getpid();
     3770: 1768:    rel_time_t now = current_time;
        -: 1769:
     3770: 1770:    struct thread_stats thread_stats;
     3770: 1771:    threadlocal_stats_aggregate(&thread_stats);
     3770: 1772:    struct slab_stats slab_stats;
     3770: 1773:    slab_stats_aggregate(&thread_stats, &slab_stats);
        -: 1774:#ifndef WIN32
     3770: 1775:    struct rusage usage;
     3770: 1776:    getrusage(RUSAGE_SELF, &usage);
        -: 1777:#endif /* !WIN32 */
        -: 1778:
     3770: 1779:    STATS_LOCK();
        -: 1780:
     3770: 1781:    APPEND_STAT("pid", "%lu", (long)pid);
     3770: 1782:    APPEND_STAT("uptime", "%u", now - ITEM_UPDATE_INTERVAL);
     3770: 1783:    APPEND_STAT("time", "%ld", now + (long)process_started);
     3770: 1784:    APPEND_STAT("version", "%s", VERSION);
     3770: 1785:    APPEND_STAT("libevent", "%s", event_get_version());
     3770: 1786:    APPEND_STAT("pointer_size", "%d", (int)(8 * sizeof(void *)));
        -: 1787:
        -: 1788:#ifndef WIN32
     3770: 1789:    append_stat("rusage_user", add_stats, c, "%ld.%06ld",
     3770: 1790:                (long)usage.ru_utime.tv_sec,
     3770: 1791:                (long)usage.ru_utime.tv_usec);
     3770: 1792:    append_stat("rusage_system", add_stats, c, "%ld.%06ld",
     3770: 1793:                (long)usage.ru_stime.tv_sec,
     3770: 1794:                (long)usage.ru_stime.tv_usec);
        -: 1795:#endif /* !WIN32 */
        -: 1796:
     3770: 1797:    APPEND_STAT("max_connections", "%d", settings.maxconns);
     3770: 1798:    APPEND_STAT("curr_connections", "%llu", (unsigned long long)stats_state.curr_conns - 1);
     3770: 1799:    APPEND_STAT("total_connections", "%llu", (unsigned long long)stats.total_conns);
     3770: 1800:    if (settings.maxconns_fast) {
     3760: 1801:        APPEND_STAT("rejected_connections", "%llu", (unsigned long long)stats.rejected_conns);
        -: 1802:    }
     3770: 1803:    APPEND_STAT("connection_structures", "%u", stats_state.conn_structs);
     3770: 1804:    APPEND_STAT("response_obj_oom", "%llu", (unsigned long long)thread_stats.response_obj_oom);
     3770: 1805:    APPEND_STAT("response_obj_count", "%llu", (unsigned long long)thread_stats.response_obj_count);
     3770: 1806:    APPEND_STAT("response_obj_bytes", "%llu", (unsigned long long)thread_stats.response_obj_bytes);
     3770: 1807:    APPEND_STAT("read_buf_count", "%llu", (unsigned long long)thread_stats.read_buf_count);
     3770: 1808:    APPEND_STAT("read_buf_bytes", "%llu", (unsigned long long)thread_stats.read_buf_bytes);
     3770: 1809:    APPEND_STAT("read_buf_bytes_free", "%llu", (unsigned long long)thread_stats.read_buf_bytes_free);
     3770: 1810:    APPEND_STAT("read_buf_oom", "%llu", (unsigned long long)thread_stats.read_buf_oom);
     3770: 1811:    APPEND_STAT("reserved_fds", "%u", stats_state.reserved_fds);
        -: 1812:#ifdef PROXY
        -: 1813:    if (settings.proxy_enabled) {
        -: 1814:        APPEND_STAT("proxy_conn_requests", "%llu", (unsigned long long)thread_stats.proxy_conn_requests);
        -: 1815:        APPEND_STAT("proxy_conn_errors", "%llu", (unsigned long long)thread_stats.proxy_conn_errors);
        -: 1816:        APPEND_STAT("proxy_conn_oom", "%llu", (unsigned long long)thread_stats.proxy_conn_oom);
        -: 1817:        APPEND_STAT("proxy_req_active", "%llu", (unsigned long long)thread_stats.proxy_req_active);
        -: 1818:        APPEND_STAT("proxy_await_active", "%llu", (unsigned long long)thread_stats.proxy_await_active);
        -: 1819:    }
        -: 1820:#endif
     3770: 1821:    APPEND_STAT("cmd_get", "%llu", (unsigned long long)thread_stats.get_cmds);
     3770: 1822:    APPEND_STAT("cmd_set", "%llu", (unsigned long long)slab_stats.set_cmds);
     3770: 1823:    APPEND_STAT("cmd_flush", "%llu", (unsigned long long)thread_stats.flush_cmds);
     3770: 1824:    APPEND_STAT("cmd_touch", "%llu", (unsigned long long)thread_stats.touch_cmds);
     3770: 1825:    APPEND_STAT("cmd_meta", "%llu", (unsigned long long)thread_stats.meta_cmds);
     3770: 1826:    APPEND_STAT("get_hits", "%llu", (unsigned long long)slab_stats.get_hits);
     3770: 1827:    APPEND_STAT("get_misses", "%llu", (unsigned long long)thread_stats.get_misses);
     3770: 1828:    APPEND_STAT("get_expired", "%llu", (unsigned long long)thread_stats.get_expired);
     3770: 1829:    APPEND_STAT("get_flushed", "%llu", (unsigned long long)thread_stats.get_flushed);
        -: 1830:#ifdef EXTSTORE
     3770: 1831:    if (c->thread->storage) {
     1047: 1832:        APPEND_STAT("get_extstore", "%llu", (unsigned long long)thread_stats.get_extstore);
     1047: 1833:        APPEND_STAT("get_aborted_extstore", "%llu", (unsigned long long)thread_stats.get_aborted_extstore);
     1047: 1834:        APPEND_STAT("get_oom_extstore", "%llu", (unsigned long long)thread_stats.get_oom_extstore);
     1047: 1835:        APPEND_STAT("recache_from_extstore", "%llu", (unsigned long long)thread_stats.recache_from_extstore);
     1047: 1836:        APPEND_STAT("miss_from_extstore", "%llu", (unsigned long long)thread_stats.miss_from_extstore);
     1047: 1837:        APPEND_STAT("badcrc_from_extstore", "%llu", (unsigned long long)thread_stats.badcrc_from_extstore);
        -: 1838:    }
        -: 1839:#endif
     3770: 1840:    APPEND_STAT("delete_misses", "%llu", (unsigned long long)thread_stats.delete_misses);
     3770: 1841:    APPEND_STAT("delete_hits", "%llu", (unsigned long long)slab_stats.delete_hits);
     3770: 1842:    APPEND_STAT("incr_misses", "%llu", (unsigned long long)thread_stats.incr_misses);
     3770: 1843:    APPEND_STAT("incr_hits", "%llu", (unsigned long long)slab_stats.incr_hits);
     3770: 1844:    APPEND_STAT("decr_misses", "%llu", (unsigned long long)thread_stats.decr_misses);
     3770: 1845:    APPEND_STAT("decr_hits", "%llu", (unsigned long long)slab_stats.decr_hits);
     3770: 1846:    APPEND_STAT("cas_misses", "%llu", (unsigned long long)thread_stats.cas_misses);
     3770: 1847:    APPEND_STAT("cas_hits", "%llu", (unsigned long long)slab_stats.cas_hits);
     3770: 1848:    APPEND_STAT("cas_badval", "%llu", (unsigned long long)slab_stats.cas_badval);
     3770: 1849:    APPEND_STAT("touch_hits", "%llu", (unsigned long long)slab_stats.touch_hits);
     3770: 1850:    APPEND_STAT("touch_misses", "%llu", (unsigned long long)thread_stats.touch_misses);
     3770: 1851:    APPEND_STAT("store_too_large", "%llu", (unsigned long long)thread_stats.store_too_large);
     3770: 1852:    APPEND_STAT("store_no_memory", "%llu", (unsigned long long)thread_stats.store_no_memory);
     3770: 1853:    APPEND_STAT("auth_cmds", "%llu", (unsigned long long)thread_stats.auth_cmds);
     3770: 1854:    APPEND_STAT("auth_errors", "%llu", (unsigned long long)thread_stats.auth_errors);
     3770: 1855:    if (settings.idle_timeout) {
        9: 1856:        APPEND_STAT("idle_kicks", "%llu", (unsigned long long)thread_stats.idle_kicks);
        -: 1857:    }
     3770: 1858:    APPEND_STAT("bytes_read", "%llu", (unsigned long long)thread_stats.bytes_read);
     3770: 1859:    APPEND_STAT("bytes_written", "%llu", (unsigned long long)thread_stats.bytes_written);
     3770: 1860:    APPEND_STAT("limit_maxbytes", "%llu", (unsigned long long)settings.maxbytes);
     3770: 1861:    APPEND_STAT("accepting_conns", "%u", stats_state.accepting_conns);
     3770: 1862:    APPEND_STAT("listen_disabled_num", "%llu", (unsigned long long)stats.listen_disabled_num);
     3770: 1863:    APPEND_STAT("time_in_listen_disabled_us", "%llu", stats.time_in_listen_disabled_us);
     3770: 1864:    APPEND_STAT("threads", "%d", settings.num_threads);
     3770: 1865:    APPEND_STAT("conn_yields", "%llu", (unsigned long long)thread_stats.conn_yields);
     3770: 1866:    APPEND_STAT("hash_power_level", "%u", stats_state.hash_power_level);
     3770: 1867:    APPEND_STAT("hash_bytes", "%llu", (unsigned long long)stats_state.hash_bytes);
     3770: 1868:    APPEND_STAT("hash_is_expanding", "%u", stats_state.hash_is_expanding);
     3770: 1869:    if (settings.slab_reassign) {
     3760: 1870:        APPEND_STAT("slab_reassign_rescues", "%llu", stats.slab_reassign_rescues);
     3760: 1871:        APPEND_STAT("slab_reassign_chunk_rescues", "%llu", stats.slab_reassign_chunk_rescues);
     3760: 1872:        APPEND_STAT("slab_reassign_evictions_nomem", "%llu", stats.slab_reassign_evictions_nomem);
     3760: 1873:        APPEND_STAT("slab_reassign_inline_reclaim", "%llu", stats.slab_reassign_inline_reclaim);
     3760: 1874:        APPEND_STAT("slab_reassign_busy_items", "%llu", stats.slab_reassign_busy_items);
     3760: 1875:        APPEND_STAT("slab_reassign_busy_deletes", "%llu", stats.slab_reassign_busy_deletes);
     3760: 1876:        APPEND_STAT("slab_reassign_running", "%u", stats_state.slab_reassign_running);
     3760: 1877:        APPEND_STAT("slabs_moved", "%llu", stats.slabs_moved);
        -: 1878:    }
     3770: 1879:    if (settings.lru_crawler) {
     3736: 1880:        APPEND_STAT("lru_crawler_running", "%u", stats_state.lru_crawler_running);
     3736: 1881:        APPEND_STAT("lru_crawler_starts", "%u", stats.lru_crawler_starts);
        -: 1882:    }
     3770: 1883:    if (settings.lru_maintainer_thread) {
     3744: 1884:        APPEND_STAT("lru_maintainer_juggles", "%llu", (unsigned long long)stats.lru_maintainer_juggles);
        -: 1885:    }
     3770: 1886:    APPEND_STAT("malloc_fails", "%llu",
     3770: 1887:                (unsigned long long)stats.malloc_fails);
     3770: 1888:    APPEND_STAT("log_worker_dropped", "%llu", (unsigned long long)stats.log_worker_dropped);
     3770: 1889:    APPEND_STAT("log_worker_written", "%llu", (unsigned long long)stats.log_worker_written);
     3770: 1890:    APPEND_STAT("log_watcher_skipped", "%llu", (unsigned long long)stats.log_watcher_skipped);
     3770: 1891:    APPEND_STAT("log_watcher_sent", "%llu", (unsigned long long)stats.log_watcher_sent);
     3770: 1892:    APPEND_STAT("log_watchers", "%llu", (unsigned long long)stats_state.log_watchers);
     3770: 1893:    STATS_UNLOCK();
        -: 1894:#ifdef EXTSTORE
     3770: 1895:    storage_stats(add_stats, c);
        -: 1896:#endif
        -: 1897:#ifdef PROXY
        -: 1898:    proxy_stats(settings.proxy_ctx, add_stats, c);
        -: 1899:#endif
        -: 1900:#ifdef TLS
        -: 1901:    if (settings.ssl_enabled) {
        -: 1902:        if (settings.ssl_session_cache) {
        -: 1903:            APPEND_STAT("ssl_new_sessions", "%llu", (unsigned long long)stats.ssl_new_sessions);
        -: 1904:        }
        -: 1905:        APPEND_STAT("ssl_handshake_errors", "%llu", (unsigned long long)stats.ssl_handshake_errors);
        -: 1906:        APPEND_STAT("time_since_server_cert_refresh", "%u", now - settings.ssl_last_cert_refresh_time);
        -: 1907:    }
        -: 1908:#endif
     3770: 1909:    APPEND_STAT("unexpected_napi_ids", "%llu", (unsigned long long)stats.unexpected_napi_ids);
     3770: 1910:    APPEND_STAT("round_robin_fallback", "%llu", (unsigned long long)stats.round_robin_fallback);
     3770: 1911:}
        -: 1912:
       19: 1913:void process_stat_settings(ADD_STAT add_stats, void *c) {
      19*: 1914:    assert(add_stats);
       19: 1915:    APPEND_STAT("maxbytes", "%llu", (unsigned long long)settings.maxbytes);
       19: 1916:    APPEND_STAT("maxconns", "%d", settings.maxconns);
       19: 1917:    APPEND_STAT("tcpport", "%d", settings.port);
       19: 1918:    APPEND_STAT("udpport", "%d", settings.udpport);
       19: 1919:    APPEND_STAT("inter", "%s", settings.inter ? settings.inter : "NULL");
       19: 1920:    APPEND_STAT("verbosity", "%d", settings.verbose);
       19: 1921:    APPEND_STAT("oldest", "%lu", (unsigned long)settings.oldest_live);
       19: 1922:    APPEND_STAT("evictions", "%s", settings.evict_to_free ? "on" : "off");
       38: 1923:    APPEND_STAT("domain_socket", "%s",
       19: 1924:                settings.socketpath ? settings.socketpath : "NULL");
       19: 1925:    APPEND_STAT("umask", "%o", settings.access);
       38: 1926:    APPEND_STAT("shutdown_command", "%s",
       19: 1927:                settings.shutdown_command ? "yes" : "no");
       19: 1928:    APPEND_STAT("growth_factor", "%.2f", settings.factor);
       19: 1929:    APPEND_STAT("chunk_size", "%d", settings.chunk_size);
       19: 1930:    APPEND_STAT("num_threads", "%d", settings.num_threads);
       19: 1931:    APPEND_STAT("num_threads_per_udp", "%d", settings.num_threads_per_udp);
       19: 1932:    APPEND_STAT("stat_key_prefix", "%c", settings.prefix_delimiter);
       37: 1933:    APPEND_STAT("detail_enabled", "%s",
       19: 1934:                settings.detail_enabled ? "yes" : "no");
       19: 1935:    APPEND_STAT("reqs_per_event", "%d", settings.reqs_per_event);
       20: 1936:    APPEND_STAT("cas_enabled", "%s", settings.use_cas ? "yes" : "no");
       19: 1937:    APPEND_STAT("tcp_backlog", "%d", settings.backlog);
       38: 1938:    APPEND_STAT("binding_protocol", "%s",
       19: 1939:                prot_text(settings.binding_protocol));
       38: 1940:    APPEND_STAT("auth_enabled_sasl", "%s", settings.sasl ? "yes" : "no");
       19: 1941:    APPEND_STAT("auth_enabled_ascii", "%s", settings.auth_file ? settings.auth_file : "no");
       19: 1942:    APPEND_STAT("item_size_max", "%d", settings.item_size_max);
       23: 1943:    APPEND_STAT("maxconns_fast", "%s", settings.maxconns_fast ? "yes" : "no");
       19: 1944:    APPEND_STAT("hashpower_init", "%d", settings.hashpower_init);
       23: 1945:    APPEND_STAT("slab_reassign", "%s", settings.slab_reassign ? "yes" : "no");
       19: 1946:    APPEND_STAT("slab_automove", "%d", settings.slab_automove);
       19: 1947:    APPEND_STAT("slab_automove_ratio", "%.2f", settings.slab_automove_ratio);
       19: 1948:    APPEND_STAT("slab_automove_window", "%u", settings.slab_automove_window);
       19: 1949:    APPEND_STAT("slab_chunk_max", "%d", settings.slab_chunk_size_max);
       23: 1950:    APPEND_STAT("lru_crawler", "%s", settings.lru_crawler ? "yes" : "no");
       19: 1951:    APPEND_STAT("lru_crawler_sleep", "%d", settings.lru_crawler_sleep);
       19: 1952:    APPEND_STAT("lru_crawler_tocrawl", "%lu", (unsigned long)settings.lru_crawler_tocrawl);
       19: 1953:    APPEND_STAT("tail_repair_time", "%d", settings.tail_repair_time);
       19: 1954:    APPEND_STAT("flush_enabled", "%s", settings.flush_enabled ? "yes" : "no");
       19: 1955:    APPEND_STAT("dump_enabled", "%s", settings.dump_enabled ? "yes" : "no");
       19: 1956:    APPEND_STAT("hash_algorithm", "%s", settings.hash_algorithm);
       24: 1957:    APPEND_STAT("lru_maintainer_thread", "%s", settings.lru_maintainer_thread ? "yes" : "no");
       24: 1958:    APPEND_STAT("lru_segmented", "%s", settings.lru_segmented ? "yes" : "no");
       19: 1959:    APPEND_STAT("hot_lru_pct", "%d", settings.hot_lru_pct);
       19: 1960:    APPEND_STAT("warm_lru_pct", "%d", settings.warm_lru_pct);
       19: 1961:    APPEND_STAT("hot_max_factor", "%.2f", settings.hot_max_factor);
       19: 1962:    APPEND_STAT("warm_max_factor", "%.2f", settings.warm_max_factor);
       37: 1963:    APPEND_STAT("temp_lru", "%s", settings.temp_lru ? "yes" : "no");
       19: 1964:    APPEND_STAT("temporary_ttl", "%u", settings.temporary_ttl);
       19: 1965:    APPEND_STAT("idle_timeout", "%d", settings.idle_timeout);
       19: 1966:    APPEND_STAT("watcher_logbuf_size", "%u", settings.logger_watcher_buf_size);
       19: 1967:    APPEND_STAT("worker_logbuf_size", "%u", settings.logger_buf_size);
       19: 1968:    APPEND_STAT("read_buf_mem_limit", "%u", settings.read_buf_mem_limit);
       38: 1969:    APPEND_STAT("track_sizes", "%s", item_stats_sizes_status() ? "yes" : "no");
       19: 1970:    APPEND_STAT("inline_ascii_response", "%s", "no"); // setting is dead, cannot be yes.
        -: 1971:#ifdef HAVE_DROP_PRIVILEGES
        -: 1972:    APPEND_STAT("drop_privileges", "%s", settings.drop_privileges ? "yes" : "no");
        -: 1973:#endif
        -: 1974:#ifdef EXTSTORE
       19: 1975:    APPEND_STAT("ext_item_size", "%u", settings.ext_item_size);
       19: 1976:    APPEND_STAT("ext_item_age", "%u", settings.ext_item_age);
       19: 1977:    APPEND_STAT("ext_low_ttl", "%u", settings.ext_low_ttl);
       19: 1978:    APPEND_STAT("ext_recache_rate", "%u", settings.ext_recache_rate);
       19: 1979:    APPEND_STAT("ext_wbuf_size", "%u", settings.ext_wbuf_size);
       19: 1980:    APPEND_STAT("ext_compact_under", "%u", settings.ext_compact_under);
       19: 1981:    APPEND_STAT("ext_drop_under", "%u", settings.ext_drop_under);
       19: 1982:    APPEND_STAT("ext_max_sleep", "%u", settings.ext_max_sleep);
       19: 1983:    APPEND_STAT("ext_max_frag", "%.2f", settings.ext_max_frag);
       19: 1984:    APPEND_STAT("slab_automove_freeratio", "%.3f", settings.slab_automove_freeratio);
       38: 1985:    APPEND_STAT("ext_drop_unread", "%s", settings.ext_drop_unread ? "yes" : "no");
        -: 1986:#endif
        -: 1987:#ifdef TLS
        -: 1988:    APPEND_STAT("ssl_enabled", "%s", settings.ssl_enabled ? "yes" : "no");
        -: 1989:    APPEND_STAT("ssl_chain_cert", "%s", settings.ssl_chain_cert);
        -: 1990:    APPEND_STAT("ssl_key", "%s", settings.ssl_key);
        -: 1991:    APPEND_STAT("ssl_verify_mode", "%d", settings.ssl_verify_mode);
        -: 1992:    APPEND_STAT("ssl_keyformat", "%d", settings.ssl_keyformat);
        -: 1993:    APPEND_STAT("ssl_ciphers", "%s", settings.ssl_ciphers ? settings.ssl_ciphers : "NULL");
        -: 1994:    APPEND_STAT("ssl_ca_cert", "%s", settings.ssl_ca_cert ? settings.ssl_ca_cert : "NULL");
        -: 1995:    APPEND_STAT("ssl_wbuf_size", "%u", settings.ssl_wbuf_size);
        -: 1996:    APPEND_STAT("ssl_session_cache", "%s", settings.ssl_session_cache ? "yes" : "no");
        -: 1997:    APPEND_STAT("ssl_kernel_tls", "%s", settings.ssl_kernel_tls ? "yes" : "no");
        -: 1998:    APPEND_STAT("ssl_min_version", "%s", ssl_proto_text(settings.ssl_min_version));
        -: 1999:#endif
        -: 2000:#ifdef PROXY
        -: 2001:    APPEND_STAT("proxy_enabled", "%s", settings.proxy_enabled ? "yes" : "no");
        -: 2002:    APPEND_STAT("proxy_uring_enabled", "%s", settings.proxy_uring ? "yes" : "no");
        -: 2003:#endif
       19: 2004:    APPEND_STAT("num_napi_ids", "%s", settings.num_napi_ids);
       19: 2005:    APPEND_STAT("memory_file", "%s", settings.memory_file);
       19: 2006:}
        -: 2007:
     1604: 2008:static int nz_strcmp(int nzlength, const char *nz, const char *z) {
     1604: 2009:    int zlength=strlen(z);
     1604: 2010:    return (zlength == nzlength) && (strncmp(nz, z, zlength) == 0) ? 0 : -1;
        -: 2011:}
        -: 2012:
     5346: 2013:bool get_stats(const char *stat_type, int nkey, ADD_STAT add_stats, void *c) {
     5346: 2014:    bool ret = true;
        -: 2015:
     5346: 2016:    if (add_stats != NULL) {
     5346: 2017:        if (!stat_type) {
        -: 2018:            /* prepare general statistics for the engine */
     3770: 2019:            STATS_LOCK();
     3770: 2020:            APPEND_STAT("bytes", "%llu", (unsigned long long)stats_state.curr_bytes);
     3770: 2021:            APPEND_STAT("curr_items", "%llu", (unsigned long long)stats_state.curr_items);
     3770: 2022:            APPEND_STAT("total_items", "%llu", (unsigned long long)stats.total_items);
     3770: 2023:            STATS_UNLOCK();
     3770: 2024:            APPEND_STAT("slab_global_page_pool", "%u", global_page_pool_size(NULL));
     3770: 2025:            item_stats_totals(add_stats, c);
     1576: 2026:        } else if (nz_strcmp(nkey, stat_type, "items") == 0) {
     1548: 2027:            item_stats(add_stats, c);
       28: 2028:        } else if (nz_strcmp(nkey, stat_type, "slabs") == 0) {
       28: 2029:            slabs_stats(add_stats, c);
    #####: 2030:        } else if (nz_strcmp(nkey, stat_type, "sizes") == 0) {
    #####: 2031:            item_stats_sizes(add_stats, c);
    #####: 2032:        } else if (nz_strcmp(nkey, stat_type, "sizes_enable") == 0) {
    #####: 2033:            item_stats_sizes_enable(add_stats, c);
    #####: 2034:        } else if (nz_strcmp(nkey, stat_type, "sizes_disable") == 0) {
    #####: 2035:            item_stats_sizes_disable(add_stats, c);
        -: 2036:        } else {
        -: 2037:            ret = false;
        -: 2038:        }
        -: 2039:    } else {
        -: 2040:        ret = false;
        -: 2041:    }
        -: 2042:
     5346: 2043:    return ret;
        -: 2044:}
        -: 2045:
       24: 2046:static inline void get_conn_text(const conn *c, const int af,
        -: 2047:                char* addr, struct sockaddr *sock_addr) {
       24: 2048:    char addr_text[MAXPATHLEN];
       24: 2049:    addr_text[0] = '\0';
       24: 2050:    const char *protoname = "?";
       24: 2051:    unsigned short port = 0;
        -: 2052:
       24: 2053:    switch (af) {
        9: 2054:        case AF_INET:
        9: 2055:            (void) inet_ntop(af,
        9: 2056:                    &((struct sockaddr_in *)sock_addr)->sin_addr,
        -: 2057:                    addr_text,
        -: 2058:                    sizeof(addr_text) - 1);
        9: 2059:            port = ntohs(((struct sockaddr_in *)sock_addr)->sin_port);
        9: 2060:            protoname = IS_UDP(c->transport) ? "udp" : "tcp";
        -: 2061:            break;
        -: 2062:
    #####: 2063:        case AF_INET6:
    #####: 2064:            addr_text[0] = '[';
    #####: 2065:            addr_text[1] = '\0';
    #####: 2066:            if (inet_ntop(af,
    #####: 2067:                    &((struct sockaddr_in6 *)sock_addr)->sin6_addr,
        -: 2068:                    addr_text + 1,
        -: 2069:                    sizeof(addr_text) - 2)) {
    #####: 2070:                strncat(addr_text, "]", 2);
        -: 2071:            }
    #####: 2072:            port = ntohs(((struct sockaddr_in6 *)sock_addr)->sin6_port);
    #####: 2073:            protoname = IS_UDP(c->transport) ? "udp6" : "tcp6";
        -: 2074:            break;
        -: 2075:
        -: 2076:#ifndef DISABLE_UNIX_SOCKET
        -: 2077:        case AF_UNIX:
        -: 2078:        {
        9: 2079:            size_t pathlen = 0;
        -: 2080:            // this strncpy call originally could piss off an address
        -: 2081:            // sanitizer; we supplied the size of the dest buf as a limiter,
        -: 2082:            // but optimized versions of strncpy could read past the end of
        -: 2083:            // *src while looking for a null terminator. Since buf and
        -: 2084:            // sun_path here are both on the stack they could even overlap,
        -: 2085:            // which is "undefined". In all OSS versions of strncpy I could
        -: 2086:            // find this has no effect; it'll still only copy until the first null
        -: 2087:            // terminator is found. Thus it's possible to get the OS to
        -: 2088:            // examine past the end of sun_path but it's unclear to me if this
        -: 2089:            // can cause any actual problem.
        -: 2090:            //
        -: 2091:            // We need a safe_strncpy util function but I'll punt on figuring
        -: 2092:            // that out for now.
        9: 2093:            pathlen = sizeof(((struct sockaddr_un *)sock_addr)->sun_path);
        9: 2094:            if (MAXPATHLEN <= pathlen) {
        -: 2095:                pathlen = MAXPATHLEN - 1;
        -: 2096:            }
        9: 2097:            strncpy(addr_text,
        9: 2098:                    ((struct sockaddr_un *)sock_addr)->sun_path,
        -: 2099:                    pathlen);
        9: 2100:            addr_text[pathlen] = '\0';
        9: 2101:            protoname = "unix";
        -: 2102:        }
        9: 2103:            break;
        -: 2104:#endif /* #ifndef DISABLE_UNIX_SOCKET */
        -: 2105:    }
        -: 2106:
       24: 2107:    if (strlen(addr_text) < 2) {
        -: 2108:        /* Most likely this is a connected UNIX-domain client which
        -: 2109:         * has no peer socket address, but there's no portable way
        -: 2110:         * to tell for sure.
        -: 2111:         */
        6: 2112:        snprintf(addr_text, MAXPATHLEN, "<AF %d>", af);
        -: 2113:    }
        -: 2114:
       24: 2115:    if (port) {
        9: 2116:        snprintf(addr, MAXPATHLEN + 11, "%s:%s:%u", protoname, addr_text, port);
        -: 2117:    } else {
       15: 2118:        snprintf(addr, MAXPATHLEN + 11, "%s:%s", protoname, addr_text);
        -: 2119:    }
       24: 2120:}
        -: 2121:
       16: 2122:static void conn_to_str(const conn *c, char *addr, char *svr_addr) {
       16: 2123:    if (!c) {
    #####: 2124:        memcpy(addr, "<null>", 6);
       16: 2125:    } else if (c->state == conn_closed) {
    #####: 2126:        memcpy(addr, "<closed>", 8);
        -: 2127:    } else {
       16: 2128:        struct sockaddr_in6 local_addr;
       16: 2129:        struct sockaddr *sock_addr = (void *)&c->request_addr;
        -: 2130:
        -: 2131:        /* For listen ports and idle UDP ports, show listen address */
       16: 2132:        if (c->state == conn_listening ||
       12: 2133:                (IS_UDP(c->transport) &&
        -: 2134:                 c->state == conn_read)) {
        8: 2135:            memset(&local_addr, 0, sizeof(local_addr));
        8: 2136:            socklen_t local_addr_len = sizeof(local_addr);
        -: 2137:
        8: 2138:            if (getsockname(c->sfd,
        -: 2139:                        (struct sockaddr *)&local_addr,
        -: 2140:                        &local_addr_len) == 0) {
        8: 2141:                sock_addr = (struct sockaddr *)&local_addr;
        -: 2142:            }
        -: 2143:        }
       16: 2144:        get_conn_text(c, sock_addr->sa_family, addr, sock_addr);
        -: 2145:
       16: 2146:        if (c->state != conn_listening && !(IS_UDP(c->transport) &&
        -: 2147:                 c->state == conn_read)) {
        8: 2148:            struct sockaddr_storage svr_sock_addr;
        8: 2149:            memset(&svr_sock_addr, 0, sizeof(svr_sock_addr));
        8: 2150:            socklen_t svr_addr_len = sizeof(svr_sock_addr);
        8: 2151:            getsockname(c->sfd, (struct sockaddr *)&svr_sock_addr, &svr_addr_len);
        8: 2152:            get_conn_text(c, svr_sock_addr.ss_family, svr_addr, (struct sockaddr *)&svr_sock_addr);
        -: 2153:        }
        -: 2154:    }
       16: 2155:}
        -: 2156:
        4: 2157:void process_stats_conns(ADD_STAT add_stats, void *c) {
        4: 2158:    int i;
        4: 2159:    char key_str[STAT_KEY_LEN];
        4: 2160:    char val_str[STAT_VAL_LEN];
        4: 2161:    size_t extras_len = sizeof(":unix:") + sizeof("65535");
        4: 2162:    char addr[MAXPATHLEN + extras_len];
        4: 2163:    char svr_addr[MAXPATHLEN + extras_len];
        4: 2164:    memset(addr, 0, sizeof(addr));
        4: 2165:    memset(svr_addr, 0, sizeof(svr_addr));
        4: 2166:    int klen = 0, vlen = 0;
        -: 2167:
       4*: 2168:    assert(add_stats);
        -: 2169:
     4100: 2170:    for (i = 0; i < max_fds; i++) {
     4096: 2171:        if (conns[i]) {
        -: 2172:            /* This is safe to do unlocked because conns are never freed; the
        -: 2173:             * worst that'll happen will be a minor inconsistency in the
        -: 2174:             * output -- not worth the complexity of the locking that'd be
        -: 2175:             * required to prevent it.
        -: 2176:             */
       16: 2177:            if (IS_UDP(conns[i]->transport)) {
        4: 2178:                APPEND_NUM_STAT(i, "UDP", "%s", "UDP");
        -: 2179:            }
       16: 2180:            if (conns[i]->state != conn_closed) {
       16: 2181:                conn_to_str(conns[i], addr, svr_addr);
        -: 2182:
       16: 2183:                APPEND_NUM_STAT(i, "addr", "%s", addr);
       16: 2184:                if (conns[i]->state != conn_listening &&
       12: 2185:                    !(IS_UDP(conns[i]->transport) && conns[i]->state == conn_read)) {
        8: 2186:                    APPEND_NUM_STAT(i, "listen_addr", "%s", svr_addr);
        -: 2187:                }
       16: 2188:                APPEND_NUM_STAT(i, "state", "%s",
       16: 2189:                        state_text(conns[i]->state));
       16: 2190:                APPEND_NUM_STAT(i, "secs_since_last_cmd", "%d",
     4096: 2191:                        current_time - conns[i]->last_cmd_time);
        -: 2192:            }
        -: 2193:        }
        -: 2194:    }
        4: 2195:}
        -: 2196:
        -: 2197:#define IT_REFCOUNT_LIMIT 60000
   133455: 2198:item* limited_get(const char *key, size_t nkey, LIBEVENT_THREAD *t, uint32_t exptime, bool should_touch, bool do_update, bool *overflow) {
   133455: 2199:    item *it;
   133455: 2200:    if (should_touch) {
        8: 2201:        it = item_touch(key, nkey, exptime, t);
        -: 2202:    } else {
   133447: 2203:        it = item_get(key, nkey, t, do_update);
        -: 2204:    }
   133455: 2205:    if (it && it->refcount > IT_REFCOUNT_LIMIT) {
    #####: 2206:        item_remove(it);
    #####: 2207:        it = NULL;
    #####: 2208:        *overflow = true;
        -: 2209:    } else {
   133455: 2210:        *overflow = false;
        -: 2211:    }
   133455: 2212:    return it;
        -: 2213:}
        -: 2214:
        -: 2215:// Semantics are different than limited_get; since the item is returned
        -: 2216:// locked, caller can directly change what it needs.
        -: 2217:// though it might eventually be a better interface to sink it all into
        -: 2218:// items.c.
       14: 2219:item* limited_get_locked(const char *key, size_t nkey, LIBEVENT_THREAD *t, bool do_update, uint32_t *hv, bool *overflow) {
       14: 2220:    item *it;
       14: 2221:    it = item_get_locked(key, nkey, t, do_update, hv);
       14: 2222:    if (it && it->refcount > IT_REFCOUNT_LIMIT) {
    #####: 2223:        do_item_remove(it);
    #####: 2224:        it = NULL;
    #####: 2225:        item_unlock(*hv);
    #####: 2226:        *overflow = true;
        -: 2227:    } else {
       14: 2228:        *overflow = false;
        -: 2229:    }
       14: 2230:    return it;
        -: 2231:}
        -: 2232:
        -: 2233:/*
        -: 2234: * adds a delta value to a numeric item.
        -: 2235: *
        -: 2236: * c     connection requesting the operation
        -: 2237: * it    item to adjust
        -: 2238: * incr  true to increment value, false to decrement
        -: 2239: * delta amount to adjust value by
        -: 2240: * buf   buffer for response string
        -: 2241: *
        -: 2242: * returns a response string to send back to the client.
        -: 2243: */
      411: 2244:enum delta_result_type do_add_delta(LIBEVENT_THREAD *t, const char *key, const size_t nkey,
        -: 2245:                                    const bool incr, const int64_t delta,
        -: 2246:                                    char *buf, uint64_t *cas,
        -: 2247:                                    const uint32_t hv,
        -: 2248:                                    item **it_ret) {
      411: 2249:    char *ptr;
      411: 2250:    uint64_t value;
      411: 2251:    int res;
      411: 2252:    item *it;
        -: 2253:
      411: 2254:    it = do_item_get(key, nkey, hv, t, DONT_UPDATE);
      411: 2255:    if (!it) {
        -: 2256:        return DELTA_ITEM_NOT_FOUND;
        -: 2257:    }
        -: 2258:
        -: 2259:    /* Can't delta zero byte values. 2-byte are the "\r\n" */
        -: 2260:    /* Also can't delta for chunked items. Too large to be a number */
        -: 2261:#ifdef EXTSTORE
      338: 2262:    if (it->nbytes <= 2 || (it->it_flags & (ITEM_CHUNKED|ITEM_HDR)) != 0) {
        -: 2263:#else
        -: 2264:    if (it->nbytes <= 2 || (it->it_flags & (ITEM_CHUNKED)) != 0) {
        -: 2265:#endif
        1: 2266:        do_item_remove(it);
        1: 2267:        return NON_NUMERIC;
        -: 2268:    }
        -: 2269:
      337: 2270:    if (cas != NULL && *cas != 0 && ITEM_get_cas(it) != *cas) {
        1: 2271:        do_item_remove(it);
        1: 2272:        return DELTA_ITEM_CAS_MISMATCH;
        -: 2273:    }
        -: 2274:
      336: 2275:    ptr = ITEM_data(it);
        -: 2276:
      336: 2277:    if (!safe_strtoull(ptr, &value)) {
        4: 2278:        do_item_remove(it);
        4: 2279:        return NON_NUMERIC;
        -: 2280:    }
        -: 2281:
      332: 2282:    if (incr) {
      297: 2283:        value += delta;
        -: 2284:        //MEMCACHED_COMMAND_INCR(c->sfd, ITEM_key(it), it->nkey, value);
        -: 2285:    } else {
       35: 2286:        if(delta > value) {
        6: 2287:            value = 0;
        -: 2288:        } else {
       29: 2289:            value -= delta;
        -: 2290:        }
        -: 2291:        //MEMCACHED_COMMAND_DECR(c->sfd, ITEM_key(it), it->nkey, value);
        -: 2292:    }
        -: 2293:
      332: 2294:    pthread_mutex_lock(&t->stats.mutex);
      332: 2295:    if (incr) {
      297: 2296:        t->stats.slab_stats[ITEM_clsid(it)].incr_hits++;
        -: 2297:    } else {
       35: 2298:        t->stats.slab_stats[ITEM_clsid(it)].decr_hits++;
        -: 2299:    }
      332: 2300:    pthread_mutex_unlock(&t->stats.mutex);
        -: 2301:
      332: 2302:    itoa_u64(value, buf);
      332: 2303:    res = strlen(buf);
        -: 2304:    /* refcount == 2 means we are the only ones holding the item, and it is
        -: 2305:     * linked. We hold the item's lock in this function, so refcount cannot
        -: 2306:     * increase. */
      332: 2307:    if (res + 2 <= it->nbytes && it->refcount == 2) { /* replace in-place */
        -: 2308:        /* When changing the value without replacing the item, we
        -: 2309:           need to update the CAS on the existing item. */
        -: 2310:        /* We also need to fiddle it in the sizes tracker in case the tracking
        -: 2311:         * was enabled at runtime, since it relies on the CAS value to know
        -: 2312:         * whether to remove an item or not. */
       78: 2313:        item_stats_sizes_remove(it);
       78: 2314:        ITEM_set_cas(it, (settings.use_cas) ? get_cas_id() : 0);
       78: 2315:        item_stats_sizes_add(it);
       78: 2316:        memcpy(ITEM_data(it), buf, res);
       78: 2317:        memset(ITEM_data(it) + res, ' ', it->nbytes - res - 2);
       78: 2318:        do_item_update(it);
      254: 2319:    } else if (it->refcount > 1) {
      254: 2320:        item *new_it;
      254: 2321:        uint32_t flags;
     254*: 2322:        FLAGS_CONV(it, flags);
      254: 2323:        new_it = do_item_alloc(ITEM_key(it), it->nkey, flags, it->exptime, res + 2);
      254: 2324:        if (new_it == 0) {
    #####: 2325:            do_item_remove(it);
    #####: 2326:            return EOM;
        -: 2327:        }
      254: 2328:        memcpy(ITEM_data(new_it), buf, res);
      254: 2329:        memcpy(ITEM_data(new_it) + res, "\r\n", 2);
      254: 2330:        item_replace(it, new_it, hv);
        -: 2331:        // Overwrite the older item's CAS with our new CAS since we're
        -: 2332:        // returning the CAS of the old item below.
      254: 2333:        ITEM_set_cas(it, (settings.use_cas) ? ITEM_get_cas(new_it) : 0);
      254: 2334:        do_item_remove(new_it);       /* release our reference */
        -: 2335:    } else {
        -: 2336:        /* Should never get here. This means we somehow fetched an unlinked
        -: 2337:         * item. TODO: Add a counter? */
    #####: 2338:        if (settings.verbose) {
    #####: 2339:            fprintf(stderr, "Tried to do incr/decr on invalid item\n");
        -: 2340:        }
    #####: 2341:        if (it->refcount == 1)
    #####: 2342:            do_item_remove(it);
    #####: 2343:        return DELTA_ITEM_NOT_FOUND;
        -: 2344:    }
        -: 2345:
      332: 2346:    if (cas) {
       65: 2347:        *cas = ITEM_get_cas(it);    /* swap the incoming CAS value */
        -: 2348:    }
      332: 2349:    if (it_ret != NULL) {
        8: 2350:        *it_ret = it;
        -: 2351:    } else {
      324: 2352:        do_item_remove(it);         /* release our reference */
        -: 2353:    }
        -: 2354:    return OK;
        -: 2355:}
        -: 2356:
      125: 2357:static int try_read_command_negotiate(conn *c) {
     125*: 2358:    assert(c != NULL);
     125*: 2359:    assert(c->protocol == negotiating_prot);
     125*: 2360:    assert(c->rcurr <= (c->rbuf + c->rsize));
     125*: 2361:    assert(c->rbytes > 0);
        -: 2362:
      125: 2363:    if ((unsigned char)c->rbuf[0] == (unsigned char)PROTOCOL_BINARY_REQ) {
        9: 2364:        c->protocol = binary_prot;
        9: 2365:        c->try_read_command = try_read_command_binary;
        -: 2366:    } else {
        -: 2367:        // authentication doesn't work with negotiated protocol.
      116: 2368:        c->protocol = ascii_prot;
      116: 2369:        c->try_read_command = try_read_command_ascii;
        -: 2370:    }
        -: 2371:
      125: 2372:    if (settings.verbose > 1) {
    #####: 2373:        fprintf(stderr, "%d: Client using the %s protocol\n", c->sfd,
        -: 2374:                prot_text(c->protocol));
        -: 2375:    }
        -: 2376:
      125: 2377:    return c->try_read_command(c);
        -: 2378:}
        -: 2379:
       18: 2380:static int try_read_command_udp(conn *c) {
      18*: 2381:    assert(c != NULL);
      18*: 2382:    assert(c->rcurr <= (c->rbuf + c->rsize));
      18*: 2383:    assert(c->rbytes > 0);
        -: 2384:
       18: 2385:    if ((unsigned char)c->rbuf[0] == (unsigned char)PROTOCOL_BINARY_REQ) {
        7: 2386:        c->protocol = binary_prot;
        7: 2387:        return try_read_command_binary(c);
        -: 2388:    } else {
       11: 2389:        c->protocol = ascii_prot;
       11: 2390:        return try_read_command_ascii(c);
        -: 2391:    }
        -: 2392:}
        -: 2393:
        -: 2394:/*
        -: 2395: * read a UDP request.
        -: 2396: */
       30: 2397:static enum try_read_result try_read_udp(conn *c) {
       30: 2398:    int res;
        -: 2399:
      30*: 2400:    assert(c != NULL);
        -: 2401:
       30: 2402:    c->request_addr_size = sizeof(c->request_addr);
       60: 2403:    res = recvfrom(c->sfd, c->rbuf, c->rsize,
       30: 2404:                   0, (struct sockaddr *)&c->request_addr,
        -: 2405:                   &c->request_addr_size);
       30: 2406:    if (res > 8) {
       18: 2407:        unsigned char *buf = (unsigned char *)c->rbuf;
       18: 2408:        pthread_mutex_lock(&c->thread->stats.mutex);
       18: 2409:        c->thread->stats.bytes_read += res;
       18: 2410:        pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 2411:
        -: 2412:        /* Beginning of UDP packet is the request ID; save it. */
       18: 2413:        c->request_id = buf[0] * 256 + buf[1];
        -: 2414:
        -: 2415:        /* If this is a multi-packet request, drop it. */
       18: 2416:        if (buf[4] != 0 || buf[5] != 1) {
        -: 2417:            return READ_NO_DATA_RECEIVED;
        -: 2418:        }
        -: 2419:
        -: 2420:        /* Don't care about any of the rest of the header. */
       18: 2421:        res -= 8;
       18: 2422:        memmove(c->rbuf, c->rbuf + 8, res);
        -: 2423:
       18: 2424:        c->rbytes = res;
       18: 2425:        c->rcurr = c->rbuf;
       18: 2426:        return READ_DATA_RECEIVED;
        -: 2427:    }
        -: 2428:    return READ_NO_DATA_RECEIVED;
        -: 2429:}
        -: 2430:
        -: 2431:/*
        -: 2432: * read from network as much as we can, handle buffer overflow and connection
        -: 2433: * close.
        -: 2434: * before reading, move the remaining incomplete fragment of a command
        -: 2435: * (if any) to the beginning of the buffer.
        -: 2436: *
        -: 2437: * To protect us from someone flooding a connection with bogus data causing
        -: 2438: * the connection to eat up all available memory, break out and start looking
        -: 2439: * at the data I've got after a number of reallocs...
        -: 2440: *
        -: 2441: * @return enum try_read_result
        -: 2442: */
   478158: 2443:static enum try_read_result try_read_network(conn *c) {
   478158: 2444:    enum try_read_result gotdata = READ_NO_DATA_RECEIVED;
   478158: 2445:    int res;
   478158: 2446:    int num_allocs = 0;
  478158*: 2447:    assert(c != NULL);
        -: 2448:
   478158: 2449:    if (c->rcurr != c->rbuf) {
     3698: 2450:        if (c->rbytes != 0) /* otherwise there's nothing to copy */
     3698: 2451:            memmove(c->rbuf, c->rcurr, c->rbytes);
     3698: 2452:        c->rcurr = c->rbuf;
        -: 2453:    }
        -: 2454:
   478161: 2455:    while (1) {
        -: 2456:        // TODO: move to rbuf_* func?
   478161: 2457:        if (c->rbytes >= c->rsize && c->rbuf_malloced) {
        3: 2458:            if (num_allocs == 4) {
    #####: 2459:                return gotdata;
        -: 2460:            }
        3: 2461:            ++num_allocs;
        3: 2462:            char *new_rbuf = realloc(c->rbuf, c->rsize * 2);
        3: 2463:            if (!new_rbuf) {
    #####: 2464:                STATS_LOCK();
    #####: 2465:                stats.malloc_fails++;
    #####: 2466:                STATS_UNLOCK();
    #####: 2467:                if (settings.verbose > 0) {
    #####: 2468:                    fprintf(stderr, "Couldn't realloc input buffer\n");
        -: 2469:                }
    #####: 2470:                c->rbytes = 0; /* ignore what we read */
    #####: 2471:                out_of_memory(c, "SERVER_ERROR out of memory reading request");
    #####: 2472:                c->close_after_write = true;
    #####: 2473:                return READ_MEMORY_ERROR;
        -: 2474:            }
        3: 2475:            c->rcurr = c->rbuf = new_rbuf;
        3: 2476:            c->rsize *= 2;
        -: 2477:        }
        -: 2478:
   478161: 2479:        int avail = c->rsize - c->rbytes;
   478161: 2480:        res = c->read(c, c->rbuf + c->rbytes, avail);
   478161: 2481:        if (res > 0) {
   476062: 2482:            pthread_mutex_lock(&c->thread->stats.mutex);
   476062: 2483:            c->thread->stats.bytes_read += res;
   476062: 2484:            pthread_mutex_unlock(&c->thread->stats.mutex);
   476062: 2485:            gotdata = READ_DATA_RECEIVED;
   476062: 2486:            c->rbytes += res;
   476062: 2487:            if (res == avail && c->rbuf_malloced) {
        -: 2488:                // Resize rbuf and try a few times if huge ascii multiget.
        3: 2489:                continue;
        -: 2490:            } else {
        -: 2491:                break;
        -: 2492:            }
        -: 2493:        }
     2099: 2494:        if (res == 0) {
     2098: 2495:            c->close_reason = NORMAL_CLOSE;
     2098: 2496:            return READ_ERROR;
        -: 2497:        }
        1: 2498:        if (res == -1) {
        1: 2499:            if (errno == EAGAIN || errno == EWOULDBLOCK) {
        -: 2500:                break;
        -: 2501:            }
        1: 2502:            return READ_ERROR;
        -: 2503:        }
        -: 2504:    }
        -: 2505:    return gotdata;
        -: 2506:}
        -: 2507:
   507806: 2508:static bool update_event(conn *c, const int new_flags) {
  507806*: 2509:    assert(c != NULL);
        -: 2510:
   507806: 2511:    struct event_base *base = c->event.ev_base;
   507806: 2512:    if (c->ev_flags == new_flags)
        -: 2513:        return true;
     1659: 2514:    if (event_del(&c->event) == -1) return false;
     1659: 2515:    event_set(&c->event, c->sfd, new_flags, event_handler, (void *)c);
     1659: 2516:    event_base_set(base, &c->event);
     1659: 2517:    c->ev_flags = new_flags;
    1659*: 2518:    if (event_add(&c->event, 0) == -1) return false;
        -: 2519:    return true;
        -: 2520:}
        -: 2521:
        -: 2522:/*
        -: 2523: * Sets whether we are listening for new connections or not.
        -: 2524: */
    #####: 2525:void do_accept_new_conns(const bool do_accept) {
    #####: 2526:    conn *next;
        -: 2527:
    #####: 2528:    for (next = listen_conn; next; next = next->next) {
    #####: 2529:        if (do_accept) {
    #####: 2530:            update_event(next, EV_READ | EV_PERSIST);
    #####: 2531:            if (listen(next->sfd, settings.backlog) != 0) {
    #####: 2532:                perror("listen");
        -: 2533:            }
        -: 2534:        }
        -: 2535:        else {
    #####: 2536:            update_event(next, 0);
    #####: 2537:            if (listen(next->sfd, 0) != 0) {
    #####: 2538:                perror("listen");
        -: 2539:            }
        -: 2540:        }
        -: 2541:    }
        -: 2542:
    #####: 2543:    if (do_accept) {
    #####: 2544:        struct timeval maxconns_exited;
    #####: 2545:        uint64_t elapsed_us;
    #####: 2546:        gettimeofday(&maxconns_exited,NULL);
    #####: 2547:        STATS_LOCK();
    #####: 2548:        elapsed_us =
    #####: 2549:            (maxconns_exited.tv_sec - stats.maxconns_entered.tv_sec) * 1000000
    #####: 2550:            + (maxconns_exited.tv_usec - stats.maxconns_entered.tv_usec);
    #####: 2551:        stats.time_in_listen_disabled_us += elapsed_us;
    #####: 2552:        stats_state.accepting_conns = true;
    #####: 2553:        STATS_UNLOCK();
        -: 2554:    } else {
    #####: 2555:        STATS_LOCK();
    #####: 2556:        stats_state.accepting_conns = false;
    #####: 2557:        gettimeofday(&stats.maxconns_entered,NULL);
    #####: 2558:        stats.listen_disabled_num++;
    #####: 2559:        STATS_UNLOCK();
    #####: 2560:        allow_new_conns = false;
    #####: 2561:        maxconns_handler(-42, 0, 0);
        -: 2562:    }
    #####: 2563:}
        -: 2564:
        -: 2565:#define TRANSMIT_ONE_RESP true
        -: 2566:#define TRANSMIT_ALL_RESP false
   483946: 2567:static int _transmit_pre(conn *c, struct iovec *iovs, int iovused, bool one_resp) {
   483946: 2568:    mc_resp *resp = c->resp_head;
  1105668: 2569:    while (resp && iovused + resp->iovcnt < IOV_MAX-1) {
   621754: 2570:        if (resp->skip) {
        -: 2571:            // Don't actually unchain the resp obj here since it's singly-linked.
        -: 2572:            // Just let the post function handle it linearly.
   164208: 2573:            resp = resp->next;
   164208: 2574:            continue;
        -: 2575:        }
   457546: 2576:        if (resp->chunked_data_iov) {
        -: 2577:            // Handle chunked items specially.
        -: 2578:            // They spend much more time in send so we can be a bit wasteful
        -: 2579:            // in rebuilding iovecs for them.
    19326: 2580:            item_chunk *ch = (item_chunk *)ITEM_schunk((item *)resp->iov[resp->chunked_data_iov].iov_base);
    19326: 2581:            int x;
    77304: 2582:            for (x = 0; x < resp->iovcnt; x++) {
        -: 2583:                // This iov is tracking how far we've copied so far.
    57978: 2584:                if (x == resp->chunked_data_iov) {
    19326: 2585:                    int done = resp->chunked_total - resp->iov[x].iov_len;
        -: 2586:                    // Start from the len to allow binprot to cut the \r\n
    19326: 2587:                    int todo = resp->iov[x].iov_len;
   156407: 2588:                    while (ch && todo > 0 && iovused < IOV_MAX-1) {
   137081: 2589:                        int skip = 0;
   137081: 2590:                        if (!ch->used) {
    32842: 2591:                            ch = ch->next;
    32842: 2592:                            continue;
        -: 2593:                        }
        -: 2594:                        // Skip parts we've already sent.
   104239: 2595:                        if (done >= ch->used) {
     3746: 2596:                            done -= ch->used;
     3746: 2597:                            ch = ch->next;
     3746: 2598:                            continue;
   100493: 2599:                        } else if (done) {
      357: 2600:                            skip = done;
      357: 2601:                            done = 0;
        -: 2602:                        }
   100493: 2603:                        iovs[iovused].iov_base = ch->data + skip;
        -: 2604:                        // Stupid binary protocol makes this go negative.
   100493: 2605:                        iovs[iovused].iov_len = ch->used - skip > todo ? todo : ch->used - skip;
   100493: 2606:                        iovused++;
   100493: 2607:                        todo -= ch->used - skip;
   100493: 2608:                        ch = ch->next;
        -: 2609:                    }
        -: 2610:                } else {
    38652: 2611:                    iovs[iovused].iov_base = resp->iov[x].iov_base;
    38652: 2612:                    iovs[iovused].iov_len = resp->iov[x].iov_len;
    38652: 2613:                    iovused++;
        -: 2614:                }
    57978: 2615:                if (iovused >= IOV_MAX-1)
        -: 2616:                    break;
        -: 2617:            }
        -: 2618:        } else {
   438220: 2619:            memcpy(&iovs[iovused], resp->iov, sizeof(struct iovec)*resp->iovcnt);
   438220: 2620:            iovused += resp->iovcnt;
        -: 2621:        }
        -: 2622:
        -: 2623:        // done looking at first response, walk down the chain.
   457546: 2624:        resp = resp->next;
        -: 2625:        // used for UDP mode: UDP cannot send multiple responses per packet.
   457546: 2626:        if (one_resp)
        -: 2627:            break;
        -: 2628:    }
   483946: 2629:    return iovused;
        -: 2630:}
        -: 2631:
        -: 2632:/*
        -: 2633: * Decrements and completes responses based on how much data was transmitted.
        -: 2634: * Takes the connection and current result bytes.
        -: 2635: */
   483650: 2636:static void _transmit_post(conn *c, ssize_t res) {
        -: 2637:    // We've written some of the data. Remove the completed
        -: 2638:    // responses from the list of pending writes.
   483650: 2639:    mc_resp *resp = c->resp_head;
  1103741: 2640:    while (resp) {
   620436: 2641:        int x;
   620436: 2642:        if (resp->skip) {
   164208: 2643:            resp = resp_finish(c, resp);
   164208: 2644:            continue;
        -: 2645:        }
        -: 2646:
        -: 2647:        // fastpath check. all small responses should cut here.
   456228: 2648:        if (res >= resp->tosend) {
   455883: 2649:            res -= resp->tosend;
   455883: 2650:            resp = resp_finish(c, resp);
   455883: 2651:            continue;
        -: 2652:        }
        -: 2653:
        -: 2654:        // it's fine to re-check iov's that were zeroed out before.
      766: 2655:        for (x = 0; x < resp->iovcnt; x++) {
      766: 2656:            struct iovec *iov = &resp->iov[x];
      766: 2657:            if (res >= iov->iov_len) {
      421: 2658:                resp->tosend -= iov->iov_len;
      421: 2659:                res -= iov->iov_len;
      421: 2660:                iov->iov_len = 0;
        -: 2661:            } else {
        -: 2662:                // Dumb special case for chunked items. Currently tracking
        -: 2663:                // where to inject the chunked item via iov_base.
        -: 2664:                // Extra not-great since chunked items can't be the first
        -: 2665:                // index, so we have to check for non-zero c_d_iov first.
      345: 2666:                if (!resp->chunked_data_iov || x != resp->chunked_data_iov) {
      165: 2667:                    iov->iov_base = (char *)iov->iov_base + res;
        -: 2668:                }
      345: 2669:                iov->iov_len -= res;
      345: 2670:                resp->tosend -= res;
      345: 2671:                res = 0;
      345: 2672:                break;
        -: 2673:            }
        -: 2674:        }
        -: 2675:
        -: 2676:        // are we done with this response object?
      345: 2677:        if (resp->tosend == 0) {
    #####: 2678:            resp = resp_finish(c, resp);
        -: 2679:        } else {
        -: 2680:            // Jammed up here. This is the new head.
        -: 2681:            break;
        -: 2682:        }
        -: 2683:    }
   483650: 2684:}
        -: 2685:
        -: 2686:/*
        -: 2687: * Transmit the next chunk of data from our list of msgbuf structures.
        -: 2688: *
        -: 2689: * Returns:
        -: 2690: *   TRANSMIT_COMPLETE   All done writing.
        -: 2691: *   TRANSMIT_INCOMPLETE More data remaining to write.
        -: 2692: *   TRANSMIT_SOFT_ERROR Can't write any more right now.
        -: 2693: *   TRANSMIT_HARD_ERROR Can't write (c->state is set to conn_closing)
        -: 2694: */
   483914: 2695:static enum transmit_result transmit(conn *c) {
  483914*: 2696:    assert(c != NULL);
   483914: 2697:    struct iovec iovs[IOV_MAX];
   483914: 2698:    struct msghdr msg;
   483914: 2699:    int iovused = 0;
        -: 2700:
        -: 2701:    // init the msg.
   483914: 2702:    memset(&msg, 0, sizeof(struct msghdr));
   483914: 2703:    msg.msg_iov = iovs;
        -: 2704:
   483914: 2705:    iovused = _transmit_pre(c, iovs, iovused, TRANSMIT_ALL_RESP);
   483914: 2706:    if (iovused == 0) {
        -: 2707:        // Avoid the syscall if we're only handling a noreply.
        -: 2708:        // Return the response object.
    68620: 2709:        _transmit_post(c, 0);
    68620: 2710:        return TRANSMIT_COMPLETE;
        -: 2711:    }
        -: 2712:
        -: 2713:    // Alright, send.
   415294: 2714:    ssize_t res;
   415294: 2715:    msg.msg_iovlen = iovused;
   415294: 2716:    res = c->sendmsg(c, &msg, 0);
   415294: 2717:    if (res >= 0) {
   414998: 2718:        pthread_mutex_lock(&c->thread->stats.mutex);
   414998: 2719:        c->thread->stats.bytes_written += res;
   414998: 2720:        pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 2721:
        -: 2722:        // Decrement any partial IOV's and complete any finished resp's.
   414998: 2723:        _transmit_post(c, res);
        -: 2724:
   414998: 2725:        if (c->resp_head) {
        -: 2726:            return TRANSMIT_INCOMPLETE;
        -: 2727:        } else {
   414667: 2728:            return TRANSMIT_COMPLETE;
        -: 2729:        }
        -: 2730:    }
        -: 2731:
      296: 2732:    if (res == -1 && (errno == EAGAIN || errno == EWOULDBLOCK)) {
      294: 2733:        if (!update_event(c, EV_WRITE | EV_PERSIST)) {
    #####: 2734:            if (settings.verbose > 0)
    #####: 2735:                fprintf(stderr, "Couldn't update event\n");
    #####: 2736:            conn_set_state(c, conn_closing);
    #####: 2737:            return TRANSMIT_HARD_ERROR;
        -: 2738:        }
        -: 2739:        return TRANSMIT_SOFT_ERROR;
        -: 2740:    }
        -: 2741:    /* if res == -1 and error is not EAGAIN or EWOULDBLOCK,
        -: 2742:       we have a real error, on which we close the connection */
        2: 2743:    if (settings.verbose > 0)
    #####: 2744:        perror("Failed to write, and not due to blocking");
        -: 2745:
        2: 2746:    conn_set_state(c, conn_closing);
        2: 2747:    return TRANSMIT_HARD_ERROR;
        -: 2748:}
        -: 2749:
       32: 2750:static void build_udp_header(unsigned char *hdr, mc_resp *resp) {
        -: 2751:    // We need to communicate the total number of packets
        -: 2752:    // If this isn't set, it's the first time this response is building a udp
        -: 2753:    // header, so "tosend" must be static.
       32: 2754:    if (!resp->udp_total) {
       18: 2755:        uint32_t total;
       18: 2756:        total = resp->tosend / UDP_DATA_SIZE;
       18: 2757:        if (resp->tosend % UDP_DATA_SIZE)
       18: 2758:            total++;
        -: 2759:        // The spec doesn't really say what we should do here. It's _probably_
        -: 2760:        // better to bail out?
       18: 2761:        if (total > USHRT_MAX) {
        -: 2762:            total = USHRT_MAX;
        -: 2763:        }
       18: 2764:        resp->udp_total = total;
        -: 2765:    }
        -: 2766:
        -: 2767:    // TODO: why wasn't this hto*'s and casts?
        -: 2768:    // this ends up sending UDP hdr data specifically in host byte order.
       32: 2769:    *hdr++ = resp->request_id / 256;
       32: 2770:    *hdr++ = resp->request_id % 256;
       32: 2771:    *hdr++ = resp->udp_sequence / 256;
       32: 2772:    *hdr++ = resp->udp_sequence % 256;
       32: 2773:    *hdr++ = resp->udp_total / 256;
       32: 2774:    *hdr++ = resp->udp_total % 256;
       32: 2775:    *hdr++ = 0;
       32: 2776:    *hdr++ = 0;
       32: 2777:    resp->udp_sequence++;
       32: 2778:}
        -: 2779:
        -: 2780:/*
        -: 2781: * UDP specific transmit function. Uses its own function rather than check
        -: 2782: * IS_UDP() five times. If we ever implement sendmmsg or similar support they
        -: 2783: * will diverge even more.
        -: 2784: * Does not use TLS.
        -: 2785: *
        -: 2786: * Returns:
        -: 2787: *   TRANSMIT_COMPLETE   All done writing.
        -: 2788: *   TRANSMIT_INCOMPLETE More data remaining to write.
        -: 2789: *   TRANSMIT_SOFT_ERROR Can't write any more right now.
        -: 2790: *   TRANSMIT_HARD_ERROR Can't write (c->state is set to conn_closing)
        -: 2791: */
       32: 2792:static enum transmit_result transmit_udp(conn *c) {
      32*: 2793:    assert(c != NULL);
       32: 2794:    struct iovec iovs[IOV_MAX];
       32: 2795:    struct msghdr msg;
       32: 2796:    mc_resp *resp;
       32: 2797:    int iovused = 0;
       32: 2798:    unsigned char udp_hdr[UDP_HEADER_SIZE];
        -: 2799:
        -: 2800:    // We only send one UDP packet per call (ugh), so we can only operate on a
        -: 2801:    // single response at a time.
       32: 2802:    resp = c->resp_head;
        -: 2803:
       32: 2804:    if (!resp) {
        -: 2805:        return TRANSMIT_COMPLETE;
        -: 2806:    }
        -: 2807:
       32: 2808:    if (resp->skip) {
    #####: 2809:        resp = resp_finish(c, resp);
    #####: 2810:        return TRANSMIT_INCOMPLETE;
        -: 2811:    }
        -: 2812:
        -: 2813:    // clear the message and initialize it.
       32: 2814:    memset(&msg, 0, sizeof(struct msghdr));
       32: 2815:    msg.msg_iov = iovs;
        -: 2816:
        -: 2817:    // the UDP source to return to.
       32: 2818:    msg.msg_name = &resp->request_addr;
       32: 2819:    msg.msg_namelen = resp->request_addr_size;
        -: 2820:
        -: 2821:    // First IOV is the custom UDP header.
       32: 2822:    iovs[0].iov_base = (void *)udp_hdr;
       32: 2823:    iovs[0].iov_len = UDP_HEADER_SIZE;
       32: 2824:    build_udp_header(udp_hdr, resp);
       32: 2825:    iovused++;
        -: 2826:
        -: 2827:    // Fill the IOV's the standard way.
        -: 2828:    // TODO: might get a small speedup if we let it break early with a length
        -: 2829:    // limit.
       32: 2830:    iovused = _transmit_pre(c, iovs, iovused, TRANSMIT_ONE_RESP);
        -: 2831:
        -: 2832:    // Clip the IOV's to the max UDP packet size.
        -: 2833:    // If we add support for send_mmsg, this can be where we split msg's.
        -: 2834:    {
       32: 2835:        int x = 0;
       32: 2836:        int len = 0;
      143: 2837:        for (x = 0; x < iovused; x++) {
       93: 2838:            if (len + iovs[x].iov_len >= UDP_MAX_PAYLOAD_SIZE) {
       14: 2839:                iovs[x].iov_len = UDP_MAX_PAYLOAD_SIZE - len;
       14: 2840:                x++;
       14: 2841:                break;
        -: 2842:            } else {
       79: 2843:                len += iovs[x].iov_len;
        -: 2844:            }
        -: 2845:        }
       32: 2846:        iovused = x;
        -: 2847:    }
        -: 2848:
       32: 2849:    ssize_t res;
       32: 2850:    msg.msg_iovlen = iovused;
        -: 2851:    // NOTE: uses system sendmsg since we have no support for indirect UDP.
       32: 2852:    res = sendmsg(c->sfd, &msg, 0);
       32: 2853:    if (res >= 0) {
       32: 2854:        pthread_mutex_lock(&c->thread->stats.mutex);
       32: 2855:        c->thread->stats.bytes_written += res;
       32: 2856:        pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 2857:
        -: 2858:        // Ignore the header size from forwarding the IOV's
       32: 2859:        res -= UDP_HEADER_SIZE;
        -: 2860:
        -: 2861:        // Decrement any partial IOV's and complete any finished resp's.
       32: 2862:        _transmit_post(c, res);
        -: 2863:
       32: 2864:        if (c->resp_head) {
        -: 2865:            return TRANSMIT_INCOMPLETE;
        -: 2866:        } else {
       18: 2867:            return TRANSMIT_COMPLETE;
        -: 2868:        }
        -: 2869:    }
        -: 2870:
    #####: 2871:    if (res == -1 && (errno == EAGAIN || errno == EWOULDBLOCK)) {
    #####: 2872:        if (!update_event(c, EV_WRITE | EV_PERSIST)) {
    #####: 2873:            if (settings.verbose > 0)
    #####: 2874:                fprintf(stderr, "Couldn't update event\n");
    #####: 2875:            conn_set_state(c, conn_closing);
    #####: 2876:            return TRANSMIT_HARD_ERROR;
        -: 2877:        }
        -: 2878:        return TRANSMIT_SOFT_ERROR;
        -: 2879:    }
        -: 2880:    /* if res == -1 and error is not EAGAIN or EWOULDBLOCK,
        -: 2881:       we have a real error, on which we close the connection */
    #####: 2882:    if (settings.verbose > 0)
    #####: 2883:        perror("Failed to write, and not due to blocking");
        -: 2884:
    #####: 2885:    conn_set_state(c, conn_read);
    #####: 2886:    return TRANSMIT_HARD_ERROR;
        -: 2887:}
        -: 2888:
        -: 2889:
        -: 2890:/* Does a looped read to fill data chunks */
        -: 2891:/* TODO: restrict number of times this can loop.
        -: 2892: * Also, benchmark using readv's.
        -: 2893: */
    11522: 2894:static int read_into_chunked_item(conn *c) {
    11522: 2895:    int total = 0;
    11522: 2896:    int res;
   11522*: 2897:    assert(c->rcurr != c->ritem);
        -: 2898:
   102169: 2899:    while (c->rlbytes > 0) {
    98042: 2900:        item_chunk *ch = (item_chunk *)c->ritem;
    98042: 2901:        if (ch->size == ch->used) {
        -: 2902:            // FIXME: ch->next is currently always 0. remove this?
    41442: 2903:            if (ch->next) {
    #####: 2904:                c->ritem = (char *) ch->next;
        -: 2905:            } else {
        -: 2906:                /* Allocate next chunk. Binary protocol needs 2b for \r\n */
    41442: 2907:                c->ritem = (char *) do_item_alloc_chunk(ch, c->rlbytes +
    41442: 2908:                       ((c->protocol == binary_prot) ? 2 : 0));
    41442: 2909:                if (!c->ritem) {
        -: 2910:                    // We failed an allocation. Let caller handle cleanup.
        -: 2911:                    total = -2;
        -: 2912:                    break;
        -: 2913:                }
        -: 2914:                // ritem has new chunk, restart the loop.
    41442: 2915:                continue;
        -: 2916:                //assert(c->rlbytes == 0);
        -: 2917:            }
        -: 2918:        }
        -: 2919:
    56600: 2920:        int unused = ch->size - ch->used;
        -: 2921:        /* first check if we have leftovers in the conn_read buffer */
    56600: 2922:        if (c->rbytes > 0) {
    18252: 2923:            total = 0;
    18252: 2924:            int tocopy = c->rbytes > c->rlbytes ? c->rlbytes : c->rbytes;
    18252: 2925:            tocopy = tocopy > unused ? unused : tocopy;
    18252: 2926:            if (c->ritem != c->rcurr) {
    18252: 2927:                memmove(ch->data + ch->used, c->rcurr, tocopy);
        -: 2928:            }
    18252: 2929:            total += tocopy;
    18252: 2930:            c->rlbytes -= tocopy;
    18252: 2931:            c->rcurr += tocopy;
    18252: 2932:            c->rbytes -= tocopy;
    18252: 2933:            ch->used += tocopy;
    18252: 2934:            if (c->rlbytes == 0) {
        -: 2935:                break;
        -: 2936:            }
        -: 2937:        } else {
        -: 2938:            /*  now try reading from the socket */
    76696: 2939:            res = c->read(c, ch->data + ch->used,
    38348: 2940:                    (unused > c->rlbytes ? c->rlbytes : unused));
    38348: 2941:            if (res > 0) {
    34270: 2942:                pthread_mutex_lock(&c->thread->stats.mutex);
    34270: 2943:                c->thread->stats.bytes_read += res;
    34270: 2944:                pthread_mutex_unlock(&c->thread->stats.mutex);
    34270: 2945:                ch->used += res;
    34270: 2946:                total += res;
    34270: 2947:                c->rlbytes -= res;
        -: 2948:            } else {
        -: 2949:                /* Reset total to the latest result so caller can handle it */
        -: 2950:                total = res;
        -: 2951:                break;
        -: 2952:            }
        -: 2953:        }
        -: 2954:    }
        -: 2955:
        -: 2956:    /* At some point I will be able to ditch the \r\n from item storage and
        -: 2957:       remove all of these kludges.
        -: 2958:       The above binprot check ensures inline space for \r\n, but if we do
        -: 2959:       exactly enough allocs there will be no additional chunk for \r\n.
        -: 2960:     */
    11522: 2961:    if (c->rlbytes == 0 && c->protocol == binary_prot && total >= 0) {
      202: 2962:        item_chunk *ch = (item_chunk *)c->ritem;
      202: 2963:        if (ch->size - ch->used < 2) {
        2: 2964:            c->ritem = (char *) do_item_alloc_chunk(ch, 2);
        2: 2965:            if (!c->ritem) {
    #####: 2966:                total = -2;
        -: 2967:            }
        -: 2968:        }
        -: 2969:    }
    11522: 2970:    return total;
        -: 2971:}
        -: 2972:
   512551: 2973:static void drive_machine(conn *c) {
   512551: 2974:    bool stop = false;
   512551: 2975:    int sfd;
   512551: 2976:    socklen_t addrlen;
   512551: 2977:    struct sockaddr_storage addr;
   512551: 2978:    int nreqs = settings.reqs_per_event;
   512551: 2979:    int res;
   512551: 2980:    const char *str;
        -: 2981:#ifdef HAVE_ACCEPT4
   512551: 2982:    static int  use_accept4 = 1;
        -: 2983:#else
        -: 2984:    static int  use_accept4 = 0;
        -: 2985:#endif
        -: 2986:
  512551*: 2987:    assert(c != NULL);
        -: 2988:
  4240370: 2989:    while (!stop) {
        -: 2990:
  3727819: 2991:        switch(c->state) {
     2173: 2992:        case conn_listening:
     2173: 2993:            addrlen = sizeof(addr);
        -: 2994:#ifdef HAVE_ACCEPT4
     2173: 2995:            if (use_accept4) {
     2173: 2996:                sfd = accept4(c->sfd, (struct sockaddr *)&addr, &addrlen, SOCK_NONBLOCK);
        -: 2997:            } else {
    #####: 2998:                sfd = accept(c->sfd, (struct sockaddr *)&addr, &addrlen);
        -: 2999:            }
        -: 3000:#else
        -: 3001:            sfd = accept(c->sfd, (struct sockaddr *)&addr, &addrlen);
        -: 3002:#endif
     2173: 3003:            if (sfd == -1) {
    #####: 3004:                if (use_accept4 && errno == ENOSYS) {
    #####: 3005:                    use_accept4 = 0;
    #####: 3006:                    continue;
        -: 3007:                }
    #####: 3008:                perror(use_accept4 ? "accept4()" : "accept()");
    #####: 3009:                if (errno == EAGAIN || errno == EWOULDBLOCK) {
        -: 3010:                    /* these are transient, so don't log anything */
        -: 3011:                    stop = true;
    #####: 3012:                } else if (errno == EMFILE) {
    #####: 3013:                    if (settings.verbose > 0)
    #####: 3014:                        fprintf(stderr, "Too many open connections\n");
    #####: 3015:                    accept_new_conns(false);
    #####: 3016:                    stop = true;
        -: 3017:                } else {
    #####: 3018:                    perror("accept()");
    #####: 3019:                    stop = true;
        -: 3020:                }
        -: 3021:                break;
        -: 3022:            }
     2173: 3023:            if (!use_accept4) {
    #####: 3024:                if (fcntl(sfd, F_SETFL, fcntl(sfd, F_GETFL) | O_NONBLOCK) < 0) {
    #####: 3025:                    perror("setting O_NONBLOCK");
    #####: 3026:                    close(sfd);
    #####: 3027:                    break;
        -: 3028:                }
        -: 3029:            }
        -: 3030:
     2173: 3031:            bool reject;
     2173: 3032:            if (settings.maxconns_fast) {
     2164: 3033:                reject = sfd >= settings.maxconns - 1;
     2164: 3034:                if (reject) {
       35: 3035:                    STATS_LOCK();
       35: 3036:                    stats.rejected_conns++;
       35: 3037:                    STATS_UNLOCK();
        -: 3038:                }
        -: 3039:            } else {
        -: 3040:                reject = false;
        -: 3041:            }
        -: 3042:
     2164: 3043:            if (reject) {
       35: 3044:                str = "ERROR Too many open connections\r\n";
       35: 3045:                res = write(sfd, str, strlen(str));
       35: 3046:                close(sfd);
        -: 3047:            } else {
     2138: 3048:                void *ssl_v = NULL;
        -: 3049:#ifdef TLS
        -: 3050:                SSL *ssl = NULL;
        -: 3051:                if (c->ssl_enabled) {
        -: 3052:                    assert(IS_TCP(c->transport) && settings.ssl_enabled);
        -: 3053:
        -: 3054:                    if (settings.ssl_ctx == NULL) {
        -: 3055:                        if (settings.verbose) {
        -: 3056:                            fprintf(stderr, "SSL context is not initialized\n");
        -: 3057:                        }
        -: 3058:                        close(sfd);
        -: 3059:                        break;
        -: 3060:                    }
        -: 3061:                    SSL_LOCK();
        -: 3062:                    ssl = SSL_new(settings.ssl_ctx);
        -: 3063:                    SSL_UNLOCK();
        -: 3064:                    if (ssl == NULL) {
        -: 3065:                        if (settings.verbose) {
        -: 3066:                            fprintf(stderr, "Failed to created the SSL object\n");
        -: 3067:                        }
        -: 3068:                        close(sfd);
        -: 3069:                        break;
        -: 3070:                    }
        -: 3071:                    SSL_set_fd(ssl, sfd);
        -: 3072:                    int ret = SSL_accept(ssl);
        -: 3073:                    if (ret <= 0) {
        -: 3074:                        int err = SSL_get_error(ssl, ret);
        -: 3075:                        if (err == SSL_ERROR_SYSCALL || err == SSL_ERROR_SSL) {
        -: 3076:                            if (settings.verbose) {
        -: 3077:                                fprintf(stderr, "SSL connection failed with error code : %d : %s\n", err, strerror(errno));
        -: 3078:                            }
        -: 3079:                            SSL_free(ssl);
        -: 3080:                            close(sfd);
        -: 3081:                            STATS_LOCK();
        -: 3082:                            stats.ssl_handshake_errors++;
        -: 3083:                            STATS_UNLOCK();
        -: 3084:                            break;
        -: 3085:                        }
        -: 3086:                    }
        -: 3087:                }
        -: 3088:                ssl_v = (void*) ssl;
        -: 3089:#endif
        -: 3090:
     2138: 3091:                dispatch_conn_new(sfd, conn_new_cmd, EV_READ | EV_PERSIST,
        -: 3092:                                     READ_BUFFER_CACHED, c->transport, ssl_v, c->tag, c->protocol);
        -: 3093:            }
        -: 3094:
        -: 3095:            stop = true;
        -: 3096:            break;
        -: 3097:
   478192: 3098:        case conn_waiting:
   478192: 3099:            rbuf_release(c);
   478192: 3100:            if (!update_event(c, EV_READ | EV_PERSIST)) {
    #####: 3101:                if (settings.verbose > 0)
    #####: 3102:                    fprintf(stderr, "Couldn't update event\n");
    #####: 3103:                conn_set_state(c, conn_closing);
    #####: 3104:                break;
        -: 3105:            }
        -: 3106:
   478192: 3107:            conn_set_state(c, conn_read);
   478192: 3108:            stop = true;
   478192: 3109:            break;
        -: 3110:
   478188: 3111:        case conn_read:
   478188: 3112:            if (!IS_UDP(c->transport)) {
        -: 3113:                // Assign a read buffer if necessary.
   478158: 3114:                if (!rbuf_alloc(c)) {
        -: 3115:                    // TODO: Some way to allow for temporary failures.
    #####: 3116:                    conn_set_state(c, conn_closing);
    #####: 3117:                    break;
        -: 3118:                }
   478158: 3119:                res = try_read_network(c);
        -: 3120:            } else {
        -: 3121:                // UDP connections always have a static buffer.
       30: 3122:                res = try_read_udp(c);
        -: 3123:            }
        -: 3124:
   478188: 3125:            switch (res) {
       12: 3126:            case READ_NO_DATA_RECEIVED:
       12: 3127:                conn_set_state(c, conn_waiting);
       12: 3128:                break;
   476077: 3129:            case READ_DATA_RECEIVED:
   476077: 3130:                conn_set_state(c, conn_parse_cmd);
   476077: 3131:                break;
     2099: 3132:            case READ_ERROR:
     2099: 3133:                conn_set_state(c, conn_closing);
     2099: 3134:                break;
        -: 3135:            case READ_MEMORY_ERROR: /* Failed to allocate more memory */
        -: 3136:                /* State already set by try_read_network */
        -: 3137:                break;
        -: 3138:            }
        -: 3139:            break;
        -: 3140:
   608107: 3141:        case conn_parse_cmd:
   608107: 3142:            c->noreply = false;
   608107: 3143:            if (c->try_read_command(c) == 0) {
        -: 3144:                /* we need more data! */
     7391: 3145:                if (c->resp_head) {
        -: 3146:                    // Buffered responses waiting, flush in the meantime.
     3689: 3147:                    conn_set_state(c, conn_mwrite);
        -: 3148:                } else {
     3702: 3149:                    conn_set_state(c, conn_waiting);
        -: 3150:                }
        -: 3151:            }
        -: 3152:
        -: 3153:            break;
        -: 3154:
   973217: 3155:        case conn_new_cmd:
        -: 3156:            /* Only process nreqs at a time to avoid starving other
        -: 3157:               connections */
        -: 3158:
   973217: 3159:            --nreqs;
   973217: 3160:            if (nreqs >= 0) {
   964834: 3161:                reset_cmd_handler(c);
     8383: 3162:            } else if (c->resp_head) {
        -: 3163:                // flush response pipe on yield.
     4105: 3164:                conn_set_state(c, conn_mwrite);
        -: 3165:            } else {
     4278: 3166:                pthread_mutex_lock(&c->thread->stats.mutex);
     4278: 3167:                c->thread->stats.conn_yields++;
     4278: 3168:                pthread_mutex_unlock(&c->thread->stats.mutex);
     4278: 3169:                if (c->rbytes > 0) {
        -: 3170:                    /* We have already read in data into the input buffer,
        -: 3171:                       so libevent will most likely not signal read events
        -: 3172:                       on the socket (unless more data is available. As a
        -: 3173:                       hack we should just put in a request to write data,
        -: 3174:                       because that should be possible ;-)
        -: 3175:                    */
     4238: 3176:                    if (!update_event(c, EV_WRITE | EV_PERSIST)) {
    #####: 3177:                        if (settings.verbose > 0)
    #####: 3178:                            fprintf(stderr, "Couldn't update event\n");
    #####: 3179:                        conn_set_state(c, conn_closing);
    #####: 3180:                        break;
        -: 3181:                    }
        -: 3182:                }
        -: 3183:                stop = true;
        -: 3184:            }
        -: 3185:            break;
        -: 3186:
   700482: 3187:        case conn_nread:
   700482: 3188:            if (c->rlbytes == 0) {
   327255: 3189:                complete_nread(c);
   327255: 3190:                break;
        -: 3191:            }
        -: 3192:
        -: 3193:            /* Check if rbytes < 0, to prevent crash */
   373227: 3194:            if (c->rlbytes < 0) {
    #####: 3195:                if (settings.verbose) {
    #####: 3196:                    fprintf(stderr, "Invalid rlbytes to read: len %d\n", c->rlbytes);
        -: 3197:                }
    #####: 3198:                conn_set_state(c, conn_closing);
    #####: 3199:                break;
        -: 3200:            }
        -: 3201:
   373227: 3202:            if (c->item_malloced || ((((item *)c->item)->it_flags & ITEM_CHUNKED) == 0) ) {
        -: 3203:                /* first check if we have leftovers in the conn_read buffer */
   361705: 3204:                if (c->rbytes > 0) {
   319723: 3205:                    int tocopy = c->rbytes > c->rlbytes ? c->rlbytes : c->rbytes;
   319723: 3206:                    memmove(c->ritem, c->rcurr, tocopy);
   319723: 3207:                    c->ritem += tocopy;
   319723: 3208:                    c->rlbytes -= tocopy;
   319723: 3209:                    c->rcurr += tocopy;
   319723: 3210:                    c->rbytes -= tocopy;
   319723: 3211:                    if (c->rlbytes == 0) {
        -: 3212:                        break;
        -: 3213:                    }
        -: 3214:                }
        -: 3215:
        -: 3216:                /*  now try reading from the socket */
    78377: 3217:                res = c->read(c, c->ritem, c->rlbytes);
    78377: 3218:                if (res > 0) {
    57443: 3219:                    pthread_mutex_lock(&c->thread->stats.mutex);
    57443: 3220:                    c->thread->stats.bytes_read += res;
    57443: 3221:                    pthread_mutex_unlock(&c->thread->stats.mutex);
    57443: 3222:                    if (c->rcurr == c->ritem) {
    #####: 3223:                        c->rcurr += res;
        -: 3224:                    }
    57443: 3225:                    c->ritem += res;
    57443: 3226:                    c->rlbytes -= res;
    57443: 3227:                    break;
        -: 3228:                }
        -: 3229:            } else {
    11522: 3230:                res = read_into_chunked_item(c);
    11522: 3231:                if (res > 0)
        -: 3232:                    break;
        -: 3233:            }
        -: 3234:
    25012: 3235:            if (res == 0) { /* end of stream */
        2: 3236:                c->close_reason = NORMAL_CLOSE;
        2: 3237:                conn_set_state(c, conn_closing);
        2: 3238:                break;
        -: 3239:            }
        -: 3240:
    25010: 3241:            if (res == -1 && (errno == EAGAIN || errno == EWOULDBLOCK)) {
    25010: 3242:                if (!update_event(c, EV_READ | EV_PERSIST)) {
    #####: 3243:                    if (settings.verbose > 0)
    #####: 3244:                        fprintf(stderr, "Couldn't update event\n");
    #####: 3245:                    conn_set_state(c, conn_closing);
    #####: 3246:                    break;
        -: 3247:                }
        -: 3248:                stop = true;
        -: 3249:                break;
        -: 3250:            }
        -: 3251:
        -: 3252:            /* Memory allocation failure */
    #####: 3253:            if (res == -2) {
    #####: 3254:                out_of_memory(c, "SERVER_ERROR Out of memory during read");
    #####: 3255:                c->sbytes = c->rlbytes;
    #####: 3256:                conn_set_state(c, conn_swallow);
        -: 3257:                // Ensure this flag gets cleared. It gets killed on conn_new()
        -: 3258:                // so any conn_closing is fine, calling complete_nread is
        -: 3259:                // fine. This swallow semms to be the only other case.
    #####: 3260:                c->set_stale = false;
    #####: 3261:                c->mset_res = false;
    #####: 3262:                break;
        -: 3263:            }
        -: 3264:            /* otherwise we have a real error, on which we close the connection */
    #####: 3265:            if (settings.verbose > 0) {
    #####: 3266:                fprintf(stderr, "Failed to read, and not due to blocking:\n"
        -: 3267:                        "errno: %d %s \n"
        -: 3268:                        "rcurr=%p ritem=%p rbuf=%p rlbytes=%d rsize=%d\n",
    #####: 3269:                        errno, strerror(errno),
    #####: 3270:                        (void *)c->rcurr, (void *)c->ritem, (void *)c->rbuf,
        -: 3271:                        (int)c->rlbytes, (int)c->rsize);
        -: 3272:            }
    #####: 3273:            conn_set_state(c, conn_closing);
    #####: 3274:            break;
        -: 3275:
      598: 3276:        case conn_swallow:
        -: 3277:            /* we are reading sbytes and throwing them away */
      598: 3278:            if (c->sbytes <= 0) {
       12: 3279:                conn_set_state(c, conn_new_cmd);
       12: 3280:                break;
        -: 3281:            }
        -: 3282:
        -: 3283:            /* first check if we have leftovers in the conn_read buffer */
      586: 3284:            if (c->rbytes > 0) {
       11: 3285:                int tocopy = c->rbytes > c->sbytes ? c->sbytes : c->rbytes;
       11: 3286:                c->sbytes -= tocopy;
       11: 3287:                c->rcurr += tocopy;
       11: 3288:                c->rbytes -= tocopy;
       11: 3289:                break;
        -: 3290:            }
        -: 3291:
        -: 3292:            /*  now try reading from the socket */
      575: 3293:            res = c->read(c, c->rbuf, c->rsize > c->sbytes ? c->sbytes : c->rsize);
      575: 3294:            if (res > 0) {
      503: 3295:                pthread_mutex_lock(&c->thread->stats.mutex);
      503: 3296:                c->thread->stats.bytes_read += res;
      503: 3297:                pthread_mutex_unlock(&c->thread->stats.mutex);
      503: 3298:                c->sbytes -= res;
      503: 3299:                break;
        -: 3300:            }
       72: 3301:            if (res == 0) { /* end of stream */
    #####: 3302:                c->close_reason = NORMAL_CLOSE;
    #####: 3303:                conn_set_state(c, conn_closing);
    #####: 3304:                break;
        -: 3305:            }
       72: 3306:            if (res == -1 && (errno == EAGAIN || errno == EWOULDBLOCK)) {
       72: 3307:                if (!update_event(c, EV_READ | EV_PERSIST)) {
    #####: 3308:                    if (settings.verbose > 0)
    #####: 3309:                        fprintf(stderr, "Couldn't update event\n");
    #####: 3310:                    conn_set_state(c, conn_closing);
    #####: 3311:                    break;
        -: 3312:                }
        -: 3313:                stop = true;
        -: 3314:                break;
        -: 3315:            }
        -: 3316:            /* otherwise we have a real error, on which we close the connection */
    #####: 3317:            if (settings.verbose > 0)
    #####: 3318:                fprintf(stderr, "Failed to read, and not due to blocking\n");
    #####: 3319:            conn_set_state(c, conn_closing);
    #####: 3320:            break;
        -: 3321:
   484330: 3322:        case conn_write:
        -: 3323:        case conn_mwrite:
        -: 3324:            /* have side IO's that must process before transmit() can run.
        -: 3325:             * remove the connection from the worker thread and dispatch the
        -: 3326:             * IO queue
        -: 3327:             */
  484330*: 3328:            assert(c->io_queues_submitted == 0);
        -: 3329:
   518784: 3330:            for (io_queue_t *q = c->io_queues; q->type != IO_QUEUE_NONE; q++) {
    34454: 3331:                if (q->stack_ctx != NULL) {
      384: 3332:                    io_queue_cb_t *qcb = thread_io_queue_get(c->thread, q->type);
      384: 3333:                    qcb->submit_cb(q);
      384: 3334:                    c->io_queues_submitted++;
        -: 3335:                }
        -: 3336:            }
   484330: 3337:            if (c->io_queues_submitted != 0) {
      384: 3338:                conn_set_state(c, conn_io_queue);
      384: 3339:                event_del(&c->event);
        -: 3340:
      384: 3341:                stop = true;
      384: 3342:                break;
        -: 3343:            }
        -: 3344:
   483946: 3345:            switch (!IS_UDP(c->transport) ? transmit(c) : transmit_udp(c)) {
   483305: 3346:            case TRANSMIT_COMPLETE:
   483305: 3347:                if (c->state == conn_mwrite) {
        -: 3348:                    // Free up IO wraps and any half-uploaded items.
   483305: 3349:                    conn_release_items(c);
   483305: 3350:                    conn_set_state(c, conn_new_cmd);
   483305: 3351:                    if (c->close_after_write) {
        8: 3352:                        conn_set_state(c, conn_closing);
        -: 3353:                    }
        -: 3354:                } else {
    #####: 3355:                    if (settings.verbose > 0)
    #####: 3356:                        fprintf(stderr, "Unexpected state %d\n", c->state);
    #####: 3357:                    conn_set_state(c, conn_closing);
        -: 3358:                }
        -: 3359:                break;
        -: 3360:
        -: 3361:            case TRANSMIT_INCOMPLETE:
        -: 3362:            case TRANSMIT_HARD_ERROR:
        -: 3363:                break;                   /* Continue in state machine. */
        -: 3364:
      294: 3365:            case TRANSMIT_SOFT_ERROR:
      294: 3366:                stop = true;
      294: 3367:                break;
        -: 3368:            }
        -: 3369:            break;
        -: 3370:
     2135: 3371:        case conn_closing:
     2135: 3372:            if (IS_UDP(c->transport))
    #####: 3373:                conn_cleanup(c);
        -: 3374:            else
     2135: 3375:                conn_close(c);
        -: 3376:            stop = true;
        -: 3377:            break;
        -: 3378:
    #####: 3379:        case conn_closed:
        -: 3380:            /* This only happens if dormando is an idiot. */
    #####: 3381:            abort();
        -: 3382:            break;
        -: 3383:
        -: 3384:        case conn_watch:
        -: 3385:            /* We handed off our connection to the logger thread. */
  4240370: 3386:            stop = true;
        -: 3387:            break;
      384: 3388:        case conn_io_queue:
        -: 3389:            /* Complete our queued IO's from within the worker thread. */
      384: 3390:            conn_set_state(c, conn_mwrite);
      384: 3391:            break;
        -: 3392:        case conn_max_state:
    #####: 3393:            assert(false);
        -: 3394:            break;
        -: 3395:        }
        -: 3396:    }
        -: 3397:
   512551: 3398:    return;
        -: 3399:}
        -: 3400:
   512155: 3401:void event_handler(const evutil_socket_t fd, const short which, void *arg) {
   512155: 3402:    conn *c;
        -: 3403:
   512155: 3404:    c = (conn *)arg;
  512155*: 3405:    assert(c != NULL);
        -: 3406:
   512155: 3407:    c->which = which;
        -: 3408:
        -: 3409:    /* sanity */
   512155: 3410:    if (fd != c->sfd) {
    #####: 3411:        if (settings.verbose > 0)
    #####: 3412:            fprintf(stderr, "Catastrophic: event fd doesn't match conn fd!\n");
    #####: 3413:        conn_close(c);
    #####: 3414:        return;
        -: 3415:    }
        -: 3416:
   512155: 3417:    drive_machine(c);
        -: 3418:
        -: 3419:    /* wait for next event */
   512155: 3420:    return;
        -: 3421:}
        -: 3422:
       48: 3423:static int new_socket(struct addrinfo *ai) {
       48: 3424:    int sfd;
       48: 3425:    int flags;
        -: 3426:
       48: 3427:    if ((sfd = socket(ai->ai_family, ai->ai_socktype, ai->ai_protocol)) == -1) {
        -: 3428:        return -1;
        -: 3429:    }
        -: 3430:
       96: 3431:    if ((flags = fcntl(sfd, F_GETFL, 0)) < 0 ||
       48: 3432:        fcntl(sfd, F_SETFL, flags | O_NONBLOCK) < 0) {
    #####: 3433:        perror("setting O_NONBLOCK");
    #####: 3434:        close(sfd);
    #####: 3435:        return -1;
        -: 3436:    }
        -: 3437:    return sfd;
        -: 3438:}
        -: 3439:
        -: 3440:
        -: 3441:/*
        -: 3442: * Sets a socket's send buffer size to the maximum allowed by the system.
        -: 3443: */
       18: 3444:static void maximize_sndbuf(const int sfd) {
       18: 3445:    socklen_t intsize = sizeof(int);
       18: 3446:    int last_good = 0;
       18: 3447:    int min, max, avg;
       18: 3448:    int old_size;
        -: 3449:
        -: 3450:    /* Start with the default size. */
        -: 3451:#ifdef _WIN32
        -: 3452:    if (getsockopt((SOCKET)sfd, SOL_SOCKET, SO_SNDBUF, (char *)&old_size, &intsize) != 0) {
        -: 3453:#else
       18: 3454:    if (getsockopt(sfd, SOL_SOCKET, SO_SNDBUF, &old_size, &intsize) != 0) {
        -: 3455:#endif /* #ifdef _WIN32 */
    #####: 3456:        if (settings.verbose > 0)
    #####: 3457:            perror("getsockopt(SO_SNDBUF)");
    #####: 3458:        return;
        -: 3459:    }
        -: 3460:
        -: 3461:    /* Binary-search for the real maximum. */
       18: 3462:    min = old_size;
       18: 3463:    max = MAX_SENDBUF_SIZE;
        -: 3464:
      522: 3465:    while (min <= max) {
      504: 3466:        avg = ((unsigned int)(min + max)) / 2;
      504: 3467:        if (setsockopt(sfd, SOL_SOCKET, SO_SNDBUF, (void *)&avg, intsize) == 0) {
      504: 3468:            last_good = avg;
      504: 3469:            min = avg + 1;
        -: 3470:        } else {
    #####: 3471:            max = avg - 1;
        -: 3472:        }
        -: 3473:    }
        -: 3474:
       18: 3475:    if (settings.verbose > 1)
      18*: 3476:        fprintf(stderr, "<%d send buffer was %d, now %d\n", sfd, old_size, last_good);
        -: 3477:}
        -: 3478:
        -: 3479:/**
        -: 3480: * Create a socket and bind it to a specific port number
        -: 3481: * @param interface the interface to bind to
        -: 3482: * @param port the port number to bind to
        -: 3483: * @param transport the transport protocol (TCP / UDP)
        -: 3484: * @param portnumber_file A filepointer to write the port numbers to
        -: 3485: *        when they are successfully added to the list of ports we
        -: 3486: *        listen on.
        -: 3487: */
       31: 3488:static int server_socket(const char *interface,
        -: 3489:                         int port,
        -: 3490:                         enum network_transport transport,
        -: 3491:                         FILE *portnumber_file, bool ssl_enabled,
        -: 3492:                         uint64_t conntag,
        -: 3493:                         enum protocol bproto) {
       31: 3494:    int sfd;
       31: 3495:    struct linger ling = {0, 0};
       31: 3496:    struct addrinfo *ai;
       31: 3497:    struct addrinfo *next;
       31: 3498:    struct addrinfo hints = { .ai_flags = AI_PASSIVE,
        -: 3499:                              .ai_family = AF_UNSPEC };
       31: 3500:    char port_buf[NI_MAXSERV];
       31: 3501:    int error;
       31: 3502:    int success = 0;
       31: 3503:    int flags =1;
        -: 3504:
       31: 3505:    hints.ai_socktype = IS_UDP(transport) ? SOCK_DGRAM : SOCK_STREAM;
        -: 3506:
       31: 3507:    if (port == -1) {
        9: 3508:        port = 0;
        -: 3509:    }
       31: 3510:    snprintf(port_buf, sizeof(port_buf), "%d", port);
       31: 3511:    error= getaddrinfo(interface, port_buf, &hints, &ai);
       31: 3512:    if (error != 0) {
        1: 3513:        if (error != EAI_SYSTEM)
        1: 3514:          fprintf(stderr, "getaddrinfo(): %s\n", gai_strerror(error));
        -: 3515:        else
    #####: 3516:          perror("getaddrinfo()");
        1: 3517:        return 1;
        -: 3518:    }
        -: 3519:
       78: 3520:    for (next= ai; next; next= next->ai_next) {
       48: 3521:        conn *listen_conn_add;
      48*: 3522:        if ((sfd = new_socket(next)) == -1) {
        -: 3523:            /* getaddrinfo can return "junk" addresses,
        -: 3524:             * we make sure at least one works before erroring.
        -: 3525:             */
    #####: 3526:            if (errno == EMFILE) {
        -: 3527:                /* ...unless we're out of fds */
    #####: 3528:                perror("server_socket");
    #####: 3529:                exit(EX_OSERR);
        -: 3530:            }
    #####: 3531:            continue;
        -: 3532:        }
        -: 3533:
       48: 3534:        if (settings.num_napi_ids) {
    #####: 3535:            socklen_t len = sizeof(socklen_t);
    #####: 3536:            int napi_id;
    #####: 3537:            error = getsockopt(sfd, SOL_SOCKET, SO_INCOMING_NAPI_ID, &napi_id, &len);
    #####: 3538:            if (error != 0) {
    #####: 3539:                fprintf(stderr, "-N <num_napi_ids> option not supported\n");
    #####: 3540:                exit(EXIT_FAILURE);
        -: 3541:            }
        -: 3542:        }
        -: 3543:
        -: 3544:#ifdef IPV6_V6ONLY
       48: 3545:        if (next->ai_family == AF_INET6) {
       18: 3546:            error = setsockopt(sfd, IPPROTO_IPV6, IPV6_V6ONLY, (char *) &flags, sizeof(flags));
      18*: 3547:            if (error != 0) {
    #####: 3548:                perror("setsockopt");
    #####: 3549:                close(sfd);
    #####: 3550:                continue;
        -: 3551:            }
        -: 3552:        }
        -: 3553:#endif
        -: 3554:#ifdef SOCK_COOKIE_ID
       48: 3555:        if (settings.sock_cookie_id != 0) {
    #####: 3556:            error = setsockopt(sfd, SOL_SOCKET, SOCK_COOKIE_ID, (void *)&settings.sock_cookie_id, sizeof(uint32_t));
    #####: 3557:            if (error != 0)
    #####: 3558:                perror("setsockopt");
        -: 3559:        }
        -: 3560:#endif
        -: 3561:
       48: 3562:        setsockopt(sfd, SOL_SOCKET, SO_REUSEADDR, (void *)&flags, sizeof(flags));
       48: 3563:        if (IS_UDP(transport)) {
       18: 3564:            maximize_sndbuf(sfd);
        -: 3565:        } else {
       30: 3566:            error = setsockopt(sfd, SOL_SOCKET, SO_KEEPALIVE, (void *)&flags, sizeof(flags));
       30: 3567:            if (error != 0)
    #####: 3568:                perror("setsockopt");
        -: 3569:
       30: 3570:            error = setsockopt(sfd, SOL_SOCKET, SO_LINGER, (void *)&ling, sizeof(ling));
       30: 3571:            if (error != 0)
    #####: 3572:                perror("setsockopt");
        -: 3573:
       30: 3574:            error = setsockopt(sfd, IPPROTO_TCP, TCP_NODELAY, (void *)&flags, sizeof(flags));
       30: 3575:            if (error != 0)
    #####: 3576:                perror("setsockopt");
        -: 3577:        }
        -: 3578:
      48*: 3579:        if (bind(sfd, next->ai_addr, next->ai_addrlen) == -1) {
    #####: 3580:            if (errno != EADDRINUSE) {
    #####: 3581:                perror("bind()");
    #####: 3582:                close(sfd);
    #####: 3583:                freeaddrinfo(ai);
    #####: 3584:                return 1;
        -: 3585:            }
    #####: 3586:            close(sfd);
    #####: 3587:            continue;
        -: 3588:        } else {
       48: 3589:            success++;
       48: 3590:            if (!IS_UDP(transport) && listen(sfd, settings.backlog) == -1) {
    #####: 3591:                perror("listen()");
    #####: 3592:                close(sfd);
    #####: 3593:                freeaddrinfo(ai);
    #####: 3594:                return 1;
        -: 3595:            }
       48: 3596:            if (portnumber_file != NULL &&
       36: 3597:                (next->ai_addr->sa_family == AF_INET ||
        -: 3598:                 next->ai_addr->sa_family == AF_INET6)) {
       36: 3599:                union {
        -: 3600:                    struct sockaddr_in in;
        -: 3601:                    struct sockaddr_in6 in6;
        -: 3602:                } my_sockaddr;
       36: 3603:                socklen_t len = sizeof(my_sockaddr);
       36: 3604:                if (getsockname(sfd, (struct sockaddr*)&my_sockaddr, &len)==0) {
       36: 3605:                    if (next->ai_addr->sa_family == AF_INET) {
       54: 3606:                        fprintf(portnumber_file, "%s INET: %u\n",
        -: 3607:                                IS_UDP(transport) ? "UDP" : "TCP",
       18: 3608:                                ntohs(my_sockaddr.in.sin_port));
        -: 3609:                    } else {
       36: 3610:                        fprintf(portnumber_file, "%s INET6: %u\n",
        -: 3611:                                IS_UDP(transport) ? "UDP" : "TCP",
       18: 3612:                                ntohs(my_sockaddr.in6.sin6_port));
        -: 3613:                    }
        -: 3614:                }
        -: 3615:            }
        -: 3616:        }
        -: 3617:
       48: 3618:        if (IS_UDP(transport)) {
        -: 3619:            int c;
        -: 3620:
       90: 3621:            for (c = 0; c < settings.num_threads_per_udp; c++) {
        -: 3622:                /* Allocate one UDP file descriptor per worker thread;
        -: 3623:                 * this allows "stats conns" to separately list multiple
        -: 3624:                 * parallel UDP requests in progress.
        -: 3625:                 *
        -: 3626:                 * The dispatch code round-robins new connection requests
        -: 3627:                 * among threads, so this is guaranteed to assign one
        -: 3628:                 * FD to each thread.
        -: 3629:                 */
       72: 3630:                int per_thread_fd;
       72: 3631:                if (c == 0) {
        -: 3632:                    per_thread_fd = sfd;
        -: 3633:                } else {
       54: 3634:                    per_thread_fd = dup(sfd);
       54: 3635:                    if (per_thread_fd < 0) {
    #####: 3636:                        perror("Failed to duplicate file descriptor");
    #####: 3637:                        exit(EXIT_FAILURE);
        -: 3638:                    }
        -: 3639:                }
       72: 3640:                dispatch_conn_new(per_thread_fd, conn_read,
        -: 3641:                                  EV_READ | EV_PERSIST,
        -: 3642:                                  UDP_READ_BUFFER_SIZE, transport, NULL, conntag, bproto);
        -: 3643:            }
        -: 3644:        } else {
       30: 3645:            if (!(listen_conn_add = conn_new(sfd, conn_listening,
        -: 3646:                                             EV_READ | EV_PERSIST, 1,
        -: 3647:                                             transport, main_base, NULL, conntag, bproto))) {
    #####: 3648:                fprintf(stderr, "failed to create listening connection\n");
    #####: 3649:                exit(EXIT_FAILURE);
        -: 3650:            }
        -: 3651:#ifdef TLS
        -: 3652:            listen_conn_add->ssl_enabled = ssl_enabled;
        -: 3653:#else
      30*: 3654:            assert(ssl_enabled == false);
        -: 3655:#endif
       30: 3656:            listen_conn_add->next = listen_conn;
       30: 3657:            listen_conn = listen_conn_add;
        -: 3658:        }
        -: 3659:    }
        -: 3660:
       30: 3661:    freeaddrinfo(ai);
        -: 3662:
        -: 3663:    /* Return zero iff we detected no errors in starting up connections */
       30: 3664:    return success == 0;
        -: 3665:}
        -: 3666:
       31: 3667:static int server_sockets(int port, enum network_transport transport,
        -: 3668:                          FILE *portnumber_file) {
       31: 3669:    bool ssl_enabled = false;
        -: 3670:
        -: 3671:#ifdef TLS
        -: 3672:    const char *notls = "notls";
        -: 3673:    ssl_enabled = settings.ssl_enabled;
        -: 3674:#endif
        -: 3675:
       31: 3676:    if (settings.inter == NULL) {
       18: 3677:        return server_socket(settings.inter, port, transport, portnumber_file, ssl_enabled, 0, settings.binding_protocol);
        -: 3678:    } else {
        -: 3679:        // tokenize them and bind to each one of them..
       13: 3680:        char *b;
       13: 3681:        int ret = 0;
       13: 3682:        char *list = strdup(settings.inter);
        -: 3683:
       13: 3684:        if (list == NULL) {
    #####: 3685:            fprintf(stderr, "Failed to allocate memory for parsing server interface string\n");
    #####: 3686:            return 1;
        -: 3687:        }
        -: 3688:        // If we encounter any failure, preserve the first errno for the caller.
       13: 3689:        int errno_save = 0;
       13: 3690:        for (char *p = strtok_r(list, ";,", &b);
       26: 3691:            p != NULL;
       13: 3692:            p = strtok_r(NULL, ";,", &b)) {
       13: 3693:            uint64_t conntag = 0;
       13: 3694:            int the_port = port;
        -: 3695:#ifdef TLS
        -: 3696:            ssl_enabled = settings.ssl_enabled;
        -: 3697:            // "notls" option is valid only when memcached is run with SSL enabled.
        -: 3698:            if (strncmp(p, notls, strlen(notls)) == 0) {
        -: 3699:                if (!settings.ssl_enabled) {
        -: 3700:                    fprintf(stderr, "'notls' option is valid only when SSL is enabled\n");
        -: 3701:                    free(list);
        -: 3702:                    return 1;
        -: 3703:                }
        -: 3704:                ssl_enabled = false;
        -: 3705:                p += strlen(notls) + 1;
        -: 3706:            }
        -: 3707:#endif
        -: 3708:
        -: 3709:            // Allow forcing the protocol of this listener.
       13: 3710:            const char *protostr = "proto";
       13: 3711:            enum protocol bproto = settings.binding_protocol;
       13: 3712:            if (strncmp(p, protostr, strlen(protostr)) == 0) {
    #####: 3713:                p += strlen(protostr);
    #####: 3714:                if (*p == '[') {
    #####: 3715:                    char *e = strchr(p, ']');
    #####: 3716:                    if (e == NULL) {
    #####: 3717:                        fprintf(stderr, "Invalid protocol spec: \"%s\"\n", p);
    #####: 3718:                        free(list);
    #####: 3719:                        return 1;
        -: 3720:                    }
    #####: 3721:                    char *st = ++p; // skip '[';
    #####: 3722:                    *e = '\0';
    #####: 3723:                    size_t len = e - st;
    #####: 3724:                    p = ++e; // skip ']'
    #####: 3725:                    p++; // skip an assumed ':'
        -: 3726:
    #####: 3727:                    if (strncmp(st, "ascii", len) == 0) {
        -: 3728:                        bproto = ascii_prot;
    #####: 3729:                    } else if (strncmp(st, "binary", len) == 0) {
        -: 3730:                        bproto = binary_prot;
    #####: 3731:                    } else if (strncmp(st, "negotiating", len) == 0) {
        -: 3732:                        bproto = negotiating_prot;
    #####: 3733:                    } else if (strncmp(st, "proxy", len) == 0) {
        -: 3734:#ifdef PROXY
        -: 3735:                        if (settings.proxy_enabled) {
        -: 3736:                            bproto = proxy_prot;
        -: 3737:                        } else {
        -: 3738:                            fprintf(stderr, "Proxy must be enabled to use: \"%s\"\n", list);
        -: 3739:                            free(list);
        -: 3740:                            return 1;
        -: 3741:                        }
        -: 3742:#else
    #####: 3743:                        fprintf(stderr, "Server not built with proxy: \"%s\"\n", list);
    #####: 3744:                        free(list);
    #####: 3745:                        return 1;
        -: 3746:#endif
        -: 3747:                    }
        -: 3748:                }
        -: 3749:            }
        -: 3750:
       13: 3751:            const char *tagstr = "tag";
       13: 3752:            if (strncmp(p, tagstr, strlen(tagstr)) == 0) {
    #####: 3753:                p += strlen(tagstr);
    #####: 3754:                if (*p == '[') {
    #####: 3755:                    char *e = strchr(p, ']');
    #####: 3756:                    if (e == NULL) {
    #####: 3757:                        fprintf(stderr, "Invalid tag in socket config: \"%s\"\n", p);
    #####: 3758:                        free(list);
    #####: 3759:                        return 1;
        -: 3760:                    }
    #####: 3761:                    char *st = ++p; // skip '['
    #####: 3762:                    *e = '\0';
    #####: 3763:                    size_t len = e - st;
    #####: 3764:                    p = ++e; // skip ']'
    #####: 3765:                    p++; // skip an assumed ':'
        -: 3766:
        -: 3767:                    // validate the tag and copy it in.
    #####: 3768:                    if (len > 8 || len < 1) {
    #####: 3769:                        fprintf(stderr, "Listener tags must be between 1 and 8 characters: \"%s\"\n", st);
    #####: 3770:                        free(list);
    #####: 3771:                        return 1;
        -: 3772:                    }
        -: 3773:
        -: 3774:                    // C programmers love turning string comparisons into
        -: 3775:                    // integer comparisons.
    #####: 3776:                    memcpy(&conntag, st, len);
        -: 3777:                }
        -: 3778:            }
        -: 3779:
       13: 3780:            char *h = NULL;
       13: 3781:            if (*p == '[') {
        -: 3782:                // expecting it to be an IPv6 address enclosed in []
        -: 3783:                // i.e. RFC3986 style recommended by RFC5952
    #####: 3784:                char *e = strchr(p, ']');
    #####: 3785:                if (e == NULL) {
    #####: 3786:                    fprintf(stderr, "Invalid IPV6 address: \"%s\"", p);
    #####: 3787:                    free(list);
    #####: 3788:                    return 1;
        -: 3789:                }
    #####: 3790:                h = ++p; // skip the opening '['
    #####: 3791:                *e = '\0';
    #####: 3792:                p = ++e; // skip the closing ']'
        -: 3793:            }
        -: 3794:
       13: 3795:            char *s = strchr(p, ':');
       13: 3796:            if (s != NULL) {
        -: 3797:                // If no more semicolons - attempt to treat as port number.
        -: 3798:                // Otherwise the only valid option is an unenclosed IPv6 without port, until
        -: 3799:                // of course there was an RFC3986 IPv6 address previously specified -
        -: 3800:                // in such a case there is no good option, will just send it to fail as port number.
    #####: 3801:                if (strchr(s + 1, ':') == NULL || h != NULL) {
    #####: 3802:                    *s = '\0';
    #####: 3803:                    ++s;
    #####: 3804:                    if (!safe_strtol(s, &the_port)) {
    #####: 3805:                        fprintf(stderr, "Invalid port number: \"%s\"\n", s);
    #####: 3806:                        free(list);
    #####: 3807:                        return 1;
        -: 3808:                    }
        -: 3809:                }
        -: 3810:            }
        -: 3811:
       13: 3812:            if (h != NULL)
    #####: 3813:                p = h;
        -: 3814:
       13: 3815:            if (strcmp(p, "*") == 0) {
    #####: 3816:                p = NULL;
        -: 3817:            }
       13: 3818:            ret |= server_socket(p, the_port, transport, portnumber_file, ssl_enabled, conntag, bproto);
       13: 3819:            if (ret != 0 && errno_save == 0) errno_save = errno;
        -: 3820:        }
       13: 3821:        free(list);
       13: 3822:        errno = errno_save;
       13: 3823:        return ret;
        -: 3824:    }
        -: 3825:}
        -: 3826:
        -: 3827:#ifndef DISABLE_UNIX_SOCKET
       96: 3828:static int new_socket_unix(void) {
       96: 3829:    int sfd;
       96: 3830:    int flags;
        -: 3831:
       96: 3832:    if ((sfd = socket(AF_UNIX, SOCK_STREAM, 0)) == -1) {
    #####: 3833:        perror("socket()");
    #####: 3834:        return -1;
        -: 3835:    }
        -: 3836:
      192: 3837:    if ((flags = fcntl(sfd, F_GETFL, 0)) < 0 ||
       96: 3838:        fcntl(sfd, F_SETFL, flags | O_NONBLOCK) < 0) {
    #####: 3839:        perror("setting O_NONBLOCK");
    #####: 3840:        close(sfd);
    #####: 3841:        return -1;
        -: 3842:    }
        -: 3843:    return sfd;
        -: 3844:}
        -: 3845:
       96: 3846:static int server_socket_unix(const char *path, int access_mask) {
       96: 3847:    int sfd;
       96: 3848:    struct linger ling = {0, 0};
       96: 3849:    struct sockaddr_un addr;
       96: 3850:    struct stat tstat;
       96: 3851:    int flags =1;
       96: 3852:    int old_umask;
        -: 3853:
       96: 3854:    if (!path) {
        -: 3855:        return 1;
        -: 3856:    }
        -: 3857:
       96: 3858:    if ((sfd = new_socket_unix()) == -1) {
        -: 3859:        return 1;
        -: 3860:    }
        -: 3861:
        -: 3862:    /*
        -: 3863:     * Clean up a previous socket file if we left it around
        -: 3864:     */
       96: 3865:    if (lstat(path, &tstat) == 0) {
    #####: 3866:        if (S_ISSOCK(tstat.st_mode))
    #####: 3867:            unlink(path);
        -: 3868:    }
        -: 3869:
       96: 3870:    setsockopt(sfd, SOL_SOCKET, SO_REUSEADDR, (void *)&flags, sizeof(flags));
       96: 3871:    setsockopt(sfd, SOL_SOCKET, SO_KEEPALIVE, (void *)&flags, sizeof(flags));
       96: 3872:    setsockopt(sfd, SOL_SOCKET, SO_LINGER, (void *)&ling, sizeof(ling));
        -: 3873:
        -: 3874:    /*
        -: 3875:     * the memset call clears nonstandard fields in some implementations
        -: 3876:     * that otherwise mess things up.
        -: 3877:     */
       96: 3878:    memset(&addr, 0, sizeof(addr));
        -: 3879:
       96: 3880:    addr.sun_family = AF_UNIX;
       96: 3881:    strncpy(addr.sun_path, path, sizeof(addr.sun_path) - 1);
      96*: 3882:    assert(strcmp(addr.sun_path, path) == 0);
       96: 3883:    old_umask = umask( ~(access_mask&0777));
       96: 3884:    if (bind(sfd, (struct sockaddr *)&addr, sizeof(addr)) == -1) {
    #####: 3885:        perror("bind()");
    #####: 3886:        close(sfd);
    #####: 3887:        umask(old_umask);
    #####: 3888:        return 1;
        -: 3889:    }
       96: 3890:    umask(old_umask);
       96: 3891:    if (listen(sfd, settings.backlog) == -1) {
    #####: 3892:        perror("listen()");
    #####: 3893:        close(sfd);
    #####: 3894:        return 1;
        -: 3895:    }
       96: 3896:    if (!(listen_conn = conn_new(sfd, conn_listening,
        -: 3897:                                 EV_READ | EV_PERSIST, 1,
        -: 3898:                                 local_transport, main_base, NULL, 0, settings.binding_protocol))) {
    #####: 3899:        fprintf(stderr, "failed to create listening connection\n");
    #####: 3900:        exit(EXIT_FAILURE);
        -: 3901:    }
        -: 3902:
        -: 3903:    return 0;
        -: 3904:}
        -: 3905:#else
        -: 3906:#define server_socket_unix(path, access_mask)   -1
        -: 3907:#endif /* #ifndef DISABLE_UNIX_SOCKET */
        -: 3908:
        -: 3909:/*
        -: 3910: * We keep the current time of day in a global variable that's updated by a
        -: 3911: * timer event. This saves us a bunch of time() system calls (we really only
        -: 3912: * need to get the time once a second, whereas there can be tens of thousands
        -: 3913: * of requests a second) and allows us to use server-start-relative timestamps
        -: 3914: * rather than absolute UNIX timestamps, a space savings on systems where
        -: 3915: * sizeof(time_t) > sizeof(unsigned int).
        -: 3916: */
        -: 3917:volatile rel_time_t current_time;
        -: 3918:static struct event clockevent;
        -: 3919:#ifdef MEMCACHED_DEBUG
        -: 3920:volatile bool is_paused;
        -: 3921:volatile int64_t delta;
        -: 3922:#endif
        -: 3923:#if defined(HAVE_CLOCK_GETTIME) && defined(CLOCK_MONOTONIC)
        -: 3924:static bool monotonic = false;
        -: 3925:static int64_t monotonic_start;
        -: 3926:#endif
        -: 3927:
        -: 3928:/* libevent uses a monotonic clock when available for event scheduling. Aside
        -: 3929: * from jitter, simply ticking our internal timer here is accurate enough.
        -: 3930: * Note that users who are setting explicit dates for expiration times *must*
        -: 3931: * ensure their clocks are correct before starting memcached. */
      484: 3932:static void clock_handler(const evutil_socket_t fd, const short which, void *arg) {
      484: 3933:    struct timeval t = {.tv_sec = 1, .tv_usec = 0};
      484: 3934:    static bool initialized = false;
        -: 3935:
      484: 3936:    if (initialized) {
        -: 3937:        /* only delete the event if it's actually there. */
      368: 3938:        evtimer_del(&clockevent);
        -: 3939:    } else {
      116: 3940:        initialized = true;
        -: 3941:    }
        -: 3942:
        -: 3943:    // While we're here, check for hash table expansion.
        -: 3944:    // This function should be quick to avoid delaying the timer.
      484: 3945:    assoc_start_expand(stats_state.curr_items);
        -: 3946:    // also, if HUP'ed we need to do some maintenance.
        -: 3947:    // for now that's just the authfile reload.
      484: 3948:    if (settings.sig_hup) {
    #####: 3949:        settings.sig_hup = false;
        -: 3950:
    #####: 3951:        authfile_load(settings.auth_file);
        -: 3952:#ifdef PROXY
        -: 3953:        if (settings.proxy_ctx) {
        -: 3954:            proxy_start_reload(settings.proxy_ctx);
        -: 3955:        }
        -: 3956:#endif
        -: 3957:    }
        -: 3958:
      484: 3959:    evtimer_set(&clockevent, clock_handler, 0);
      484: 3960:    event_base_set(main_base, &clockevent);
      484: 3961:    evtimer_add(&clockevent, &t);
        -: 3962:
        -: 3963:#ifdef MEMCACHED_DEBUG
      968: 3964:    if (is_paused) return;
        -: 3965:#endif
        -: 3966:
        -: 3967:#if defined(HAVE_CLOCK_GETTIME) && defined(CLOCK_MONOTONIC)
      484: 3968:    if (monotonic) {
      484: 3969:        struct timespec ts;
      484: 3970:        if (clock_gettime(CLOCK_MONOTONIC, &ts) == -1)
        -: 3971:            return;
        -: 3972:#ifdef MEMCACHED_DEBUG
      484: 3973:        current_time = (rel_time_t) (ts.tv_sec - monotonic_start + delta);
        -: 3974:#else
        -: 3975:        current_time = (rel_time_t) (ts.tv_sec - monotonic_start);
        -: 3976:#endif
      484: 3977:        return;
        -: 3978:    }
        -: 3979:#endif
        -: 3980:    {
    #####: 3981:        struct timeval tv;
    #####: 3982:        gettimeofday(&tv, NULL);
        -: 3983:#ifdef MEMCACHED_DEBUG
    #####: 3984:        current_time = (rel_time_t) (tv.tv_sec - process_started + delta);
        -: 3985:#else
        -: 3986:        current_time = (rel_time_t) (tv.tv_sec - process_started);
        -: 3987:#endif
        -: 3988:    }
        -: 3989:}
        -: 3990:
      576: 3991:static const char* flag_enabled_disabled(bool flag) {
      576: 3992:    return (flag ? "enabled" : "disabled");
        -: 3993:}
        -: 3994:
     2141: 3995:static void verify_default(const char* param, bool condition) {
     2141: 3996:    if (!condition) {
    #####: 3997:        printf("Default value of [%s] has changed."
        -: 3998:            " Modify the help text and default value check.\n", param);
    #####: 3999:        exit(EXIT_FAILURE);
        -: 4000:    }
     2141: 4001:}
        -: 4002:
      288: 4003:static void usage(void) {
      288: 4004:    printf(PACKAGE " " VERSION "\n");
      288: 4005:    printf("-p, --port=<num>          TCP port to listen on (default: %d)\n"
        -: 4006:           "-U, --udp-port=<num>      UDP port to listen on (default: %d, off)\n",
        -: 4007:           settings.port, settings.udpport);
        -: 4008:#ifndef DISABLE_UNIX_SOCKET
      288: 4009:    printf("-s, --unix-socket=<file>  UNIX socket to listen on (disables network support)\n");
      288: 4010:    printf("-a, --unix-mask=<mask>    access mask for UNIX socket, in octal (default: %o)\n",
        -: 4011:            settings.access);
        -: 4012:#endif /* #ifndef DISABLE_UNIX_SOCKET */
      288: 4013:    printf("-A, --enable-shutdown     enable ascii \"shutdown\" command\n");
      288: 4014:    printf("-l, --listen=<addr>       interface to listen on (default: INADDR_ANY)\n");
        -: 4015:#ifdef TLS
        -: 4016:    printf("                          if TLS/SSL is enabled, 'notls' prefix can be used to\n"
        -: 4017:           "                          disable for specific listeners (-l notls:<ip>:<port>) \n");
        -: 4018:#endif
      576: 4019:    printf("-d, --daemon              run as a daemon\n"
        -: 4020:           "-r, --enable-coredumps    maximize core file limit\n"
        -: 4021:           "-u, --user=<user>         assume identity of <username> (only when run as root)\n"
        -: 4022:           "-m, --memory-limit=<num>  item memory in megabytes (default: %lu)\n"
        -: 4023:           "-M, --disable-evictions   return error on memory exhausted instead of evicting\n"
        -: 4024:           "-c, --conn-limit=<num>    max simultaneous connections (default: %d)\n"
        -: 4025:           "-k, --lock-memory         lock down all paged memory\n"
        -: 4026:           "-v, --verbose             verbose (print errors/warnings while in event loop)\n"
        -: 4027:           "-vv                       very verbose (also print client commands/responses)\n"
        -: 4028:           "-vvv                      extremely verbose (internal state transitions)\n"
        -: 4029:           "-h, --help                print this help and exit\n"
        -: 4030:           "-i, --license             print memcached and libevent license\n"
        -: 4031:           "-V, --version             print version and exit\n"
        -: 4032:           "-P, --pidfile=<file>      save PID in <file>, only used with -d option\n"
        -: 4033:           "-f, --slab-growth-factor=<num> chunk size growth factor (default: %2.2f)\n"
        -: 4034:           "-n, --slab-min-size=<bytes> min space used for key+value+flags (default: %d)\n",
      288: 4035:           (unsigned long) settings.maxbytes / (1 << 20),
        -: 4036:           settings.maxconns, settings.factor, settings.chunk_size);
      288: 4037:    verify_default("udp-port",settings.udpport == 0);
      288: 4038:    printf("-L, --enable-largepages  try to use large memory pages (if available)\n");
      576: 4039:    printf("-D <char>     Use <char> as the delimiter between key prefixes and IDs.\n"
        -: 4040:           "              This is used for per-prefix stats reporting. The default is\n"
        -: 4041:           "              \"%c\" (colon). If this option is specified, stats collection\n"
        -: 4042:           "              is turned on automatically; if not, then it may be turned on\n"
        -: 4043:           "              by sending the \"stats detail on\" command to the server.\n",
      288: 4044:           settings.prefix_delimiter);
      288: 4045:    printf("-t, --threads=<num>       number of threads to use (default: %d)\n", settings.num_threads);
      288: 4046:    printf("-R, --max-reqs-per-event  maximum number of requests per event, limits the\n"
        -: 4047:           "                          requests processed per connection to prevent \n"
        -: 4048:           "                          starvation (default: %d)\n", settings.reqs_per_event);
      288: 4049:    printf("-C, --disable-cas         disable use of CAS\n");
      288: 4050:    printf("-b, --listen-backlog=<num> set the backlog queue limit (default: %d)\n", settings.backlog);
      576: 4051:    printf("-B, --protocol=<name>     protocol - one of ascii, binary, or auto (default: %s)\n",
        -: 4052:           prot_text(settings.binding_protocol));
      576: 4053:    printf("-I, --max-item-size=<num> adjusts max item size\n"
        -: 4054:           "                          (default: %dm, min: %dk, max: %dm)\n",
      288: 4055:           settings.item_size_max/ (1 << 20), ITEM_SIZE_MAX_LOWER_LIMIT / (1 << 10),  ITEM_SIZE_MAX_UPPER_LIMIT / (1 << 20));
        -: 4056:#ifdef ENABLE_SASL
        -: 4057:    printf("-S, --enable-sasl         turn on Sasl authentication\n");
        -: 4058:#endif
      288: 4059:    printf("-F, --disable-flush-all   disable flush_all command\n");
      288: 4060:    printf("-X, --disable-dumping     disable stats cachedump and lru_crawler metadump\n");
      288: 4061:    printf("-W  --disable-watch       disable watch commands (live logging)\n");
      288: 4062:    printf("-Y, --auth-file=<file>    (EXPERIMENTAL) enable ASCII protocol authentication. format:\n"
        -: 4063:           "                          user:pass\\nuser2:pass2\\n\n");
      288: 4064:    printf("-e, --memory-file=<file>  (EXPERIMENTAL) mmap a file for item memory.\n"
        -: 4065:           "                          use only in ram disks or persistent memory mounts!\n"
        -: 4066:           "                          enables restartable cache (stop with SIGUSR1)\n");
        -: 4067:#ifdef TLS
        -: 4068:    printf("-Z, --enable-ssl          enable TLS/SSL\n");
        -: 4069:#endif
      288: 4070:    printf("-o, --extended            comma separated list of extended options\n"
        -: 4071:           "                          most options have a 'no_' prefix to disable\n"
        -: 4072:           "   - maxconns_fast:       immediately close new connections after limit (default: %s)\n"
        -: 4073:           "   - hashpower:           an integer multiplier for how large the hash\n"
        -: 4074:           "                          table should be. normally grows at runtime. (default starts at: %d)\n"
        -: 4075:           "                          set based on \"STAT hash_power_level\"\n"
        -: 4076:           "   - tail_repair_time:    time in seconds for how long to wait before\n"
        -: 4077:           "                          forcefully killing LRU tail item.\n"
        -: 4078:           "                          disabled by default; very dangerous option.\n"
        -: 4079:           "   - hash_algorithm:      the hash table algorithm\n"
        -: 4080:           "                          default is murmur3 hash. options: jenkins, murmur3, xxh3\n"
        -: 4081:           "   - no_lru_crawler:      disable LRU Crawler background thread.\n"
        -: 4082:           "   - lru_crawler_sleep:   microseconds to sleep between items\n"
        -: 4083:           "                          default is %d.\n"
        -: 4084:           "   - lru_crawler_tocrawl: max items to crawl per slab per run\n"
        -: 4085:           "                          default is %u (unlimited)\n",
      288: 4086:           flag_enabled_disabled(settings.maxconns_fast), settings.hashpower_init,
        -: 4087:           settings.lru_crawler_sleep, settings.lru_crawler_tocrawl);
      288: 4088:    printf("   - read_buf_mem_limit:  limit in megabytes for connection read/response buffers.\n"
        -: 4089:           "                          do not adjust unless you have high (20k+) conn. limits.\n"
        -: 4090:           "                          0 means unlimited (default: %u)\n",
        -: 4091:           settings.read_buf_mem_limit);
      288: 4092:    verify_default("read_buf_mem_limit", settings.read_buf_mem_limit == 0);
      288: 4093:    printf("   - no_lru_maintainer:   disable new LRU system + background thread.\n"
        -: 4094:           "   - hot_lru_pct:         pct of slab memory to reserve for hot lru.\n"
        -: 4095:           "                          (requires lru_maintainer, default pct: %d)\n"
        -: 4096:           "   - warm_lru_pct:        pct of slab memory to reserve for warm lru.\n"
        -: 4097:           "                          (requires lru_maintainer, default pct: %d)\n"
        -: 4098:           "   - hot_max_factor:      items idle > cold lru age * drop from hot lru. (default: %.2f)\n"
        -: 4099:           "   - warm_max_factor:     items idle > cold lru age * this drop from warm. (default: %.2f)\n"
        -: 4100:           "   - temporary_ttl:       TTL's below get separate LRU, can't be evicted.\n"
        -: 4101:           "                          (requires lru_maintainer, default: %d)\n"
        -: 4102:           "   - idle_timeout:        timeout for idle connections. (default: %d, no timeout)\n",
        -: 4103:           settings.hot_lru_pct, settings.warm_lru_pct, settings.hot_max_factor, settings.warm_max_factor,
        -: 4104:           settings.temporary_ttl, settings.idle_timeout);
      576: 4105:    printf("   - slab_chunk_max:      (EXPERIMENTAL) maximum slab size in kilobytes. use extreme care. (default: %d)\n"
        -: 4106:           "   - watcher_logbuf_size: size in kilobytes of per-watcher write buffer. (default: %u)\n"
        -: 4107:           "   - worker_logbuf_size:  size in kilobytes of per-worker-thread buffer\n"
        -: 4108:           "                          read by background thread, then written to watchers. (default: %u)\n"
        -: 4109:           "   - track_sizes:         enable dynamic reports for 'stats sizes' command.\n"
        -: 4110:           "   - no_hashexpand:       disables hash table expansion (dangerous)\n"
        -: 4111:           "   - modern:              enables options which will be default in future.\n"
        -: 4112:           "                          currently: nothing\n"
        -: 4113:           "   - no_modern:           uses defaults of previous major version (1.4.x)\n",
      288: 4114:           settings.slab_chunk_size_max / (1 << 10), settings.logger_watcher_buf_size / (1 << 10),
      288: 4115:           settings.logger_buf_size / (1 << 10));
      288: 4116:    verify_default("tail_repair_time", settings.tail_repair_time == TAIL_REPAIR_TIME_DEFAULT);
      288: 4117:    verify_default("lru_crawler_tocrawl", settings.lru_crawler_tocrawl == 0);
      288: 4118:    verify_default("idle_timeout", settings.idle_timeout == 0);
        -: 4119:#ifdef HAVE_DROP_PRIVILEGES
        -: 4120:    printf("   - drop_privileges:     enable dropping extra syscall privileges\n"
        -: 4121:           "   - no_drop_privileges:  disable drop_privileges in case it causes issues with\n"
        -: 4122:           "                          some customisation.\n"
        -: 4123:           "                          (default is no_drop_privileges)\n");
        -: 4124:    verify_default("drop_privileges", !settings.drop_privileges);
        -: 4125:#ifdef MEMCACHED_DEBUG
        -: 4126:    printf("   - relaxed_privileges:  running tests requires extra privileges. (default: %s)\n",
        -: 4127:           flag_enabled_disabled(settings.relaxed_privileges));
        -: 4128:#endif
        -: 4129:#endif
        -: 4130:#ifdef SOCK_COOKIE_ID
      288: 4131:    printf("   - sock_cookie_id:      attributes an ID to a socket for ip filtering/firewalls \n");
        -: 4132:#endif
        -: 4133:#ifdef EXTSTORE
      288: 4134:    printf("\n   - External storage (ext_*) related options (see: https://memcached.org/extstore)\n");
      864: 4135:    printf("   - ext_path:            file to write to for external storage.\n"
        -: 4136:           "                          ie: ext_path=/mnt/d1/extstore:1G\n"
        -: 4137:           "   - ext_page_size:       size in megabytes of storage pages. (default: %u)\n"
        -: 4138:           "   - ext_wbuf_size:       size in megabytes of page write buffers. (default: %u)\n"
        -: 4139:           "   - ext_threads:         number of IO threads to run. (default: %u)\n"
        -: 4140:           "   - ext_item_size:       store items larger than this (bytes, default %u)\n"
        -: 4141:           "   - ext_item_age:        store items idle at least this long (seconds, default: no age limit)\n"
        -: 4142:           "   - ext_low_ttl:         consider TTLs lower than this specially (default: %u)\n"
        -: 4143:           "   - ext_drop_unread:     don't re-write unread values during compaction (default: %s)\n"
        -: 4144:           "   - ext_recache_rate:    recache an item every N accesses (default: %u)\n"
        -: 4145:           "   - ext_compact_under:   compact when fewer than this many free pages\n"
        -: 4146:           "                          (default: 1/4th of the assigned storage)\n"
        -: 4147:           "   - ext_drop_under:      drop COLD items when fewer than this many free pages\n"
        -: 4148:           "                          (default: 1/4th of the assigned storage)\n"
        -: 4149:           "   - ext_max_frag:        max page fragmentation to tolerate (default: %.2f)\n"
        -: 4150:           "   - ext_max_sleep:       max sleep time of background threads in us (default: %u)\n"
        -: 4151:           "   - slab_automove_freeratio: ratio of memory to hold free as buffer.\n"
        -: 4152:           "                          (see doc/storage.txt for more info, default: %.3f)\n",
      288: 4153:           settings.ext_page_size / (1 << 20), settings.ext_wbuf_size / (1 << 20), settings.ext_io_threadcount,
        -: 4154:           settings.ext_item_size, settings.ext_low_ttl,
      288: 4155:           flag_enabled_disabled(settings.ext_drop_unread), settings.ext_recache_rate,
        -: 4156:           settings.ext_max_frag, settings.ext_max_sleep, settings.slab_automove_freeratio);
      288: 4157:    verify_default("ext_item_age", settings.ext_item_age == UINT_MAX);
        -: 4158:#endif
        -: 4159:#ifdef PROXY
        -: 4160:    printf("   - proxy_config:        path to lua config file.\n");
        -: 4161:#endif
        -: 4162:#ifdef TLS
        -: 4163:    printf("   - ssl_chain_cert:      certificate chain file in PEM format\n"
        -: 4164:           "   - ssl_key:             private key, if not part of the -ssl_chain_cert\n"
        -: 4165:           "   - ssl_keyformat:       private key format (PEM, DER or ENGINE) (default: PEM)\n");
        -: 4166:    printf("   - ssl_verify_mode:     peer certificate verification mode, default is 0(None).\n"
        -: 4167:           "                          valid values are 0(None), 1(Request), 2(Require)\n"
        -: 4168:           "                          or 3(Once)\n");
        -: 4169:    printf("   - ssl_ciphers:         specify cipher list to be used\n"
        -: 4170:           "   - ssl_ca_cert:         PEM format file of acceptable client CA's\n"
        -: 4171:           "   - ssl_wbuf_size:       size in kilobytes of per-connection SSL output buffer\n"
        -: 4172:           "                          (default: %u)\n", settings.ssl_wbuf_size / (1 << 10));
        -: 4173:    printf("   - ssl_session_cache:   enable server-side SSL session cache, to support session\n"
        -: 4174:           "                          resumption\n"
        -: 4175:           "   - ssl_kernel_tls:      enable kernel TLS offload\n"
        -: 4176:           "   - ssl_min_version:     minimum protocol version to accept (default: %s)\n",
        -: 4177:           ssl_proto_text(settings.ssl_min_version));
        -: 4178:#if defined(TLS1_3_VERSION)
        -: 4179:    printf("                          valid values are 0(%s), 1(%s), 2(%s), or 3(%s).\n",
        -: 4180:           ssl_proto_text(TLS1_VERSION), ssl_proto_text(TLS1_1_VERSION),
        -: 4181:           ssl_proto_text(TLS1_2_VERSION), ssl_proto_text(TLS1_3_VERSION));
        -: 4182:#else
        -: 4183:    printf("                          valid values are 0(%s), 1(%s), or 2(%s).\n",
        -: 4184:           ssl_proto_text(TLS1_VERSION), ssl_proto_text(TLS1_1_VERSION),
        -: 4185:           ssl_proto_text(TLS1_2_VERSION));
        -: 4186:#endif
        -: 4187:    verify_default("ssl_keyformat", settings.ssl_keyformat == SSL_FILETYPE_PEM);
        -: 4188:    verify_default("ssl_verify_mode", settings.ssl_verify_mode == SSL_VERIFY_NONE);
        -: 4189:    verify_default("ssl_min_version", settings.ssl_min_version == TLS1_2_VERSION);
        -: 4190:#endif
      288: 4191:    printf("-N, --napi_ids            number of napi ids. see doc/napi_ids.txt for more details\n");
      288: 4192:    return;
        -: 4193:}
        -: 4194:
    #####: 4195:static void usage_license(void) {
    #####: 4196:    printf(PACKAGE " " VERSION "\n\n");
    #####: 4197:    printf(
        -: 4198:    "Copyright (c) 2003, Danga Interactive, Inc. <http://www.danga.com/>\n"
        -: 4199:    "All rights reserved.\n"
        -: 4200:    "\n"
        -: 4201:    "Redistribution and use in source and binary forms, with or without\n"
        -: 4202:    "modification, are permitted provided that the following conditions are\n"
        -: 4203:    "met:\n"
        -: 4204:    "\n"
        -: 4205:    "    * Redistributions of source code must retain the above copyright\n"
        -: 4206:    "notice, this list of conditions and the following disclaimer.\n"
        -: 4207:    "\n"
        -: 4208:    "    * Redistributions in binary form must reproduce the above\n"
        -: 4209:    "copyright notice, this list of conditions and the following disclaimer\n"
        -: 4210:    "in the documentation and/or other materials provided with the\n"
        -: 4211:    "distribution.\n"
        -: 4212:    "\n"
        -: 4213:    "    * Neither the name of the Danga Interactive nor the names of its\n"
        -: 4214:    "contributors may be used to endorse or promote products derived from\n"
        -: 4215:    "this software without specific prior written permission.\n"
        -: 4216:    "\n"
        -: 4217:    "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n"
        -: 4218:    "\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n"
        -: 4219:    "LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n"
        -: 4220:    "A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n"
        -: 4221:    "OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n"
        -: 4222:    "SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n"
        -: 4223:    "LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n"
        -: 4224:    "DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n"
        -: 4225:    "THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n"
        -: 4226:    "(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n"
        -: 4227:    "OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        -: 4228:    );
        -: 4229:
    #####: 4230:    return;
        -: 4231:}
        -: 4232:
        1: 4233:static void save_pid(const char *pid_file) {
        1: 4234:    FILE *fp;
        1: 4235:    if (access(pid_file, F_OK) == 0) {
    #####: 4236:        if ((fp = fopen(pid_file, "r")) != NULL) {
    #####: 4237:            char buffer[1024];
    #####: 4238:            if (fgets(buffer, sizeof(buffer), fp) != NULL) {
    #####: 4239:                unsigned int pid;
    #####: 4240:                if (safe_strtoul(buffer, &pid) && kill((pid_t)pid, 0) == 0) {
    #####: 4241:                    fprintf(stderr, "WARNING: The pid file contained the following (running) pid: %u\n", pid);
        -: 4242:                }
        -: 4243:            }
    #####: 4244:            fclose(fp);
        -: 4245:        }
        -: 4246:    }
        -: 4247:
        -: 4248:    /* Create the pid file first with a temporary name, then
        -: 4249:     * atomically move the file to the real name to avoid a race with
        -: 4250:     * another process opening the file to read the pid, but finding
        -: 4251:     * it empty.
        -: 4252:     */
        1: 4253:    char tmp_pid_file[1024];
        1: 4254:    snprintf(tmp_pid_file, sizeof(tmp_pid_file), "%s.tmp", pid_file);
        -: 4255:
        1: 4256:    if ((fp = fopen(tmp_pid_file, "w")) == NULL) {
    #####: 4257:        vperror("Could not open the pid file %s for writing", tmp_pid_file);
    #####: 4258:        return;
        -: 4259:    }
        -: 4260:
        1: 4261:    fprintf(fp,"%ld\n", (long)getpid());
        1: 4262:    if (fclose(fp) == -1) {
    #####: 4263:        vperror("Could not close the pid file %s", tmp_pid_file);
        -: 4264:    }
        -: 4265:
        1: 4266:    if (rename(tmp_pid_file, pid_file) != 0) {
    #####: 4267:        vperror("Could not rename the pid file from %s to %s",
        -: 4268:                tmp_pid_file, pid_file);
        -: 4269:    }
        -: 4270:}
        -: 4271:
        1: 4272:static void remove_pidfile(const char *pid_file) {
        1: 4273:  if (pid_file == NULL)
        -: 4274:      return;
        -: 4275:
        1: 4276:  if (unlink(pid_file) != 0) {
        1: 4277:      vperror("Could not remove the pid file %s", pid_file);
        -: 4278:  }
        -: 4279:
        -: 4280:}
        -: 4281:
      118: 4282:static void sig_handler(const int sig) {
      118: 4283:    stop_main_loop = EXIT_NORMALLY;
      118: 4284:}
        -: 4285:
    #####: 4286:static void sighup_handler(const int sig) {
    #####: 4287:    settings.sig_hup = true;
    #####: 4288:}
        -: 4289:
        2: 4290:static void sig_usrhandler(const int sig) {
        2: 4291:    stop_main_loop = GRACE_STOP;
        2: 4292:}
        -: 4293:
        -: 4294:/*
        -: 4295: * On systems that supports multiple page sizes we may reduce the
        -: 4296: * number of TLB-misses by using the biggest available page size
        -: 4297: */
    #####: 4298:static int enable_large_pages(void) {
        -: 4299:#if defined(HAVE_GETPAGESIZES) && defined(HAVE_MEMCNTL)
        -: 4300:    int ret = -1;
        -: 4301:    size_t sizes[32];
        -: 4302:    int avail = getpagesizes(sizes, 32);
        -: 4303:    if (avail != -1) {
        -: 4304:        size_t max = sizes[0];
        -: 4305:        struct memcntl_mha arg = {0};
        -: 4306:        int ii;
        -: 4307:
        -: 4308:        for (ii = 1; ii < avail; ++ii) {
        -: 4309:            if (max < sizes[ii]) {
        -: 4310:                max = sizes[ii];
        -: 4311:            }
        -: 4312:        }
        -: 4313:
        -: 4314:        arg.mha_flags   = 0;
        -: 4315:        arg.mha_pagesize = max;
        -: 4316:        arg.mha_cmd = MHA_MAPSIZE_BSSBRK;
        -: 4317:
        -: 4318:        if (memcntl(0, 0, MC_HAT_ADVISE, (caddr_t)&arg, 0, 0) == -1) {
        -: 4319:            fprintf(stderr, "Failed to set large pages: %s\n",
        -: 4320:                    strerror(errno));
        -: 4321:            fprintf(stderr, "Will use default page size\n");
        -: 4322:        } else {
        -: 4323:            ret = 0;
        -: 4324:        }
        -: 4325:    } else {
        -: 4326:        fprintf(stderr, "Failed to get supported pagesizes: %s\n",
        -: 4327:                strerror(errno));
        -: 4328:        fprintf(stderr, "Will use default page size\n");
        -: 4329:    }
        -: 4330:
        -: 4331:    return ret;
        -: 4332:#elif defined(__linux__) && defined(MADV_HUGEPAGE)
        -: 4333:    /* check if transparent hugepages is compiled into the kernel */
        -: 4334:    /* RH based systems possibly uses a different path */
    #####: 4335:    static const char *mm_thp_paths[] = {
        -: 4336:        "/sys/kernel/mm/transparent_hugepage/enabled",
        -: 4337:        "/sys/kernel/mm/redhat_transparent_hugepage/enabled",
        -: 4338:        NULL
        -: 4339:    };
        -: 4340:
    #####: 4341:    char thpb[128] = {0};
    #####: 4342:    int pfd = -1;
    #####: 4343:    for (const char **p = mm_thp_paths; *p; p++) {
    #####: 4344:        if ((pfd = open(*p, O_RDONLY)) != -1)
        -: 4345:            break;
        -: 4346:    }
        -: 4347:
    #####: 4348:    if (pfd == -1) {
    #####: 4349:        fprintf(stderr, "Transparent huge pages support not detected.\n");
    #####: 4350:        fprintf(stderr, "Will use default page size.\n");
    #####: 4351:        return -1;
        -: 4352:    }
    #####: 4353:    ssize_t rd = read(pfd, thpb, sizeof(thpb));
    #####: 4354:    close(pfd);
    #####: 4355:    if (rd <= 0) {
    #####: 4356:        fprintf(stderr, "Transparent huge pages could not read the configuration.\n");
    #####: 4357:        fprintf(stderr, "Will use default page size.\n");
    #####: 4358:        return -1;
        -: 4359:    }
    #####: 4360:    thpb[rd] = 0;
    #####: 4361:    if (strstr(thpb, "[never]")) {
    #####: 4362:        fprintf(stderr, "Transparent huge pages support disabled.\n");
    #####: 4363:        fprintf(stderr, "Will use default page size.\n");
    #####: 4364:        return -1;
        -: 4365:    }
        -: 4366:    return 0;
        -: 4367:#elif defined(__FreeBSD__)
        -: 4368:    int spages;
        -: 4369:    size_t spagesl = sizeof(spages);
        -: 4370:
        -: 4371:    if (sysctlbyname("vm.pmap.pg_ps_enabled", &spages,
        -: 4372:    &spagesl, NULL, 0) != 0) {
        -: 4373:        fprintf(stderr, "Could not evaluate the presence of superpages features.");
        -: 4374:        return -1;
        -: 4375:    }
        -: 4376:    if (spages != 1) {
        -: 4377:        fprintf(stderr, "Superpages support not detected.\n");
        -: 4378:        fprintf(stderr, "Will use default page size.\n");
        -: 4379:        return -1;
        -: 4380:    }
        -: 4381:    return 0;
        -: 4382:#else
        -: 4383:    return -1;
        -: 4384:#endif
        -: 4385:}
        -: 4386:
        -: 4387:/**
        -: 4388: * Do basic sanity check of the runtime environment
        -: 4389: * @return true if no errors found, false if we can't use this env
        -: 4390: */
      413: 4391:static bool sanitycheck(void) {
        -: 4392:    /* One of our biggest problems is old and bogus libevents */
      413: 4393:    const char *ever = event_get_version();
      413: 4394:    if (ever != NULL) {
      413: 4395:        if (strncmp(ever, "1.", 2) == 0) {
    #####: 4396:            fprintf(stderr, "You are using libevent %s.\nPlease upgrade to 2.x"
        -: 4397:                        " or newer\n", event_get_version());
    #####: 4398:            return false;
        -: 4399:        }
        -: 4400:    }
        -: 4401:
        -: 4402:    return true;
        -: 4403:}
        -: 4404:
    #####: 4405:static bool _parse_slab_sizes(char *s, uint32_t *slab_sizes) {
    #####: 4406:    char *b = NULL;
    #####: 4407:    uint32_t size = 0;
    #####: 4408:    int i = 0;
    #####: 4409:    uint32_t last_size = 0;
        -: 4410:
    #####: 4411:    if (strlen(s) < 1)
        -: 4412:        return false;
        -: 4413:
    #####: 4414:    for (char *p = strtok_r(s, "-", &b);
    #####: 4415:         p != NULL;
    #####: 4416:         p = strtok_r(NULL, "-", &b)) {
    #####: 4417:        if (!safe_strtoul(p, &size) || size < settings.chunk_size
    #####: 4418:             || size > settings.slab_chunk_size_max) {
    #####: 4419:            fprintf(stderr, "slab size %u is out of valid range\n", size);
    #####: 4420:            return false;
        -: 4421:        }
    #####: 4422:        if (last_size >= size) {
    #####: 4423:            fprintf(stderr, "slab size %u cannot be lower than or equal to a previous class size\n", size);
    #####: 4424:            return false;
        -: 4425:        }
    #####: 4426:        if (size <= last_size + CHUNK_ALIGN_BYTES) {
    #####: 4427:            fprintf(stderr, "slab size %u must be at least %d bytes larger than previous class\n",
        -: 4428:                    size, CHUNK_ALIGN_BYTES);
    #####: 4429:            return false;
        -: 4430:        }
    #####: 4431:        slab_sizes[i++] = size;
    #####: 4432:        last_size = size;
    #####: 4433:        if (i >= MAX_NUMBER_OF_SLAB_CLASSES-1) {
    #####: 4434:            fprintf(stderr, "too many slab classes specified\n");
    #####: 4435:            return false;
        -: 4436:        }
        -: 4437:    }
        -: 4438:
    #####: 4439:    slab_sizes[i] = 0;
    #####: 4440:    return true;
        -: 4441:}
        -: 4442:
        -: 4443:struct _mc_meta_data {
        -: 4444:    void *mmap_base;
        -: 4445:    uint64_t old_base;
        -: 4446:    char *slab_config; // string containing either factor or custom slab list.
        -: 4447:    int64_t time_delta;
        -: 4448:    uint64_t process_started;
        -: 4449:    uint32_t current_time;
        -: 4450:};
        -: 4451:
        -: 4452:// We need to remember a combination of configuration settings and global
        -: 4453:// state for restart viability and resumption of internal services.
        -: 4454:// Compared to the number of tunables and state values, relatively little
        -: 4455:// does need to be remembered.
        -: 4456:// Time is the hardest; we have to assume the sys clock is correct and re-sync for
        -: 4457:// the lost time after restart.
        1: 4458:static int _mc_meta_save_cb(const char *tag, void *ctx, void *data) {
        1: 4459:    struct _mc_meta_data *meta = (struct _mc_meta_data *)data;
        -: 4460:
        -: 4461:    // Settings to remember.
        -: 4462:    // TODO: should get a version of version which is numeric, else
        -: 4463:    // comparisons for compat reasons are difficult.
        -: 4464:    // it may be possible to punt on this for now; since we can test for the
        -: 4465:    // absence of another key... such as the new numeric version.
        -: 4466:    //restart_set_kv(ctx, "version", "%s", VERSION);
        -: 4467:    // We hold the original factor or subopts _string_
        -: 4468:    // it can be directly compared without roundtripping through floats or
        -: 4469:    // serializing/deserializing the long options list.
        1: 4470:    restart_set_kv(ctx, "slab_config", "%s", meta->slab_config);
        1: 4471:    restart_set_kv(ctx, "maxbytes", "%llu", (unsigned long long) settings.maxbytes);
        1: 4472:    restart_set_kv(ctx, "chunk_size", "%d", settings.chunk_size);
        1: 4473:    restart_set_kv(ctx, "item_size_max", "%d", settings.item_size_max);
        1: 4474:    restart_set_kv(ctx, "slab_chunk_size_max", "%d", settings.slab_chunk_size_max);
        1: 4475:    restart_set_kv(ctx, "slab_page_size", "%d", settings.slab_page_size);
        1: 4476:    restart_set_kv(ctx, "use_cas", "%s", settings.use_cas ? "true" : "false");
        1: 4477:    restart_set_kv(ctx, "slab_reassign", "%s", settings.slab_reassign ? "true" : "false");
        -: 4478:
        -: 4479:    // Online state to remember.
        -: 4480:
        -: 4481:    // current time is tough. we need to rely on the clock being correct to
        -: 4482:    // pull the delta between stop and start times. we also need to know the
        -: 4483:    // delta between start time and now to restore monotonic clocks.
        -: 4484:    // for non-monotonic clocks (some OS?), process_started is the only
        -: 4485:    // important one.
        1: 4486:    restart_set_kv(ctx, "current_time", "%u", current_time);
        -: 4487:    // types are great until... this. some systems time_t could be big, but
        -: 4488:    // I'm assuming never negative.
        1: 4489:    restart_set_kv(ctx, "process_started", "%llu", (unsigned long long) process_started);
        -: 4490:    {
        1: 4491:        struct timeval tv;
        1: 4492:        gettimeofday(&tv, NULL);
        1: 4493:        restart_set_kv(ctx, "stop_time", "%lu", tv.tv_sec);
        -: 4494:    }
        -: 4495:
        -: 4496:    // Might as well just fetch the next CAS value to use than tightly
        -: 4497:    // coupling the internal variable into the restart system.
        1: 4498:    restart_set_kv(ctx, "current_cas", "%llu", (unsigned long long) get_cas_id());
        1: 4499:    restart_set_kv(ctx, "oldest_cas", "%llu", (unsigned long long) settings.oldest_cas);
        1: 4500:    restart_set_kv(ctx, "logger_gid", "%llu", logger_get_gid());
        1: 4501:    restart_set_kv(ctx, "hashpower", "%u", stats_state.hash_power_level);
        -: 4502:    // NOTE: oldest_live is a rel_time_t, which aliases for unsigned int.
        -: 4503:    // should future proof this with a 64bit upcast, or fetch value from a
        -: 4504:    // converter function/macro?
        1: 4505:    restart_set_kv(ctx, "oldest_live", "%u", settings.oldest_live);
        -: 4506:    // TODO: use uintptr_t etc? is it portable enough?
        1: 4507:    restart_set_kv(ctx, "mmap_oldbase", "%p", meta->mmap_base);
        -: 4508:
        1: 4509:    return 0;
        -: 4510:}
        -: 4511:
        -: 4512:// We must see at least this number of checked lines. Else empty/missing lines
        -: 4513:// could cause a false-positive.
        -: 4514:// TODO: Once crc32'ing of the metadata file is done this could be ensured better by
        -: 4515:// the restart module itself (crc32 + count of lines must match on the
        -: 4516:// backend)
        -: 4517:#define RESTART_REQUIRED_META 17
        -: 4518:
        -: 4519:// With this callback we make a decision on if the current configuration
        -: 4520:// matches up enough to allow reusing the cache.
        -: 4521:// We also re-load important runtime information.
        1: 4522:static int _mc_meta_load_cb(const char *tag, void *ctx, void *data) {
        1: 4523:    struct _mc_meta_data *meta = (struct _mc_meta_data *)data;
        1: 4524:    char *key;
        1: 4525:    char *val;
        1: 4526:    int reuse_mmap = 0;
        1: 4527:    meta->process_started = 0;
        1: 4528:    meta->time_delta = 0;
        1: 4529:    meta->current_time = 0;
        1: 4530:    int lines_seen = 0;
        -: 4531:
        -: 4532:    // TODO: not sure this is any better than just doing an if/else tree with
        -: 4533:    // strcmp's...
        1: 4534:    enum {
        -: 4535:        R_MMAP_OLDBASE = 0,
        -: 4536:        R_MAXBYTES,
        -: 4537:        R_CHUNK_SIZE,
        -: 4538:        R_ITEM_SIZE_MAX,
        -: 4539:        R_SLAB_CHUNK_SIZE_MAX,
        -: 4540:        R_SLAB_PAGE_SIZE,
        -: 4541:        R_SLAB_CONFIG,
        -: 4542:        R_USE_CAS,
        -: 4543:        R_SLAB_REASSIGN,
        -: 4544:        R_CURRENT_CAS,
        -: 4545:        R_OLDEST_CAS,
        -: 4546:        R_OLDEST_LIVE,
        -: 4547:        R_LOGGER_GID,
        -: 4548:        R_CURRENT_TIME,
        -: 4549:        R_STOP_TIME,
        -: 4550:        R_PROCESS_STARTED,
        -: 4551:        R_HASHPOWER,
        -: 4552:    };
        -: 4553:
        1: 4554:    const char *opts[] = {
        -: 4555:        [R_MMAP_OLDBASE] = "mmap_oldbase",
        -: 4556:        [R_MAXBYTES] = "maxbytes",
        -: 4557:        [R_CHUNK_SIZE] = "chunk_size",
        -: 4558:        [R_ITEM_SIZE_MAX] = "item_size_max",
        -: 4559:        [R_SLAB_CHUNK_SIZE_MAX] = "slab_chunk_size_max",
        -: 4560:        [R_SLAB_PAGE_SIZE] = "slab_page_size",
        -: 4561:        [R_SLAB_CONFIG] = "slab_config",
        -: 4562:        [R_USE_CAS] = "use_cas",
        -: 4563:        [R_SLAB_REASSIGN] = "slab_reassign",
        -: 4564:        [R_CURRENT_CAS] = "current_cas",
        -: 4565:        [R_OLDEST_CAS] = "oldest_cas",
        -: 4566:        [R_OLDEST_LIVE] = "oldest_live",
        -: 4567:        [R_LOGGER_GID] = "logger_gid",
        -: 4568:        [R_CURRENT_TIME] = "current_time",
        -: 4569:        [R_STOP_TIME] = "stop_time",
        -: 4570:        [R_PROCESS_STARTED] = "process_started",
        -: 4571:        [R_HASHPOWER] = "hashpower",
        -: 4572:        NULL
        -: 4573:    };
        -: 4574:
       18: 4575:    while (restart_get_kv(ctx, &key, &val) == RESTART_OK) {
       17: 4576:        int type = 0;
       17: 4577:        int32_t val_int = 0;
       17: 4578:        uint32_t val_uint = 0;
       17: 4579:        int64_t bigval_int = 0;
       17: 4580:        uint64_t bigval_uint = 0;
        -: 4581:
      153: 4582:        while (opts[type] != NULL && strcmp(key, opts[type]) != 0) {
      136: 4583:            type++;
        -: 4584:        }
      17*: 4585:        if (opts[type] == NULL) {
    #####: 4586:            fprintf(stderr, "[restart] unknown/unhandled key: %s\n", key);
    #####: 4587:            continue;
        -: 4588:        }
       17: 4589:        lines_seen++;
        -: 4590:
        -: 4591:        // helper for any boolean checkers.
       17: 4592:        bool val_bool = false;
       17: 4593:        bool is_bool = true;
       17: 4594:        if (strcmp(val, "false") == 0) {
        -: 4595:            val_bool = false;
       17: 4596:        } else if (strcmp(val, "true") == 0) {
        -: 4597:            val_bool = true;
        -: 4598:        } else {
       15: 4599:            is_bool = false;
        -: 4600:        }
        -: 4601:
       17: 4602:        switch (type) {
        1: 4603:        case R_MMAP_OLDBASE:
        1: 4604:            if (!safe_strtoull_hex(val, &meta->old_base)) {
    #####: 4605:                fprintf(stderr, "[restart] failed to parse %s: %s\n", key, val);
    #####: 4606:                reuse_mmap = -1;
        -: 4607:            }
        -: 4608:            break;
        1: 4609:        case R_MAXBYTES:
        1: 4610:            if (!safe_strtoll(val, &bigval_int) || settings.maxbytes != bigval_int) {
        -: 4611:                reuse_mmap = -1;
        -: 4612:            }
        -: 4613:            break;
        1: 4614:        case R_CHUNK_SIZE:
        1: 4615:            if (!safe_strtol(val, &val_int) || settings.chunk_size != val_int) {
        -: 4616:                reuse_mmap = -1;
        -: 4617:            }
        -: 4618:            break;
        1: 4619:        case R_ITEM_SIZE_MAX:
        1: 4620:            if (!safe_strtol(val, &val_int) || settings.item_size_max != val_int) {
        -: 4621:                reuse_mmap = -1;
        -: 4622:            }
        -: 4623:            break;
        1: 4624:        case R_SLAB_CHUNK_SIZE_MAX:
        1: 4625:            if (!safe_strtol(val, &val_int) || settings.slab_chunk_size_max != val_int) {
        -: 4626:                reuse_mmap = -1;
        -: 4627:            }
        -: 4628:            break;
        1: 4629:        case R_SLAB_PAGE_SIZE:
        1: 4630:            if (!safe_strtol(val, &val_int) || settings.slab_page_size != val_int) {
        -: 4631:                reuse_mmap = -1;
        -: 4632:            }
        -: 4633:            break;
        1: 4634:        case R_SLAB_CONFIG:
        1: 4635:            if (strcmp(val, meta->slab_config) != 0) {
        -: 4636:                reuse_mmap = -1;
        -: 4637:            }
        -: 4638:            break;
        1: 4639:        case R_USE_CAS:
        1: 4640:            if (!is_bool || settings.use_cas != val_bool) {
        -: 4641:                reuse_mmap = -1;
        -: 4642:            }
        -: 4643:            break;
        1: 4644:        case R_SLAB_REASSIGN:
        1: 4645:            if (!is_bool || settings.slab_reassign != val_bool) {
        -: 4646:                reuse_mmap = -1;
        -: 4647:            }
        -: 4648:            break;
        1: 4649:        case R_CURRENT_CAS:
        -: 4650:            // FIXME: do we need to fail if these values _aren't_ found?
        1: 4651:            if (!safe_strtoull(val, &bigval_uint)) {
        -: 4652:                reuse_mmap = -1;
        -: 4653:            } else {
        1: 4654:                set_cas_id(bigval_uint);
        -: 4655:            }
        -: 4656:            break;
        1: 4657:        case R_OLDEST_CAS:
        1: 4658:            if (!safe_strtoull(val, &bigval_uint)) {
        -: 4659:                reuse_mmap = -1;
        -: 4660:            } else {
        1: 4661:                settings.oldest_cas = bigval_uint;
        -: 4662:            }
        -: 4663:            break;
        1: 4664:        case R_OLDEST_LIVE:
        1: 4665:            if (!safe_strtoul(val, &val_uint)) {
        -: 4666:                reuse_mmap = -1;
        -: 4667:            } else {
        1: 4668:                settings.oldest_live = val_uint;
        -: 4669:            }
        -: 4670:            break;
        1: 4671:        case R_LOGGER_GID:
        1: 4672:            if (!safe_strtoull(val, &bigval_uint)) {
        -: 4673:                reuse_mmap = -1;
        -: 4674:            } else {
        1: 4675:                logger_set_gid(bigval_uint);
        -: 4676:            }
        -: 4677:            break;
        1: 4678:        case R_PROCESS_STARTED:
        1: 4679:            if (!safe_strtoull(val, &bigval_uint)) {
        -: 4680:                reuse_mmap = -1;
        -: 4681:            } else {
        1: 4682:                meta->process_started = bigval_uint;
        -: 4683:            }
        -: 4684:            break;
        1: 4685:        case R_CURRENT_TIME:
        1: 4686:            if (!safe_strtoul(val, &val_uint)) {
        -: 4687:                reuse_mmap = -1;
        -: 4688:            } else {
        1: 4689:                meta->current_time = val_uint;
        -: 4690:            }
        -: 4691:            break;
        1: 4692:        case R_STOP_TIME:
        1: 4693:            if (!safe_strtoll(val, &bigval_int)) {
        -: 4694:                reuse_mmap = -1;
        -: 4695:            } else {
        1: 4696:                struct timeval t;
        1: 4697:                gettimeofday(&t, NULL);
        1: 4698:                meta->time_delta = t.tv_sec - bigval_int;
        -: 4699:                // clock has done something crazy.
        -: 4700:                // there are _lots_ of ways the clock can go wrong here, but
        -: 4701:                // this is a safe sanity check since there's nothing else we
        -: 4702:                // can realistically do.
        1: 4703:                if (meta->time_delta <= 0) {
    #####: 4704:                    reuse_mmap = -1;
        -: 4705:                }
        -: 4706:            }
        -: 4707:            break;
        1: 4708:        case R_HASHPOWER:
        1: 4709:            if (!safe_strtoul(val, &val_uint)) {
        -: 4710:                reuse_mmap = -1;
        -: 4711:            } else {
        1: 4712:                settings.hashpower_init = val_uint;
        -: 4713:            }
        -: 4714:            break;
    #####: 4715:        default:
    #####: 4716:            fprintf(stderr, "[restart] unhandled key: %s\n", key);
        -: 4717:        }
        -: 4718:
      17*: 4719:        if (reuse_mmap != 0) {
    #####: 4720:            fprintf(stderr, "[restart] restart incompatible due to setting for [%s] [old value: %s]\n", key, val);
    #####: 4721:            break;
        -: 4722:        }
        -: 4723:    }
        -: 4724:
        1: 4725:    if (lines_seen < RESTART_REQUIRED_META) {
    #####: 4726:        fprintf(stderr, "[restart] missing some metadata lines\n");
    #####: 4727:        reuse_mmap = -1;
        -: 4728:    }
        -: 4729:
        1: 4730:    return reuse_mmap;
        -: 4731:}
        -: 4732:
      413: 4733:int main (int argc, char **argv) {
      413: 4734:    int c;
      413: 4735:    bool lock_memory = false;
      413: 4736:    bool do_daemonize = false;
      413: 4737:    bool preallocate = false;
      413: 4738:    int maxcore = 0;
      413: 4739:    char *username = NULL;
      413: 4740:    char *pid_file = NULL;
      413: 4741:    struct passwd *pw;
      413: 4742:    struct rlimit rlim;
      413: 4743:    char *buf;
      413: 4744:    char unit = '\0';
      413: 4745:    int size_max = 0;
      413: 4746:    int retval = EXIT_SUCCESS;
      413: 4747:    bool protocol_specified = false;
      413: 4748:    bool tcp_specified = false;
      413: 4749:    bool udp_specified = false;
      413: 4750:    bool start_lru_maintainer = true;
      413: 4751:    bool start_lru_crawler = true;
      413: 4752:    bool start_assoc_maint = true;
      413: 4753:    enum hashfunc_type hash_type = MURMUR3_HASH;
      413: 4754:    uint32_t tocrawl;
      413: 4755:    uint32_t slab_sizes[MAX_NUMBER_OF_SLAB_CLASSES];
      413: 4756:    bool use_slab_sizes = false;
      413: 4757:    char *slab_sizes_unparsed = NULL;
      413: 4758:    bool slab_chunk_size_changed = false;
        -: 4759:    // struct for restart code. Initialized up here so we can curry
        -: 4760:    // important settings to save or validate.
      413: 4761:    struct _mc_meta_data *meta = malloc(sizeof(struct _mc_meta_data));
      413: 4762:    meta->slab_config = NULL;
      413: 4763:    char *subopts, *subopts_orig;
      413: 4764:    char *subopts_value;
      413: 4765:    enum {
        -: 4766:        MAXCONNS_FAST = 0,
        -: 4767:        HASHPOWER_INIT,
        -: 4768:        NO_HASHEXPAND,
        -: 4769:        SLAB_REASSIGN,
        -: 4770:        SLAB_AUTOMOVE,
        -: 4771:        SLAB_AUTOMOVE_RATIO,
        -: 4772:        SLAB_AUTOMOVE_WINDOW,
        -: 4773:        TAIL_REPAIR_TIME,
        -: 4774:        HASH_ALGORITHM,
        -: 4775:        LRU_CRAWLER,
        -: 4776:        LRU_CRAWLER_SLEEP,
        -: 4777:        LRU_CRAWLER_TOCRAWL,
        -: 4778:        LRU_MAINTAINER,
        -: 4779:        HOT_LRU_PCT,
        -: 4780:        WARM_LRU_PCT,
        -: 4781:        HOT_MAX_FACTOR,
        -: 4782:        WARM_MAX_FACTOR,
        -: 4783:        TEMPORARY_TTL,
        -: 4784:        IDLE_TIMEOUT,
        -: 4785:        WATCHER_LOGBUF_SIZE,
        -: 4786:        WORKER_LOGBUF_SIZE,
        -: 4787:        SLAB_SIZES,
        -: 4788:        SLAB_CHUNK_MAX,
        -: 4789:        TRACK_SIZES,
        -: 4790:        NO_INLINE_ASCII_RESP,
        -: 4791:        MODERN,
        -: 4792:        NO_MODERN,
        -: 4793:        NO_CHUNKED_ITEMS,
        -: 4794:        NO_SLAB_REASSIGN,
        -: 4795:        NO_SLAB_AUTOMOVE,
        -: 4796:        NO_MAXCONNS_FAST,
        -: 4797:        INLINE_ASCII_RESP,
        -: 4798:        NO_LRU_CRAWLER,
        -: 4799:        NO_LRU_MAINTAINER,
        -: 4800:        NO_DROP_PRIVILEGES,
        -: 4801:        DROP_PRIVILEGES,
        -: 4802:        RESP_OBJ_MEM_LIMIT,
        -: 4803:        READ_BUF_MEM_LIMIT,
        -: 4804:#ifdef TLS
        -: 4805:        SSL_CERT,
        -: 4806:        SSL_KEY,
        -: 4807:        SSL_VERIFY_MODE,
        -: 4808:        SSL_KEYFORM,
        -: 4809:        SSL_CIPHERS,
        -: 4810:        SSL_CA_CERT,
        -: 4811:        SSL_WBUF_SIZE,
        -: 4812:        SSL_SESSION_CACHE,
        -: 4813:        SSL_KERNEL_TLS,
        -: 4814:        SSL_MIN_VERSION,
        -: 4815:#endif
        -: 4816:#ifdef PROXY
        -: 4817:        PROXY_CONFIG,
        -: 4818:        PROXY_URING,
        -: 4819:#endif
        -: 4820:#ifdef MEMCACHED_DEBUG
        -: 4821:        RELAXED_PRIVILEGES,
        -: 4822:#endif
        -: 4823:#ifdef SOCK_COOKIE_ID
        -: 4824:        COOKIE_ID,
        -: 4825:#endif
        -: 4826:    };
      413: 4827:    char *const subopts_tokens[] = {
        -: 4828:        [MAXCONNS_FAST] = "maxconns_fast",
        -: 4829:        [HASHPOWER_INIT] = "hashpower",
        -: 4830:        [NO_HASHEXPAND] = "no_hashexpand",
        -: 4831:        [SLAB_REASSIGN] = "slab_reassign",
        -: 4832:        [SLAB_AUTOMOVE] = "slab_automove",
        -: 4833:        [SLAB_AUTOMOVE_RATIO] = "slab_automove_ratio",
        -: 4834:        [SLAB_AUTOMOVE_WINDOW] = "slab_automove_window",
        -: 4835:        [TAIL_REPAIR_TIME] = "tail_repair_time",
        -: 4836:        [HASH_ALGORITHM] = "hash_algorithm",
        -: 4837:        [LRU_CRAWLER] = "lru_crawler",
        -: 4838:        [LRU_CRAWLER_SLEEP] = "lru_crawler_sleep",
        -: 4839:        [LRU_CRAWLER_TOCRAWL] = "lru_crawler_tocrawl",
        -: 4840:        [LRU_MAINTAINER] = "lru_maintainer",
        -: 4841:        [HOT_LRU_PCT] = "hot_lru_pct",
        -: 4842:        [WARM_LRU_PCT] = "warm_lru_pct",
        -: 4843:        [HOT_MAX_FACTOR] = "hot_max_factor",
        -: 4844:        [WARM_MAX_FACTOR] = "warm_max_factor",
        -: 4845:        [TEMPORARY_TTL] = "temporary_ttl",
        -: 4846:        [IDLE_TIMEOUT] = "idle_timeout",
        -: 4847:        [WATCHER_LOGBUF_SIZE] = "watcher_logbuf_size",
        -: 4848:        [WORKER_LOGBUF_SIZE] = "worker_logbuf_size",
        -: 4849:        [SLAB_SIZES] = "slab_sizes",
        -: 4850:        [SLAB_CHUNK_MAX] = "slab_chunk_max",
        -: 4851:        [TRACK_SIZES] = "track_sizes",
        -: 4852:        [NO_INLINE_ASCII_RESP] = "no_inline_ascii_resp",
        -: 4853:        [MODERN] = "modern",
        -: 4854:        [NO_MODERN] = "no_modern",
        -: 4855:        [NO_CHUNKED_ITEMS] = "no_chunked_items",
        -: 4856:        [NO_SLAB_REASSIGN] = "no_slab_reassign",
        -: 4857:        [NO_SLAB_AUTOMOVE] = "no_slab_automove",
        -: 4858:        [NO_MAXCONNS_FAST] = "no_maxconns_fast",
        -: 4859:        [INLINE_ASCII_RESP] = "inline_ascii_resp",
        -: 4860:        [NO_LRU_CRAWLER] = "no_lru_crawler",
        -: 4861:        [NO_LRU_MAINTAINER] = "no_lru_maintainer",
        -: 4862:        [NO_DROP_PRIVILEGES] = "no_drop_privileges",
        -: 4863:        [DROP_PRIVILEGES] = "drop_privileges",
        -: 4864:        [RESP_OBJ_MEM_LIMIT] = "resp_obj_mem_limit",
        -: 4865:        [READ_BUF_MEM_LIMIT] = "read_buf_mem_limit",
        -: 4866:#ifdef TLS
        -: 4867:        [SSL_CERT] = "ssl_chain_cert",
        -: 4868:        [SSL_KEY] = "ssl_key",
        -: 4869:        [SSL_VERIFY_MODE] = "ssl_verify_mode",
        -: 4870:        [SSL_KEYFORM] = "ssl_keyformat",
        -: 4871:        [SSL_CIPHERS] = "ssl_ciphers",
        -: 4872:        [SSL_CA_CERT] = "ssl_ca_cert",
        -: 4873:        [SSL_WBUF_SIZE] = "ssl_wbuf_size",
        -: 4874:        [SSL_SESSION_CACHE] = "ssl_session_cache",
        -: 4875:        [SSL_KERNEL_TLS] = "ssl_kernel_tls",
        -: 4876:        [SSL_MIN_VERSION] = "ssl_min_version",
        -: 4877:#endif
        -: 4878:#ifdef PROXY
        -: 4879:        [PROXY_CONFIG] = "proxy_config",
        -: 4880:        [PROXY_URING] = "proxy_uring",
        -: 4881:#endif
        -: 4882:#ifdef MEMCACHED_DEBUG
        -: 4883:        [RELAXED_PRIVILEGES] = "relaxed_privileges",
        -: 4884:#endif
        -: 4885:#ifdef SOCK_COOKIE_ID
        -: 4886:        [COOKIE_ID] = "sock_cookie_id",
        -: 4887:#endif
        -: 4888:        NULL
        -: 4889:    };
        -: 4890:
      413: 4891:    if (!sanitycheck()) {
    #####: 4892:        free(meta);
    #####: 4893:        return EX_OSERR;
        -: 4894:    }
        -: 4895:
        -: 4896:    /* handle SIGINT, SIGTERM */
      413: 4897:    signal(SIGINT, sig_handler);
      413: 4898:    signal(SIGTERM, sig_handler);
      413: 4899:    signal(SIGHUP, sighup_handler);
      413: 4900:    signal(SIGUSR1, sig_usrhandler);
        -: 4901:
        -: 4902:    /* init settings */
      413: 4903:    settings_init();
      413: 4904:    verify_default("hash_algorithm", hash_type == MURMUR3_HASH);
        -: 4905:#ifdef EXTSTORE
      413: 4906:    void *storage = NULL;
      413: 4907:    void *storage_cf = storage_init_config(&settings);
      413: 4908:    bool storage_enabled = false;
      413: 4909:    if (storage_cf == NULL) {
    #####: 4910:        fprintf(stderr, "failed to allocate extstore config\n");
    #####: 4911:        return 1;
        -: 4912:    }
        -: 4913:#endif
        -: 4914:
        -: 4915:    /* set stderr non-buffering (for running under, say, daemontools) */
      413: 4916:    setbuf(stderr, NULL);
        -: 4917:
      413: 4918:    char *shortopts =
        -: 4919:          "a:"  /* access mask for unix socket */
        -: 4920:          "A"   /* enable admin shutdown command */
        -: 4921:          "Z"   /* enable SSL */
        -: 4922:          "p:"  /* TCP port number to listen on */
        -: 4923:          "s:"  /* unix socket path to listen on */
        -: 4924:          "U:"  /* UDP port number to listen on */
        -: 4925:          "m:"  /* max memory to use for items in megabytes */
        -: 4926:          "M"   /* return error on memory exhausted */
        -: 4927:          "c:"  /* max simultaneous connections */
        -: 4928:          "k"   /* lock down all paged memory */
        -: 4929:          "hiV" /* help, licence info, version */
        -: 4930:          "r"   /* maximize core file limit */
        -: 4931:          "v"   /* verbose */
        -: 4932:          "d"   /* daemon mode */
        -: 4933:          "l:"  /* interface to listen on */
        -: 4934:          "u:"  /* user identity to run as */
        -: 4935:          "P:"  /* save PID in file */
        -: 4936:          "f:"  /* factor? */
        -: 4937:          "n:"  /* minimum space allocated for key+value+flags */
        -: 4938:          "t:"  /* threads */
        -: 4939:          "D:"  /* prefix delimiter? */
        -: 4940:          "L"   /* Large memory pages */
        -: 4941:          "R:"  /* max requests per event */
        -: 4942:          "C"   /* Disable use of CAS */
        -: 4943:          "b:"  /* backlog queue limit */
        -: 4944:          "B:"  /* Binding protocol */
        -: 4945:          "I:"  /* Max item size */
        -: 4946:          "S"   /* Sasl ON */
        -: 4947:          "F"   /* Disable flush_all */
        -: 4948:          "X"   /* Disable dump commands */
        -: 4949:          "W"   /* Disable watch commands */
        -: 4950:          "Y:"   /* Enable token auth */
        -: 4951:          "e:"  /* mmap path for external item memory */
        -: 4952:          "o:"  /* Extended generic options */
        -: 4953:          "N:"  /* NAPI ID based thread selection */
        -: 4954:          ;
        -: 4955:
        -: 4956:    /* process arguments */
        -: 4957:#ifdef HAVE_GETOPT_LONG
      413: 4958:    const struct option longopts[] = {
        -: 4959:        {"unix-mask", required_argument, 0, 'a'},
        -: 4960:        {"enable-shutdown", no_argument, 0, 'A'},
        -: 4961:        {"enable-ssl", no_argument, 0, 'Z'},
        -: 4962:        {"port", required_argument, 0, 'p'},
        -: 4963:        {"unix-socket", required_argument, 0, 's'},
        -: 4964:        {"udp-port", required_argument, 0, 'U'},
        -: 4965:        {"memory-limit", required_argument, 0, 'm'},
        -: 4966:        {"disable-evictions", no_argument, 0, 'M'},
        -: 4967:        {"conn-limit", required_argument, 0, 'c'},
        -: 4968:        {"lock-memory", no_argument, 0, 'k'},
        -: 4969:        {"help", no_argument, 0, 'h'},
        -: 4970:        {"license", no_argument, 0, 'i'},
        -: 4971:        {"version", no_argument, 0, 'V'},
        -: 4972:        {"enable-coredumps", no_argument, 0, 'r'},
        -: 4973:        {"verbose", optional_argument, 0, 'v'},
        -: 4974:        {"daemon", no_argument, 0, 'd'},
        -: 4975:        {"listen", required_argument, 0, 'l'},
        -: 4976:        {"user", required_argument, 0, 'u'},
        -: 4977:        {"pidfile", required_argument, 0, 'P'},
        -: 4978:        {"slab-growth-factor", required_argument, 0, 'f'},
        -: 4979:        {"slab-min-size", required_argument, 0, 'n'},
        -: 4980:        {"threads", required_argument, 0, 't'},
        -: 4981:        {"enable-largepages", no_argument, 0, 'L'},
        -: 4982:        {"max-reqs-per-event", required_argument, 0, 'R'},
        -: 4983:        {"disable-cas", no_argument, 0, 'C'},
        -: 4984:        {"listen-backlog", required_argument, 0, 'b'},
        -: 4985:        {"protocol", required_argument, 0, 'B'},
        -: 4986:        {"max-item-size", required_argument, 0, 'I'},
        -: 4987:        {"enable-sasl", no_argument, 0, 'S'},
        -: 4988:        {"disable-flush-all", no_argument, 0, 'F'},
        -: 4989:        {"disable-dumping", no_argument, 0, 'X'},
        -: 4990:        {"disable-watch", no_argument, 0, 'W'},
        -: 4991:        {"auth-file", required_argument, 0, 'Y'},
        -: 4992:        {"memory-file", required_argument, 0, 'e'},
        -: 4993:        {"extended", required_argument, 0, 'o'},
        -: 4994:        {"napi-ids", required_argument, 0, 'N'},
        -: 4995:        {0, 0, 0, 0}
        -: 4996:    };
      413: 4997:    int optindex;
     1197: 4998:    while (-1 != (c = getopt_long(argc, argv, shortopts,
        -: 4999:                    longopts, &optindex))) {
        -: 5000:#else
        -: 5001:    while (-1 != (c = getopt(argc, argv, shortopts))) {
        -: 5002:#endif
      666: 5003:        switch (c) {
        5: 5004:        case 'A':
        -: 5005:            /* enables "shutdown" command */
        5: 5006:            settings.shutdown_command = true;
        5: 5007:            break;
    #####: 5008:        case 'Z':
        -: 5009:            /* enable secure communication*/
        -: 5010:#ifdef TLS
        -: 5011:            settings.ssl_enabled = true;
        -: 5012:#else
    #####: 5013:            fprintf(stderr, "This server is not built with TLS support.\n");
    #####: 5014:            exit(EX_USAGE);
        -: 5015:#endif
    #####: 5016:            break;
    #####: 5017:        case 'a':
        -: 5018:#ifndef DISABLE_UNIX_SOCKET
        -: 5019:            /* access for unix domain socket, as octal mask (like chmod)*/
    #####: 5020:            settings.access= strtol(optarg,NULL,8);
        -: 5021:#else
        -: 5022:            fprintf(stderr, "This server is not built with unix socket support.\n");
        -: 5023:            exit(EX_USAGE);
        -: 5024:#endif /* #ifndef DISABLE_UNIX_SOCKET */
    #####: 5025:            break;
       26: 5026:        case 'U':
       26: 5027:            settings.udpport = atoi(optarg);
       26: 5028:            udp_specified = true;
       26: 5029:            break;
       17: 5030:        case 'p':
       17: 5031:            settings.port = atoi(optarg);
       17: 5032:            tcp_specified = true;
       17: 5033:            break;
       99: 5034:        case 's':
        -: 5035:#ifndef DISABLE_UNIX_SOCKET
       99: 5036:            settings.socketpath = optarg;
        -: 5037:#else
        -: 5038:            fprintf(stderr, "This server is not built with unix socket support.\n");
        -: 5039:            exit(EX_USAGE);
        -: 5040:#endif /* #ifndef DISABLE_UNIX_SOCKET */
       99: 5041:            break;
       31: 5042:        case 'm':
       31: 5043:            settings.maxbytes = ((size_t)atoi(optarg)) * 1024 * 1024;
       31: 5044:            break;
        2: 5045:        case 'M':
        2: 5046:            settings.evict_to_free = 0;
        2: 5047:            break;
        2: 5048:        case 'c':
        2: 5049:            settings.maxconns = atoi(optarg);
        2: 5050:            if (settings.maxconns <= 0) {
        2: 5051:                fprintf(stderr, "Maximum connections must be greater than 0\n");
        2: 5052:                return 1;
        -: 5053:            }
        -: 5054:            break;
      288: 5055:        case 'h':
      288: 5056:            usage();
      288: 5057:            exit(EXIT_SUCCESS);
    #####: 5058:        case 'i':
    #####: 5059:            usage_license();
    #####: 5060:            exit(EXIT_SUCCESS);
        -: 5061:        case 'V':
    #####: 5062:            printf(PACKAGE " " VERSION "\n");
    #####: 5063:            exit(EXIT_SUCCESS);
        -: 5064:        case 'k':
        -: 5065:            lock_memory = true;
        -: 5066:            break;
        6: 5067:        case 'v':
        6: 5068:            settings.verbose++;
        6: 5069:            break;
        7: 5070:        case 'l':
        7: 5071:            if (settings.inter != NULL) {
    #####: 5072:                if (strstr(settings.inter, optarg) != NULL) {
        -: 5073:                    break;
        -: 5074:                }
    #####: 5075:                size_t len = strlen(settings.inter) + strlen(optarg) + 2;
    #####: 5076:                char *p = malloc(len);
    #####: 5077:                if (p == NULL) {
    #####: 5078:                    fprintf(stderr, "Failed to allocate memory\n");
    #####: 5079:                    return 1;
        -: 5080:                }
    #####: 5081:                snprintf(p, len, "%s,%s", settings.inter, optarg);
    #####: 5082:                free(settings.inter);
    #####: 5083:                settings.inter = p;
        -: 5084:            } else {
        7: 5085:                settings.inter= strdup(optarg);
        -: 5086:            }
        -: 5087:            break;
    #####: 5088:        case 'd':
    #####: 5089:            do_daemonize = true;
    #####: 5090:            break;
    #####: 5091:        case 'r':
    #####: 5092:            maxcore = 1;
    #####: 5093:            break;
        2: 5094:        case 'R':
        2: 5095:            settings.reqs_per_event = atoi(optarg);
        2: 5096:            if (settings.reqs_per_event == 0) {
    #####: 5097:                fprintf(stderr, "Number of requests per event must be greater than 0\n");
    #####: 5098:                return 1;
        -: 5099:            }
        -: 5100:            break;
    #####: 5101:        case 'u':
    #####: 5102:            username = optarg;
    #####: 5103:            break;
    #####: 5104:        case 'P':
    #####: 5105:            pid_file = optarg;
    #####: 5106:            break;
        2: 5107:        case 'e':
        2: 5108:            settings.memory_file = optarg;
        2: 5109:            break;
    #####: 5110:        case 'f':
    #####: 5111:            settings.factor = atof(optarg);
    #####: 5112:            if (settings.factor <= 1.0) {
    #####: 5113:                fprintf(stderr, "Factor must be greater than 1\n");
    #####: 5114:                return 1;
        -: 5115:            }
    #####: 5116:            meta->slab_config = strdup(optarg);
    #####: 5117:            break;
    #####: 5118:        case 'n':
    #####: 5119:            settings.chunk_size = atoi(optarg);
    #####: 5120:            if (settings.chunk_size == 0) {
    #####: 5121:                fprintf(stderr, "Chunk size must be greater than 0\n");
    #####: 5122:                return 1;
        -: 5123:            }
        -: 5124:            break;
        2: 5125:        case 't':
        2: 5126:            settings.num_threads = atoi(optarg);
        2: 5127:            if (settings.num_threads <= 0) {
        1: 5128:                fprintf(stderr, "Number of threads must be greater than 0\n");
        1: 5129:                return 1;
        -: 5130:            }
        -: 5131:            /* There're other problems when you get above 64 threads.
        -: 5132:             * In the future we should portably detect # of cores for the
        -: 5133:             * default.
        -: 5134:             */
        1: 5135:            if (settings.num_threads > 64) {
     784*: 5136:                fprintf(stderr, "WARNING: Setting a high number of worker"
        -: 5137:                                "threads is not recommended.\n"
        -: 5138:                                " Set this value to the number of cores in"
        -: 5139:                                " your machine or less.\n");
        -: 5140:            }
        -: 5141:            break;
    #####: 5142:        case 'D':
    #####: 5143:            if (! optarg || ! optarg[0]) {
    #####: 5144:                fprintf(stderr, "No delimiter specified\n");
    #####: 5145:                return 1;
        -: 5146:            }
    #####: 5147:            settings.prefix_delimiter = optarg[0];
    #####: 5148:            settings.detail_enabled = 1;
    #####: 5149:            break;
    #####: 5150:        case 'L' :
    #####: 5151:            if (enable_large_pages() == 0) {
        -: 5152:                preallocate = true;
        -: 5153:            } else {
    #####: 5154:                fprintf(stderr, "Cannot enable large pages on this system\n"
        -: 5155:                    "(There is no support as of this version)\n");
    #####: 5156:                return 1;
        -: 5157:            }
        -: 5158:            break;
        2: 5159:        case 'C' :
        2: 5160:            settings.use_cas = false;
        2: 5161:            break;
        1: 5162:        case 'b' :
        1: 5163:            settings.backlog = atoi(optarg);
        1: 5164:            break;
        8: 5165:        case 'B':
        8: 5166:            protocol_specified = true;
        8: 5167:            if (strcmp(optarg, "auto") == 0) {
        2: 5168:                settings.binding_protocol = negotiating_prot;
        6: 5169:            } else if (strcmp(optarg, "binary") == 0) {
        3: 5170:                settings.binding_protocol = binary_prot;
        3: 5171:            } else if (strcmp(optarg, "ascii") == 0) {
        2: 5172:                settings.binding_protocol = ascii_prot;
        -: 5173:            } else {
        1: 5174:                fprintf(stderr, "Invalid value for binding protocol: %s\n"
        -: 5175:                        " -- should be one of auto, binary, or ascii\n", optarg);
        1: 5176:                exit(EX_USAGE);
        -: 5177:            }
        -: 5178:            break;
       10: 5179:        case 'I':
       10: 5180:            buf = strdup(optarg);
       10: 5181:            unit = buf[strlen(buf)-1];
       10: 5182:            if (unit == 'k' || unit == 'm' ||
        4: 5183:                unit == 'K' || unit == 'M') {
        6: 5184:                buf[strlen(buf)-1] = '\0';
        6: 5185:                size_max = atoi(buf);
        6: 5186:                if (unit == 'k' || unit == 'K')
        1: 5187:                    size_max *= 1024;
        6: 5188:                if (unit == 'm' || unit == 'M')
        5: 5189:                    size_max *= 1024 * 1024;
        6: 5190:                settings.item_size_max = size_max;
        -: 5191:            } else {
        4: 5192:                settings.item_size_max = atoi(buf);
        -: 5193:            }
       10: 5194:            free(buf);
       10: 5195:            break;
        1: 5196:        case 'S': /* set Sasl authentication to true. Default is false */
        -: 5197:#ifndef ENABLE_SASL
        1: 5198:            fprintf(stderr, "This server is not built with SASL support.\n");
        1: 5199:            exit(EX_USAGE);
        -: 5200:#endif
        -: 5201:            settings.sasl = true;
        -: 5202:            break;
        1: 5203:       case 'F' :
        1: 5204:            settings.flush_enabled = false;
        1: 5205:            break;
    #####: 5206:       case 'X' :
    #####: 5207:            settings.dump_enabled = false;
    #####: 5208:            break;
        1: 5209:       case 'W' :
        1: 5210:            settings.watch_enabled = false;
        1: 5211:            break;
        1: 5212:       case 'Y' :
        -: 5213:            // dupe the file path now just in case the options get mangled.
        1: 5214:            settings.auth_file = strdup(optarg);
        1: 5215:            break;
    #####: 5216:       case 'N':
    #####: 5217:            settings.num_napi_ids = atoi(optarg);
    #####: 5218:            if (settings.num_napi_ids <= 0) {
    #####: 5219:                fprintf(stderr, "Maximum number of NAPI IDs must be greater than 0\n");
    #####: 5220:                return 1;
        -: 5221:            }
        -: 5222:            break;
      152: 5223:        case 'o': /* It's sub-opts time! */
      152: 5224:            subopts_orig = subopts = strdup(optarg); /* getsubopt() changes the original args */
        -: 5225:
      405: 5226:            while (*subopts != '\0') {
        -: 5227:            // BSD getsubopt (at least) has undefined behavior on -1, so
        -: 5228:            // if we want to retry the getsubopt call in submodules we
        -: 5229:            // need an extra layer of string copies.
      255: 5230:            char *subopts_temp_o = NULL;
      255: 5231:            char *subopts_temp = subopts_temp_o = strdup(subopts);
        -: 5232:
      255: 5233:            switch (getsubopt(&subopts, subopts_tokens, &subopts_value)) {
    #####: 5234:            case MAXCONNS_FAST:
    #####: 5235:                settings.maxconns_fast = true;
    #####: 5236:                break;
    #####: 5237:            case HASHPOWER_INIT:
    #####: 5238:                if (subopts_value == NULL) {
    #####: 5239:                    fprintf(stderr, "Missing numeric argument for hashpower\n");
       2*: 5240:                    return 1;
        -: 5241:                }
    #####: 5242:                settings.hashpower_init = atoi(subopts_value);
    #####: 5243:                if (settings.hashpower_init < 12) {
    #####: 5244:                    fprintf(stderr, "Initial hashtable multiplier of %d is too low\n",
        -: 5245:                        settings.hashpower_init);
    #####: 5246:                    return 1;
    #####: 5247:                } else if (settings.hashpower_init > 32) {
    #####: 5248:                    fprintf(stderr, "Initial hashtable multiplier of %d is too high\n"
        -: 5249:                        "Choose a value based on \"STAT hash_power_level\" from a running instance\n",
        -: 5250:                        settings.hashpower_init);
    #####: 5251:                    return 1;
        -: 5252:                }
        -: 5253:                break;
    #####: 5254:            case NO_HASHEXPAND:
    #####: 5255:                start_assoc_maint = false;
    #####: 5256:                break;
        3: 5257:            case SLAB_REASSIGN:
        3: 5258:                settings.slab_reassign = true;
        3: 5259:                break;
       10: 5260:            case SLAB_AUTOMOVE:
       10: 5261:                if (subopts_value == NULL) {
        2: 5262:                    settings.slab_automove = 1;
        2: 5263:                    break;
        -: 5264:                }
        8: 5265:                settings.slab_automove = atoi(subopts_value);
        8: 5266:                if (settings.slab_automove < 0 || settings.slab_automove > 2) {
    #####: 5267:                    fprintf(stderr, "slab_automove must be between 0 and 2\n");
    #####: 5268:                    return 1;
        -: 5269:                }
        -: 5270:                break;
    #####: 5271:            case SLAB_AUTOMOVE_RATIO:
    #####: 5272:                if (subopts_value == NULL) {
    #####: 5273:                    fprintf(stderr, "Missing slab_automove_ratio argument\n");
    #####: 5274:                    return 1;
        -: 5275:                }
    #####: 5276:                settings.slab_automove_ratio = atof(subopts_value);
    #####: 5277:                if (settings.slab_automove_ratio <= 0 || settings.slab_automove_ratio > 1) {
    #####: 5278:                    fprintf(stderr, "slab_automove_ratio must be > 0 and < 1\n");
    #####: 5279:                    return 1;
        -: 5280:                }
        -: 5281:                break;
        2: 5282:            case SLAB_AUTOMOVE_WINDOW:
        2: 5283:                if (subopts_value == NULL) {
    #####: 5284:                    fprintf(stderr, "Missing slab_automove_window argument\n");
    #####: 5285:                    return 1;
        -: 5286:                }
        2: 5287:                settings.slab_automove_window = atoi(subopts_value);
        2: 5288:                if (settings.slab_automove_window < 3) {
    #####: 5289:                    fprintf(stderr, "slab_automove_window must be > 2\n");
    #####: 5290:                    return 1;
        -: 5291:                }
        -: 5292:                break;
    #####: 5293:            case TAIL_REPAIR_TIME:
    #####: 5294:                if (subopts_value == NULL) {
    #####: 5295:                    fprintf(stderr, "Missing numeric argument for tail_repair_time\n");
    #####: 5296:                    return 1;
        -: 5297:                }
    #####: 5298:                settings.tail_repair_time = atoi(subopts_value);
    #####: 5299:                if (settings.tail_repair_time < 10) {
    #####: 5300:                    fprintf(stderr, "Cannot set tail_repair_time to less than 10 seconds\n");
    #####: 5301:                    return 1;
        -: 5302:                }
        -: 5303:                break;
    #####: 5304:            case HASH_ALGORITHM:
    #####: 5305:                if (subopts_value == NULL) {
    #####: 5306:                    fprintf(stderr, "Missing hash_algorithm argument\n");
    #####: 5307:                    return 1;
    #####: 5308:                };
    #####: 5309:                if (strcmp(subopts_value, "jenkins") == 0) {
        -: 5310:                    hash_type = JENKINS_HASH;
    #####: 5311:                } else if (strcmp(subopts_value, "murmur3") == 0) {
        -: 5312:                    hash_type = MURMUR3_HASH;
    #####: 5313:                } else if (strcmp(subopts_value, "xxh3") == 0) {
        -: 5314:                    hash_type = XXH3_HASH;
        -: 5315:                } else {
    #####: 5316:                    fprintf(stderr, "Unknown hash_algorithm option (jenkins, murmur3, xxh3)\n");
    #####: 5317:                    return 1;
        -: 5318:                }
        -: 5319:                break;
        6: 5320:            case LRU_CRAWLER:
        6: 5321:                start_lru_crawler = true;
        6: 5322:                break;
    #####: 5323:            case LRU_CRAWLER_SLEEP:
    #####: 5324:                if (subopts_value == NULL) {
    #####: 5325:                    fprintf(stderr, "Missing lru_crawler_sleep value\n");
    #####: 5326:                    return 1;
        -: 5327:                }
    #####: 5328:                settings.lru_crawler_sleep = atoi(subopts_value);
    #####: 5329:                if (settings.lru_crawler_sleep > 1000000 || settings.lru_crawler_sleep < 0) {
    #####: 5330:                    fprintf(stderr, "LRU crawler sleep must be between 0 and 1 second\n");
    #####: 5331:                    return 1;
        -: 5332:                }
        -: 5333:                break;
    #####: 5334:            case LRU_CRAWLER_TOCRAWL:
    #####: 5335:                if (subopts_value == NULL) {
    #####: 5336:                    fprintf(stderr, "Missing lru_crawler_tocrawl value\n");
    #####: 5337:                    return 1;
        -: 5338:                }
    #####: 5339:                if (!safe_strtoul(subopts_value, &tocrawl)) {
    #####: 5340:                    fprintf(stderr, "lru_crawler_tocrawl takes a numeric 32bit value\n");
    #####: 5341:                    return 1;
        -: 5342:                }
    #####: 5343:                settings.lru_crawler_tocrawl = tocrawl;
    #####: 5344:                break;
        5: 5345:            case LRU_MAINTAINER:
        5: 5346:                start_lru_maintainer = true;
        5: 5347:                settings.lru_segmented = true;
        5: 5348:                break;
    #####: 5349:            case HOT_LRU_PCT:
    #####: 5350:                if (subopts_value == NULL) {
    #####: 5351:                    fprintf(stderr, "Missing hot_lru_pct argument\n");
    #####: 5352:                    return 1;
        -: 5353:                }
    #####: 5354:                settings.hot_lru_pct = atoi(subopts_value);
    #####: 5355:                if (settings.hot_lru_pct < 1 || settings.hot_lru_pct >= 80) {
    #####: 5356:                    fprintf(stderr, "hot_lru_pct must be > 1 and < 80\n");
    #####: 5357:                    return 1;
        -: 5358:                }
        -: 5359:                break;
    #####: 5360:            case WARM_LRU_PCT:
    #####: 5361:                if (subopts_value == NULL) {
    #####: 5362:                    fprintf(stderr, "Missing warm_lru_pct argument\n");
    #####: 5363:                    return 1;
        -: 5364:                }
    #####: 5365:                settings.warm_lru_pct = atoi(subopts_value);
    #####: 5366:                if (settings.warm_lru_pct < 1 || settings.warm_lru_pct >= 80) {
    #####: 5367:                    fprintf(stderr, "warm_lru_pct must be > 1 and < 80\n");
    #####: 5368:                    return 1;
        -: 5369:                }
        -: 5370:                break;
    #####: 5371:            case HOT_MAX_FACTOR:
    #####: 5372:                if (subopts_value == NULL) {
    #####: 5373:                    fprintf(stderr, "Missing hot_max_factor argument\n");
    #####: 5374:                    return 1;
        -: 5375:                }
    #####: 5376:                settings.hot_max_factor = atof(subopts_value);
    #####: 5377:                if (settings.hot_max_factor <= 0) {
    #####: 5378:                    fprintf(stderr, "hot_max_factor must be > 0\n");
    #####: 5379:                    return 1;
        -: 5380:                }
        -: 5381:                break;
    #####: 5382:            case WARM_MAX_FACTOR:
    #####: 5383:                if (subopts_value == NULL) {
    #####: 5384:                    fprintf(stderr, "Missing warm_max_factor argument\n");
    #####: 5385:                    return 1;
        -: 5386:                }
    #####: 5387:                settings.warm_max_factor = atof(subopts_value);
    #####: 5388:                if (settings.warm_max_factor <= 0) {
    #####: 5389:                    fprintf(stderr, "warm_max_factor must be > 0\n");
    #####: 5390:                    return 1;
        -: 5391:                }
        -: 5392:                break;
        1: 5393:            case TEMPORARY_TTL:
        1: 5394:                if (subopts_value == NULL) {
    #####: 5395:                    fprintf(stderr, "Missing temporary_ttl argument\n");
    #####: 5396:                    return 1;
        -: 5397:                }
        1: 5398:                settings.temp_lru = true;
        1: 5399:                settings.temporary_ttl = atoi(subopts_value);
        1: 5400:                break;
        1: 5401:            case IDLE_TIMEOUT:
        1: 5402:                if (subopts_value == NULL) {
    #####: 5403:                    fprintf(stderr, "Missing numeric argument for idle_timeout\n");
    #####: 5404:                    return 1;
        -: 5405:                }
        1: 5406:                settings.idle_timeout = atoi(subopts_value);
        1: 5407:                break;
        4: 5408:            case WATCHER_LOGBUF_SIZE:
        4: 5409:                if (subopts_value == NULL) {
    #####: 5410:                    fprintf(stderr, "Missing watcher_logbuf_size argument\n");
    #####: 5411:                    return 1;
        -: 5412:                }
        4: 5413:                if (!safe_strtoul(subopts_value, &settings.logger_watcher_buf_size)) {
    #####: 5414:                    fprintf(stderr, "could not parse argument to watcher_logbuf_size\n");
    #####: 5415:                    return 1;
        -: 5416:                }
        4: 5417:                settings.logger_watcher_buf_size *= 1024; /* kilobytes */
        4: 5418:                break;
    #####: 5419:            case WORKER_LOGBUF_SIZE:
    #####: 5420:                if (subopts_value == NULL) {
    #####: 5421:                    fprintf(stderr, "Missing worker_logbuf_size argument\n");
    #####: 5422:                    return 1;
        -: 5423:                }
    #####: 5424:                if (!safe_strtoul(subopts_value, &settings.logger_buf_size)) {
    #####: 5425:                    fprintf(stderr, "could not parse argument to worker_logbuf_size\n");
    #####: 5426:                    return 1;
        -: 5427:                }
    #####: 5428:                settings.logger_buf_size *= 1024; /* kilobytes */
    #####: 5429:            case SLAB_SIZES:
    #####: 5430:                slab_sizes_unparsed = strdup(subopts_value);
    #####: 5431:                break;
        7: 5432:            case SLAB_CHUNK_MAX:
        7: 5433:                if (subopts_value == NULL) {
    #####: 5434:                    fprintf(stderr, "Missing slab_chunk_max argument\n");
        -: 5435:                }
        7: 5436:                if (!safe_strtol(subopts_value, &settings.slab_chunk_size_max)) {
    #####: 5437:                    fprintf(stderr, "could not parse argument to slab_chunk_max\n");
        -: 5438:                }
        -: 5439:                slab_chunk_size_changed = true;
        -: 5440:                break;
    #####: 5441:            case TRACK_SIZES:
    #####: 5442:                item_stats_sizes_init();
    #####: 5443:                break;
        -: 5444:            case NO_INLINE_ASCII_RESP:
        -: 5445:                break;
        -: 5446:            case INLINE_ASCII_RESP:
        -: 5447:                break;
    #####: 5448:            case NO_CHUNKED_ITEMS:
    #####: 5449:                settings.slab_chunk_size_max = settings.slab_page_size;
    #####: 5450:                break;
    #####: 5451:            case NO_SLAB_REASSIGN:
    #####: 5452:                settings.slab_reassign = false;
    #####: 5453:                break;
    #####: 5454:            case NO_SLAB_AUTOMOVE:
    #####: 5455:                settings.slab_automove = 0;
    #####: 5456:                break;
    #####: 5457:            case NO_MAXCONNS_FAST:
    #####: 5458:                settings.maxconns_fast = false;
    #####: 5459:                break;
        3: 5460:            case NO_LRU_CRAWLER:
        3: 5461:                settings.lru_crawler = false;
        3: 5462:                start_lru_crawler = false;
        3: 5463:                break;
        1: 5464:            case NO_LRU_MAINTAINER:
        1: 5465:                start_lru_maintainer = false;
        1: 5466:                settings.lru_segmented = false;
        1: 5467:                break;
        -: 5468:#ifdef TLS
        -: 5469:            case SSL_CERT:
        -: 5470:                if (subopts_value == NULL) {
        -: 5471:                    fprintf(stderr, "Missing ssl_chain_cert argument\n");
        -: 5472:                    return 1;
        -: 5473:                }
        -: 5474:                settings.ssl_chain_cert = strdup(subopts_value);
        -: 5475:                break;
        -: 5476:            case SSL_KEY:
        -: 5477:                if (subopts_value == NULL) {
        -: 5478:                    fprintf(stderr, "Missing ssl_key argument\n");
        -: 5479:                    return 1;
        -: 5480:                }
        -: 5481:                settings.ssl_key = strdup(subopts_value);
        -: 5482:                break;
        -: 5483:            case SSL_VERIFY_MODE:
        -: 5484:            {
        -: 5485:                if (subopts_value == NULL) {
        -: 5486:                    fprintf(stderr, "Missing ssl_verify_mode argument\n");
        -: 5487:                    return 1;
        -: 5488:                }
        -: 5489:                int verify  = 0;
        -: 5490:                if (!safe_strtol(subopts_value, &verify)) {
        -: 5491:                    fprintf(stderr, "could not parse argument to ssl_verify_mode\n");
        -: 5492:                    return 1;
        -: 5493:                }
        -: 5494:                switch(verify) {
        -: 5495:                    case 0:
        -: 5496:                        settings.ssl_verify_mode = SSL_VERIFY_NONE;
        -: 5497:                        break;
        -: 5498:                    case 1:
        -: 5499:                        settings.ssl_verify_mode = SSL_VERIFY_PEER;
        -: 5500:                        break;
        -: 5501:                    case 2:
        -: 5502:                        settings.ssl_verify_mode = SSL_VERIFY_PEER |
        -: 5503:                                                    SSL_VERIFY_FAIL_IF_NO_PEER_CERT;
        -: 5504:                        break;
        -: 5505:                    case 3:
        -: 5506:                        settings.ssl_verify_mode = SSL_VERIFY_PEER |
        -: 5507:                                                    SSL_VERIFY_FAIL_IF_NO_PEER_CERT |
        -: 5508:                                                    SSL_VERIFY_CLIENT_ONCE;
        -: 5509:                        break;
        -: 5510:                    default:
        -: 5511:                        fprintf(stderr, "Invalid ssl_verify_mode. Use help to see valid options.\n");
        -: 5512:                        return 1;
        -: 5513:                }
        -: 5514:                break;
        -: 5515:            }
        -: 5516:            case SSL_KEYFORM:
        -: 5517:                if (subopts_value == NULL) {
        -: 5518:                    fprintf(stderr, "Missing ssl_keyformat argument\n");
        -: 5519:                    return 1;
        -: 5520:                }
        -: 5521:                if (!safe_strtol(subopts_value, &settings.ssl_keyformat)) {
        -: 5522:                    fprintf(stderr, "could not parse argument to ssl_keyformat\n");
        -: 5523:                    return 1;
        -: 5524:                }
        -: 5525:                break;
        -: 5526:            case SSL_CIPHERS:
        -: 5527:                if (subopts_value == NULL) {
        -: 5528:                    fprintf(stderr, "Missing ssl_ciphers argument\n");
        -: 5529:                    return 1;
        -: 5530:                }
        -: 5531:                settings.ssl_ciphers = strdup(subopts_value);
        -: 5532:                break;
        -: 5533:            case SSL_CA_CERT:
        -: 5534:                if (subopts_value == NULL) {
        -: 5535:                    fprintf(stderr, "Missing ssl_ca_cert argument\n");
        -: 5536:                    return 1;
        -: 5537:                }
        -: 5538:                settings.ssl_ca_cert = strdup(subopts_value);
        -: 5539:                break;
        -: 5540:            case SSL_WBUF_SIZE:
        -: 5541:                if (subopts_value == NULL) {
        -: 5542:                    fprintf(stderr, "Missing ssl_wbuf_size argument\n");
        -: 5543:                    return 1;
        -: 5544:                }
        -: 5545:                if (!safe_strtoul(subopts_value, &settings.ssl_wbuf_size)) {
        -: 5546:                    fprintf(stderr, "could not parse argument to ssl_wbuf_size\n");
        -: 5547:                    return 1;
        -: 5548:                }
        -: 5549:                settings.ssl_wbuf_size *= 1024; /* kilobytes */
        -: 5550:                break;
        -: 5551:            case SSL_SESSION_CACHE:
        -: 5552:                settings.ssl_session_cache = true;
        -: 5553:                break;
        -: 5554:            case SSL_KERNEL_TLS:
        -: 5555:                settings.ssl_kernel_tls = true;
        -: 5556:                break;
        -: 5557:            case SSL_MIN_VERSION: {
        -: 5558:                int min_version;
        -: 5559:                if (subopts_value == NULL) {
        -: 5560:                    fprintf(stderr, "Missing ssl_min_version argument\n");
        -: 5561:                    return 1;
        -: 5562:                }
        -: 5563:                if (!safe_strtol(subopts_value, &min_version)) {
        -: 5564:                    fprintf(stderr, "could not parse argument to ssl_min_version\n");
        -: 5565:                    return 1;
        -: 5566:                }
        -: 5567:                switch (min_version) {
        -: 5568:                    case 0:
        -: 5569:                        settings.ssl_min_version = TLS1_VERSION;
        -: 5570:                        break;
        -: 5571:                    case 1:
        -: 5572:                        settings.ssl_min_version = TLS1_1_VERSION;
        -: 5573:                        break;
        -: 5574:                    case 2:
        -: 5575:                        settings.ssl_min_version = TLS1_2_VERSION;
        -: 5576:                        break;
        -: 5577:#if defined(TLS1_3_VERSION)
        -: 5578:                    case 3:
        -: 5579:                        settings.ssl_min_version = TLS1_3_VERSION;
        -: 5580:                        break;
        -: 5581:#endif
        -: 5582:                    default:
        -: 5583:                        fprintf(stderr, "Invalid ssl_min_version. Use help to see valid options.\n");
        -: 5584:                        return 1;
        -: 5585:                }
        -: 5586:                break;
        -: 5587:            }
        -: 5588:#endif
        -: 5589:            case MODERN:
        -: 5590:                /* currently no new defaults */
        -: 5591:                break;
        7: 5592:            case NO_MODERN:
        7: 5593:                if (!slab_chunk_size_changed) {
        7: 5594:                    settings.slab_chunk_size_max = settings.slab_page_size;
        -: 5595:                }
        7: 5596:                settings.slab_reassign = false;
        7: 5597:                settings.slab_automove = 0;
        7: 5598:                settings.maxconns_fast = false;
        7: 5599:                settings.lru_segmented = false;
        7: 5600:                hash_type = JENKINS_HASH;
        7: 5601:                start_lru_crawler = false;
        7: 5602:                start_lru_maintainer = false;
        7: 5603:                break;
    #####: 5604:            case NO_DROP_PRIVILEGES:
    #####: 5605:                settings.drop_privileges = false;
    #####: 5606:                break;
    #####: 5607:            case DROP_PRIVILEGES:
    #####: 5608:                settings.drop_privileges = true;
    #####: 5609:                break;
    #####: 5610:            case RESP_OBJ_MEM_LIMIT:
        -: 5611:                // TODO: Remove at some point in the future.
    #####: 5612:                fprintf(stderr, "DEPRECATED: resp_obj_mem_limit no longer used. See read_buf_mem_limit,\n");
        -: 5613:                break;
        1: 5614:            case READ_BUF_MEM_LIMIT:
        1: 5615:                if (subopts_value == NULL) {
    #####: 5616:                    fprintf(stderr, "Missing read_buf_mem_limit argument\n");
    #####: 5617:                    return 1;
        -: 5618:                }
        1: 5619:                if (!safe_strtoul(subopts_value, &settings.read_buf_mem_limit)) {
    #####: 5620:                    fprintf(stderr, "could not parse argument to read_buf_mem_limit\n");
    #####: 5621:                    return 1;
        -: 5622:                }
        1: 5623:                settings.read_buf_mem_limit *= 1024 * 1024; /* megabytes */
        1: 5624:                break;
        -: 5625:#ifdef PROXY
        -: 5626:            case PROXY_CONFIG:
        -: 5627:                if (subopts_value == NULL) {
        -: 5628:                    fprintf(stderr, "Missing proxy_config file argument\n");
        -: 5629:                    return 1;
        -: 5630:                }
        -: 5631:                if (protocol_specified) {
        -: 5632:                    fprintf(stderr, "Cannot specify a protocol with proxy mode enabled\n");
        -: 5633:                    return 1;
        -: 5634:                }
        -: 5635:                settings.proxy_startfile = strdup(subopts_value);
        -: 5636:                settings.proxy_enabled = true;
        -: 5637:                settings.binding_protocol = proxy_prot;
        -: 5638:                protocol_specified = true;
        -: 5639:                break;
        -: 5640:            case PROXY_URING:
        -: 5641:                settings.proxy_uring = true;
        -: 5642:                break;
        -: 5643:#endif
        -: 5644:#ifdef MEMCACHED_DEBUG
      116: 5645:            case RELAXED_PRIVILEGES:
      116: 5646:                settings.relaxed_privileges = true;
      116: 5647:                break;
        -: 5648:#endif
        -: 5649:#ifdef SOCK_COOKIE_ID
    #####: 5650:            case COOKIE_ID:
    #####: 5651:                (void)safe_strtoul(subopts_value, &settings.sock_cookie_id);
    #####: 5652:                break;
        -: 5653:#endif
       87: 5654:            default:
        -: 5655:#ifdef EXTSTORE
        -: 5656:                // TODO: differentiating response code.
       87: 5657:                if (storage_read_config(storage_cf, &subopts_temp)) {
        -: 5658:                    return 1;
        -: 5659:                }
        -: 5660:#else
        -: 5661:                printf("Illegal suboption \"%s\"\n", subopts_temp);
        -: 5662:                return 1;
        -: 5663:#endif
        -: 5664:            } // switch
      253: 5665:            if (subopts_temp_o) {
      253: 5666:                free(subopts_temp_o);
        -: 5667:            }
        -: 5668:
        -: 5669:            } // while
      150: 5670:            free(subopts_orig);
      150: 5671:            break;
    #####: 5672:        default:
    #####: 5673:            fprintf(stderr, "Illegal argument \"%c\"\n", c);
    #####: 5674:            return 1;
        -: 5675:        }
        -: 5676:    }
        -: 5677:
      118: 5678:    if (settings.num_napi_ids > settings.num_threads) {
    #####: 5679:        fprintf(stderr, "Number of napi_ids(%d) cannot be greater than number of threads(%d)\n",
        -: 5680:                settings.num_napi_ids, settings.num_threads);
    #####: 5681:        exit(EX_USAGE);
        -: 5682:    }
        -: 5683:
      118: 5684:    if (settings.item_size_max < ITEM_SIZE_MAX_LOWER_LIMIT) {
        1: 5685:        fprintf(stderr, "Item max size cannot be less than 1024 bytes.\n");
        1: 5686:        exit(EX_USAGE);
        -: 5687:    }
      117: 5688:    if (settings.item_size_max > (settings.maxbytes / 2)) {
        1: 5689:        fprintf(stderr, "Cannot set item size limit higher than 1/2 of memory max.\n");
        1: 5690:        exit(EX_USAGE);
        -: 5691:    }
      116: 5692:    if (settings.item_size_max > (ITEM_SIZE_MAX_UPPER_LIMIT)) {
    #####: 5693:        fprintf(stderr, "Cannot set item size limit higher than a gigabyte.\n");
    #####: 5694:        exit(EX_USAGE);
        -: 5695:    }
      116: 5696:    if (settings.item_size_max > 1024 * 1024) {
        5: 5697:        if (!slab_chunk_size_changed) {
        -: 5698:            // Ideal new default is 16k, but needs stitching.
        5: 5699:            settings.slab_chunk_size_max = settings.slab_page_size / 2;
        -: 5700:        }
        -: 5701:    }
        -: 5702:
      116: 5703:    if (settings.slab_chunk_size_max > settings.item_size_max) {
    #####: 5704:        fprintf(stderr, "slab_chunk_max (bytes: %d) cannot be larger than -I (item_size_max %d)\n",
        -: 5705:                settings.slab_chunk_size_max, settings.item_size_max);
    #####: 5706:        exit(EX_USAGE);
        -: 5707:    }
        -: 5708:
      116: 5709:    if (settings.item_size_max % settings.slab_chunk_size_max != 0) {
    #####: 5710:        fprintf(stderr, "-I (item_size_max: %d) must be evenly divisible by slab_chunk_max (bytes: %d)\n",
        -: 5711:                settings.item_size_max, settings.slab_chunk_size_max);
    #####: 5712:        exit(EX_USAGE);
        -: 5713:    }
        -: 5714:
      116: 5715:    if (settings.slab_page_size % settings.slab_chunk_size_max != 0) {
    #####: 5716:        fprintf(stderr, "slab_chunk_max (bytes: %d) must divide evenly into %d (slab_page_size)\n",
        -: 5717:                settings.slab_chunk_size_max, settings.slab_page_size);
    #####: 5718:        exit(EX_USAGE);
        -: 5719:    }
        -: 5720:#ifdef EXTSTORE
      116: 5721:    switch (storage_check_config(storage_cf)) {
       10: 5722:        case 0:
       10: 5723:            storage_enabled = true;
       10: 5724:            break;
    #####: 5725:        case 1:
    #####: 5726:            exit(EX_USAGE);
      116: 5727:            break;
        -: 5728:    }
        -: 5729:#endif
        -: 5730:    // Reserve this for the new default. If factor size hasn't changed, use
        -: 5731:    // new default.
        -: 5732:    /*if (settings.slab_chunk_size_max == 16384 && settings.factor == 1.25) {
        -: 5733:        settings.factor = 1.08;
        -: 5734:    }*/
        -: 5735:
      116: 5736:    if (slab_sizes_unparsed != NULL) {
        -: 5737:        // want the unedited string for restart code.
    #####: 5738:        char *temp = strdup(slab_sizes_unparsed);
    #####: 5739:        if (_parse_slab_sizes(slab_sizes_unparsed, slab_sizes)) {
    #####: 5740:            use_slab_sizes = true;
    #####: 5741:            if (meta->slab_config) {
    #####: 5742:                free(meta->slab_config);
        -: 5743:            }
    #####: 5744:            meta->slab_config = temp;
        -: 5745:        } else {
    #####: 5746:            exit(EX_USAGE);
        -: 5747:        }
      116: 5748:    } else if (!meta->slab_config) {
        -: 5749:        // using the default factor.
      116: 5750:        meta->slab_config = "1.25";
        -: 5751:    }
        -: 5752:
      116: 5753:    if (settings.hot_lru_pct + settings.warm_lru_pct > 80) {
    #####: 5754:        fprintf(stderr, "hot_lru_pct + warm_lru_pct cannot be more than 80%% combined\n");
    #####: 5755:        exit(EX_USAGE);
        -: 5756:    }
        -: 5757:
      116: 5758:    if (settings.temp_lru && !start_lru_maintainer) {
    #####: 5759:        fprintf(stderr, "temporary_ttl requires lru_maintainer to be enabled\n");
    #####: 5760:        exit(EX_USAGE);
        -: 5761:    }
        -: 5762:
      116: 5763:    if (hash_init(hash_type) != 0) {
    #####: 5764:        fprintf(stderr, "Failed to initialize hash_algorithm!\n");
    #####: 5765:        exit(EX_USAGE);
        -: 5766:    }
        -: 5767:
        -: 5768:    /*
        -: 5769:     * Use one workerthread to serve each UDP port if the user specified
        -: 5770:     * multiple ports
        -: 5771:     */
      116: 5772:    if (settings.inter != NULL && strchr(settings.inter, ',')) {
    #####: 5773:        settings.num_threads_per_udp = 1;
        -: 5774:    } else {
      116: 5775:        settings.num_threads_per_udp = settings.num_threads;
        -: 5776:    }
        -: 5777:
      116: 5778:    if (settings.sasl) {
    #####: 5779:        if (!protocol_specified) {
    #####: 5780:            settings.binding_protocol = binary_prot;
        -: 5781:        } else {
    #####: 5782:            if (settings.binding_protocol != binary_prot) {
    #####: 5783:                fprintf(stderr, "ERROR: You cannot allow the ASCII protocol while using SASL.\n");
    #####: 5784:                exit(EX_USAGE);
        -: 5785:            }
        -: 5786:        }
        -: 5787:
    #####: 5788:        if (settings.udpport) {
    #####: 5789:            fprintf(stderr, "ERROR: Cannot enable UDP while using binary SASL authentication.\n");
    #####: 5790:            exit(EX_USAGE);
        -: 5791:        }
        -: 5792:    }
        -: 5793:
      116: 5794:    if (settings.auth_file) {
        1: 5795:        if (!protocol_specified) {
        1: 5796:            settings.binding_protocol = ascii_prot;
        -: 5797:        } else {
    #####: 5798:            if (settings.binding_protocol != ascii_prot) {
    #####: 5799:                fprintf(stderr, "ERROR: You cannot allow the BINARY protocol while using ascii authentication tokens.\n");
    #####: 5800:                exit(EX_USAGE);
        -: 5801:            }
        -: 5802:        }
        -: 5803:    }
        -: 5804:
      116: 5805:    if (udp_specified && settings.udpport != 0 && !tcp_specified) {
        2: 5806:        settings.port = settings.udpport;
        -: 5807:    }
        -: 5808:
      116: 5809:    if (settings.port > 65535) {
    #####: 5810:        fprintf(stderr, "ERROR: Invalid port number %d.\n", settings.port);
    #####: 5811:        exit(EX_USAGE);
        -: 5812:    }
        -: 5813:
        -: 5814:
        -: 5815:#ifdef TLS
        -: 5816:    /*
        -: 5817:     * Setup SSL if enabled
        -: 5818:     */
        -: 5819:    if (settings.ssl_enabled) {
        -: 5820:        if (!settings.port) {
        -: 5821:            fprintf(stderr, "ERROR: You cannot enable SSL without a TCP port.\n");
        -: 5822:            exit(EX_USAGE);
        -: 5823:        }
        -: 5824:        // openssl init methods.
        -: 5825:        SSL_load_error_strings();
        -: 5826:        SSLeay_add_ssl_algorithms();
        -: 5827:        // Initiate the SSL context.
        -: 5828:        ssl_init();
        -: 5829:    }
        -: 5830:#endif
        -: 5831:
      116: 5832:    if (maxcore != 0) {
    #####: 5833:        struct rlimit rlim_new;
        -: 5834:        /*
        -: 5835:         * First try raising to infinity; if that fails, try bringing
        -: 5836:         * the soft limit to the hard.
        -: 5837:         */
    #####: 5838:        if (getrlimit(RLIMIT_CORE, &rlim) == 0) {
    #####: 5839:            rlim_new.rlim_cur = rlim_new.rlim_max = RLIM_INFINITY;
    #####: 5840:            if (setrlimit(RLIMIT_CORE, &rlim_new)!= 0) {
        -: 5841:                /* failed. try raising just to the old max */
    #####: 5842:                rlim_new.rlim_cur = rlim_new.rlim_max = rlim.rlim_max;
    #####: 5843:                (void)setrlimit(RLIMIT_CORE, &rlim_new);
        -: 5844:            }
        -: 5845:        }
        -: 5846:        /*
        -: 5847:         * getrlimit again to see what we ended up with. Only fail if
        -: 5848:         * the soft limit ends up 0, because then no core files will be
        -: 5849:         * created at all.
        -: 5850:         */
        -: 5851:
    #####: 5852:        if ((getrlimit(RLIMIT_CORE, &rlim) != 0) || rlim.rlim_cur == 0) {
    #####: 5853:            fprintf(stderr, "failed to ensure corefile creation\n");
    #####: 5854:            exit(EX_OSERR);
        -: 5855:        }
        -: 5856:    }
        -: 5857:
        -: 5858:    /*
        -: 5859:     * If needed, increase rlimits to allow as many connections
        -: 5860:     * as needed.
        -: 5861:     */
        -: 5862:
      116: 5863:    if (getrlimit(RLIMIT_NOFILE, &rlim) != 0) {
    #####: 5864:        fprintf(stderr, "failed to getrlimit number of files\n");
    #####: 5865:        exit(EX_OSERR);
        -: 5866:    } else {
      116: 5867:        rlim.rlim_cur = settings.maxconns;
      116: 5868:        rlim.rlim_max = settings.maxconns;
      116: 5869:        if (setrlimit(RLIMIT_NOFILE, &rlim) != 0) {
        -: 5870:#ifndef MEMCACHED_DEBUG
        -: 5871:            fprintf(stderr, "failed to set rlimit for open files. Try starting as root or requesting smaller maxconns value.\n");
        -: 5872:            exit(EX_OSERR);
        -: 5873:#endif
      116: 5874:        }
        -: 5875:    }
        -: 5876:
        -: 5877:    /* lose root privileges if we have them */
      116: 5878:    if (getuid() == 0 || geteuid() == 0) {
    #####: 5879:        if (username == 0 || *username == '\0') {
    #####: 5880:            fprintf(stderr, "can't run as root without the -u switch\n");
    #####: 5881:            exit(EX_USAGE);
        -: 5882:        }
    #####: 5883:        if ((pw = getpwnam(username)) == 0) {
    #####: 5884:            fprintf(stderr, "can't find the user %s to switch to\n", username);
    #####: 5885:            exit(EX_NOUSER);
        -: 5886:        }
    #####: 5887:        if (setgroups(0, NULL) < 0) {
        -: 5888:            /* setgroups may fail with EPERM, indicating we are already in a
        -: 5889:             * minimally-privileged state. In that case we continue. For all
        -: 5890:             * other failure codes we exit.
        -: 5891:             *
        -: 5892:             * Note that errno is stored here because fprintf may change it.
        -: 5893:             */
    #####: 5894:            bool should_exit = errno != EPERM;
    #####: 5895:            fprintf(stderr, "failed to drop supplementary groups: %s\n",
        -: 5896:                    strerror(errno));
    #####: 5897:            if (should_exit) {
    #####: 5898:                exit(EX_OSERR);
        -: 5899:            }
        -: 5900:        }
    #####: 5901:        if (setgid(pw->pw_gid) < 0 || setuid(pw->pw_uid) < 0) {
    #####: 5902:            fprintf(stderr, "failed to assume identity of user %s\n", username);
    #####: 5903:            exit(EX_OSERR);
        -: 5904:        }
        -: 5905:    }
        -: 5906:
        -: 5907:    /* Initialize Sasl if -S was specified */
      116: 5908:    if (settings.sasl) {
      116: 5909:        init_sasl();
        -: 5910:    }
        -: 5911:
        -: 5912:    /* daemonize if requested */
        -: 5913:    /* if we want to ensure our ability to dump core, don't chdir to / */
      116: 5914:    if (do_daemonize) {
    #####: 5915:        if (signal(SIGHUP, SIG_IGN) == SIG_ERR) {
    #####: 5916:            perror("Failed to ignore SIGHUP");
        -: 5917:        }
    #####: 5918:        if (daemonize(maxcore, settings.verbose) == -1) {
    #####: 5919:            fprintf(stderr, "failed to daemon() in order to daemonize\n");
    #####: 5920:            exit(EXIT_FAILURE);
        -: 5921:        }
        -: 5922:    }
        -: 5923:
        -: 5924:    /* lock paged memory if needed */
      117: 5925:    if (lock_memory) {
        -: 5926:#ifdef HAVE_MLOCKALL
    #####: 5927:        int res = mlockall(MCL_CURRENT | MCL_FUTURE);
    #####: 5928:        if (res != 0) {
    #####: 5929:            fprintf(stderr, "warning: -k invalid, mlockall() failed: %s\n",
    #####: 5930:                    strerror(errno));
        -: 5931:        }
        -: 5932:#else
        -: 5933:        fprintf(stderr, "warning: -k invalid, mlockall() not supported on this platform.  proceeding without.\n");
        -: 5934:#endif
        -: 5935:    }
        -: 5936:
        -: 5937:    /* initialize main thread libevent instance */
        -: 5938:#if defined(LIBEVENT_VERSION_NUMBER) && LIBEVENT_VERSION_NUMBER >= 0x02000101
        -: 5939:    /* If libevent version is larger/equal to 2.0.2-alpha, use newer version */
      117: 5940:    struct event_config *ev_config;
      117: 5941:    ev_config = event_config_new();
      117: 5942:    event_config_set_flag(ev_config, EVENT_BASE_FLAG_NOLOCK);
      117: 5943:    main_base = event_base_new_with_config(ev_config);
      117: 5944:    event_config_free(ev_config);
        -: 5945:#else
        -: 5946:    /* Otherwise, use older API */
        -: 5947:    main_base = event_init();
        -: 5948:#endif
        -: 5949:
        -: 5950:    /* Load initial auth file if required */
      117: 5951:    if (settings.auth_file) {
        1: 5952:        if (settings.udpport) {
    #####: 5953:            fprintf(stderr, "Cannot use UDP with ascii authentication enabled (-U 0 to disable)\n");
    #####: 5954:            exit(EX_USAGE);
        -: 5955:        }
        -: 5956:
        1: 5957:        switch (authfile_load(settings.auth_file)) {
    #####: 5958:            case AUTHFILE_STATFAIL:
    #####: 5959:                vperror("Could not stat authfile [%s], error %s", settings.auth_file
    #####: 5960:                                                            , strerror(errno));
    #####: 5961:                exit(EXIT_FAILURE);
    #####: 5962:                break;
    #####: 5963:            case AUTHFILE_OPENFAIL:
    #####: 5964:                vperror("Could not open authfile [%s] for reading, error %s", settings.auth_file
    #####: 5965:                                                                           , strerror(errno));
    #####: 5966:                exit(EXIT_FAILURE);
    #####: 5967:                break;
    #####: 5968:            case AUTHFILE_OOM:
    #####: 5969:                fprintf(stderr, "Out of memory reading password file: %s", settings.auth_file);
    #####: 5970:                exit(EXIT_FAILURE);
    #####: 5971:                break;
    #####: 5972:            case AUTHFILE_MALFORMED:
    #####: 5973:                fprintf(stderr, "Authfile [%s] has a malformed entry. Should be 'user:password'", settings.auth_file);
    #####: 5974:                exit(EXIT_FAILURE);
        -: 5975:                break;
        -: 5976:            case AUTHFILE_OK:
        -: 5977:                break;
        -: 5978:        }
        -: 5979:    }
        -: 5980:
        -: 5981:    /* initialize other stuff */
      117: 5982:    stats_init();
      117: 5983:    logger_init();
      117: 5984:    conn_init();
      117: 5985:    bool reuse_mem = false;
      117: 5986:    void *mem_base = NULL;
      117: 5987:    bool prefill = false;
      117: 5988:    if (settings.memory_file != NULL) {
        2: 5989:        preallocate = true;
        -: 5990:        // Easier to manage memory if we prefill the global pool when reusing.
        2: 5991:        prefill = true;
        2: 5992:        restart_register("main", _mc_meta_load_cb, _mc_meta_save_cb, meta);
        4: 5993:        reuse_mem = restart_mmap_open(settings.maxbytes,
        2: 5994:                        settings.memory_file,
        -: 5995:                        &mem_base);
        -: 5996:        // The "save" callback gets called when we're closing out the mmap,
        -: 5997:        // but we don't know what the mmap_base is until after we call open.
        -: 5998:        // So we pass the struct above but have to fill it in here so the
        -: 5999:        // data's available during the save routine.
        2: 6000:        meta->mmap_base = mem_base;
        -: 6001:        // Also, the callbacks for load() run before _open returns, so we
        -: 6002:        // should have the old base in 'meta' as of here.
        -: 6003:    }
        -: 6004:    // Initialize the hash table _after_ checking restart metadata.
        -: 6005:    // We override the hash table start argument with what was live
        -: 6006:    // previously, to avoid filling a huge set of items into a tiny hash
        -: 6007:    // table.
      117: 6008:    assoc_init(settings.hashpower_init);
        -: 6009:#ifdef EXTSTORE
      117: 6010:    if (storage_enabled && reuse_mem) {
    #####: 6011:        fprintf(stderr, "[restart] memory restart with extstore not presently supported.\n");
    #####: 6012:        reuse_mem = false;
        -: 6013:    }
        -: 6014:#endif
      234: 6015:    slabs_init(settings.maxbytes, settings.factor, preallocate,
        -: 6016:            use_slab_sizes ? slab_sizes : NULL, mem_base, reuse_mem);
        -: 6017:#ifdef EXTSTORE
      117: 6018:    if (storage_enabled) {
       10: 6019:        storage = storage_init(storage_cf);
       10: 6020:        if (storage == NULL) {
        1: 6021:            exit(EXIT_FAILURE);
        -: 6022:        }
        9: 6023:        ext_storage = storage;
        -: 6024:        /* page mover algorithm for extstore needs memory prefilled */
        9: 6025:        prefill = true;
        -: 6026:    }
        -: 6027:#endif
        -: 6028:
      116: 6029:    if (settings.drop_privileges) {
      116: 6030:        setup_privilege_violations_handler();
        -: 6031:    }
        -: 6032:
      116: 6033:    if (prefill)
       11: 6034:        slabs_prefill_global();
        -: 6035:    /* In restartable mode and we've decided to issue a fixup on memory */
      116: 6036:    if (settings.memory_file != NULL && reuse_mem) {
        1: 6037:        mc_ptr_t old_base = meta->old_base;
        1: 6038:        assert(old_base == meta->old_base);
        -: 6039:
        -: 6040:        // should've pulled in process_started from meta file.
        1: 6041:        process_started = meta->process_started;
        -: 6042:        // TODO: must be a more canonical way of serializing/deserializing
        -: 6043:        // pointers? passing through uint64_t should work, and we're not
        -: 6044:        // annotating the pointer with anything, but it's still slightly
        -: 6045:        // insane.
        1: 6046:        restart_fixup((void *)old_base);
        -: 6047:    }
        -: 6048:    /*
        -: 6049:     * ignore SIGPIPE signals; we can use errno == EPIPE if we
        -: 6050:     * need that information
        -: 6051:     */
      116: 6052:    if (signal(SIGPIPE, SIG_IGN) == SIG_ERR) {
    #####: 6053:        perror("failed to ignore SIGPIPE; sigaction");
    #####: 6054:        exit(EX_OSERR);
        -: 6055:    }
        -: 6056:    /* start up worker threads if MT mode */
        -: 6057:#ifdef PROXY
        -: 6058:    if (settings.proxy_enabled) {
        -: 6059:        settings.proxy_ctx = proxy_init(settings.proxy_uring);
        -: 6060:    }
        -: 6061:#endif
        -: 6062:#ifdef EXTSTORE
      116: 6063:    slabs_set_storage(storage);
      116: 6064:    memcached_thread_init(settings.num_threads, storage);
      116: 6065:    init_lru_crawler(storage);
        -: 6066:#else
        -: 6067:    memcached_thread_init(settings.num_threads, NULL);
        -: 6068:    init_lru_crawler(NULL);
        -: 6069:#endif
        -: 6070:
        -: 6071:#ifdef PROXY
        -: 6072:    if (settings.proxy_enabled) {
        -: 6073:        if (proxy_first_confload(settings.proxy_ctx) != 0) {
        -: 6074:            exit(EXIT_FAILURE);
        -: 6075:        }
        -: 6076:    }
        -: 6077:#endif
        -: 6078:
      116: 6079:    if (start_assoc_maint && start_assoc_maintenance_thread() == -1) {
    #####: 6080:        exit(EXIT_FAILURE);
        -: 6081:    }
      116: 6082:    if (start_lru_crawler && start_item_crawler_thread() != 0) {
    #####: 6083:        fprintf(stderr, "Failed to enable LRU crawler thread\n");
    #####: 6084:        exit(EXIT_FAILURE);
        -: 6085:    }
        -: 6086:#ifdef EXTSTORE
      116: 6087:    if (storage && start_storage_compact_thread(storage) != 0) {
    #####: 6088:        fprintf(stderr, "Failed to start storage compaction thread\n");
    #####: 6089:        exit(EXIT_FAILURE);
        -: 6090:    }
      116: 6091:    if (storage && start_storage_write_thread(storage) != 0) {
    #####: 6092:        fprintf(stderr, "Failed to start storage writer thread\n");
    #####: 6093:        exit(EXIT_FAILURE);
        -: 6094:    }
        -: 6095:
      116: 6096:    if (start_lru_maintainer && start_lru_maintainer_thread(storage) != 0) {
        -: 6097:#else
        -: 6098:    if (start_lru_maintainer && start_lru_maintainer_thread(NULL) != 0) {
        -: 6099:#endif
    #####: 6100:        fprintf(stderr, "Failed to enable LRU maintainer thread\n");
    #####: 6101:        free(meta);
    #####: 6102:        return 1;
        -: 6103:    }
        -: 6104:
      225: 6105:    if (settings.slab_reassign &&
      109: 6106:        start_slab_maintenance_thread() == -1) {
    #####: 6107:        exit(EXIT_FAILURE);
        -: 6108:    }
        -: 6109:
      116: 6110:    if (settings.idle_timeout && start_conn_timeout_thread() == -1) {
    #####: 6111:        exit(EXIT_FAILURE);
        -: 6112:    }
        -: 6113:
        -: 6114:    /* initialise clock event */
        -: 6115:#if defined(HAVE_CLOCK_GETTIME) && defined(CLOCK_MONOTONIC)
        -: 6116:    {
      116: 6117:        struct timespec ts;
      116: 6118:        if (clock_gettime(CLOCK_MONOTONIC, &ts) == 0) {
      116: 6119:            monotonic = true;
      116: 6120:            monotonic_start = ts.tv_sec;
        -: 6121:            // Monotonic clock needs special handling for restarts.
        -: 6122:            // We get a start time at an arbitrary place, so we need to
        -: 6123:            // restore the original time delta, which is always "now" - _start
      116: 6124:            if (reuse_mem) {
        -: 6125:                // the running timespan at stop time + the time we think we
        -: 6126:                // were stopped.
        1: 6127:                monotonic_start -= meta->current_time + meta->time_delta;
        -: 6128:            } else {
      115: 6129:                monotonic_start -= ITEM_UPDATE_INTERVAL + 2;
        -: 6130:            }
        -: 6131:        }
        -: 6132:    }
        -: 6133:#endif
      116: 6134:    clock_handler(0, 0, 0);
        -: 6135:
        -: 6136:    /* create unix mode sockets after dropping privileges */
      116: 6137:    if (settings.socketpath != NULL) {
       96: 6138:        errno = 0;
       96: 6139:        if (server_socket_unix(settings.socketpath,settings.access)) {
    #####: 6140:            vperror("failed to listen on UNIX socket: %s", settings.socketpath);
    #####: 6141:            exit(EX_OSERR);
        -: 6142:        }
        -: 6143:    }
        -: 6144:
        -: 6145:    /* create the listening socket, bind it, and init */
      116: 6146:    if (settings.socketpath == NULL) {
       20: 6147:        const char *portnumber_filename = getenv("MEMCACHED_PORT_FILENAME");
       20: 6148:        char *temp_portnumber_filename = NULL;
       20: 6149:        size_t len;
       20: 6150:        FILE *portnumber_file = NULL;
        -: 6151:
       20: 6152:        if (portnumber_filename != NULL) {
       13: 6153:            len = strlen(portnumber_filename)+4+1;
       13: 6154:            temp_portnumber_filename = malloc(len);
       13: 6155:            snprintf(temp_portnumber_filename,
        -: 6156:                     len,
        -: 6157:                     "%s.lck", portnumber_filename);
        -: 6158:
       13: 6159:            portnumber_file = fopen(temp_portnumber_filename, "a");
       13: 6160:            if (portnumber_file == NULL) {
    #####: 6161:                fprintf(stderr, "Failed to open \"%s\": %s\n",
    #####: 6162:                        temp_portnumber_filename, strerror(errno));
        -: 6163:            }
        -: 6164:        }
        -: 6165:
       20: 6166:        errno = 0;
       20: 6167:        if (settings.port && server_sockets(settings.port, tcp_transport,
        -: 6168:                                           portnumber_file)) {
        1: 6169:            if (settings.inter == NULL) {
    #####: 6170:                vperror("failed to listen on TCP port %d", settings.port);
        -: 6171:            } else {
        1: 6172:                vperror("failed to listen on one of interface(s) %s", settings.inter);
        -: 6173:            }
        1: 6174:            exit(EX_OSERR);
        -: 6175:        }
        -: 6176:
        -: 6177:        /*
        -: 6178:         * initialization order: first create the listening sockets
        -: 6179:         * (may need root on low ports), then drop root if needed,
        -: 6180:         * then daemonize if needed, then init libevent (in some cases
        -: 6181:         * descriptors created by libevent wouldn't survive forking).
        -: 6182:         */
        -: 6183:
        -: 6184:        /* create the UDP listening socket and bind it */
       19: 6185:        errno = 0;
       19: 6186:        if (settings.udpport && server_sockets(settings.udpport, udp_transport,
        -: 6187:                                              portnumber_file)) {
    #####: 6188:            if (settings.inter == NULL) {
    #####: 6189:                vperror("failed to listen on UDP port %d", settings.udpport);
        -: 6190:            } else {
    #####: 6191:                vperror("failed to listen on one of interface(s) %s", settings.inter);
        -: 6192:            }
    #####: 6193:            exit(EX_OSERR);
        -: 6194:        }
        -: 6195:
       19: 6196:        if (portnumber_file) {
       13: 6197:            fclose(portnumber_file);
       13: 6198:            rename(temp_portnumber_filename, portnumber_filename);
        -: 6199:        }
       19: 6200:        if (temp_portnumber_filename)
       13: 6201:            free(temp_portnumber_filename);
        -: 6202:    }
        -: 6203:
        -: 6204:    /* Give the sockets a moment to open. I know this is dumb, but the error
        -: 6205:     * is only an advisory.
        -: 6206:     */
      115: 6207:    usleep(1000);
      115: 6208:    if (stats_state.curr_conns + stats_state.reserved_fds >= settings.maxconns - 1) {
    #####: 6209:        fprintf(stderr, "Maxconns setting is too low, use -c to increase.\n");
    #####: 6210:        exit(EXIT_FAILURE);
        -: 6211:    }
        -: 6212:
      115: 6213:    if (pid_file != NULL) {
        1: 6214:        save_pid(pid_file);
        -: 6215:    }
        -: 6216:
        -: 6217:    /* Drop privileges no longer needed */
      115: 6218:    if (settings.drop_privileges) {
      115: 6219:        drop_privileges();
        -: 6220:    }
        -: 6221:
        -: 6222:    /* Initialize the uriencode lookup table. */
      115: 6223:    uriencode_init();
        -: 6224:
        -: 6225:    /* enter the event loop */
     2656: 6226:    while (!stop_main_loop) {
     2541: 6227:        if (event_base_loop(main_base, EVLOOP_ONCE) != 0) {
        -: 6228:            retval = EXIT_FAILURE;
        -: 6229:            break;
        -: 6230:        }
        -: 6231:    }
        -: 6232:
      115: 6233:    switch (stop_main_loop) {
        2: 6234:        case GRACE_STOP:
        2: 6235:            fprintf(stderr, "Gracefully stopping\n");
        -: 6236:        break;
      113: 6237:        case EXIT_NORMALLY:
        -: 6238:            // Don't need to print anything to STDERR for a normal shutdown except
        -: 6239:            // if we want to.
        -: 6240:
      113: 6241:            if (settings.verbose) {
        3: 6242:                fprintf(stderr, "Exiting normally\n");
        -: 6243:            }
        -: 6244:
        -: 6245:        break;
    #####: 6246:        default:
    #####: 6247:            fprintf(stderr, "Exiting on error\n");
        -: 6248:        break;
        -: 6249:    }
        -: 6250:
      115: 6251:    if (stop_main_loop == GRACE_STOP) {
        2: 6252:        stop_threads();
        2: 6253:        if (settings.memory_file != NULL) {
        1: 6254:            restart_mmap_close();
        -: 6255:        }
        -: 6256:    }
        -: 6257:
        -: 6258:    /* remove the PID file if we're a daemon */
      115: 6259:    if (do_daemonize)
        1: 6260:        remove_pidfile(pid_file);
        -: 6261:    /* Clean up strdup() call for bind() address */
      115: 6262:    if (settings.inter)
        6: 6263:      free(settings.inter);
        -: 6264:
        -: 6265:    /* cleanup base */
      115: 6266:    event_base_free(main_base);
        -: 6267:
      115: 6268:    free(meta);
        -: 6269:
      115: 6270:    return retval;
        -: 6271:}
