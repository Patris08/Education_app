        -:    0:Source:proto_text.c
        -:    0:Graph:proto_text.gcno
        -:    0:Data:proto_text.gcda
        -:    0:Runs:414
        -:    1:/* -*- Mode: C; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*- */
        -:    2:/*
        -:    3: * Functions for handling the text related protocols, original and meta.
        -:    4: */
        -:    5:
        -:    6:#include "memcached.h"
        -:    7:#include "proto_text.h"
        -:    8:// FIXME: only for process_proxy_stats()
        -:    9:// - some better/different structure for stats subcommands
        -:   10:// would remove this abstraction leak.
        -:   11:#include "proto_proxy.h"
        -:   12:#include "authfile.h"
        -:   13:#include "storage.h"
        -:   14:#include "base64.h"
        -:   15:#ifdef TLS
        -:   16:#include "tls.h"
        -:   17:#endif
        -:   18:#include <string.h>
        -:   19:#include <stdlib.h>
        -:   20:
        -:   21:#define META_SPACE(p) { \
        -:   22:    *p = ' '; \
        -:   23:    p++; \
        -:   24:}
        -:   25:
        -:   26:#define META_CHAR(p, c) { \
        -:   27:    *p = ' '; \
        -:   28:    *(p+1) = c; \
        -:   29:    p += 2; \
        -:   30:}
        -:   31:
        -:   32:// NOTE: being a little casual with the write buffer.
        -:   33:// the buffer needs to be sized that the longest possible meta response will
        -:   34:// fit. Here we allow the key to fill up to half the write buffer, in case
        -:   35:// something terrible has gone wrong.
        -:   36:#define META_KEY(p, key, nkey, bin) { \
        -:   37:    META_CHAR(p, 'k'); \
        -:   38:    if (!bin) { \
        -:   39:        memcpy(p, key, nkey); \
        -:   40:        p += nkey; \
        -:   41:    } else { \
        -:   42:        p += base64_encode((unsigned char *) key, nkey, (unsigned char *)p, WRITE_BUFFER_SIZE / 2); \
        -:   43:        *p = ' '; \
        -:   44:        *(p+1) = 'b'; \
        -:   45:        p += 2; \
        -:   46:    } \
        -:   47:}
        -:   48:
        -:   49:typedef struct token_s {
        -:   50:    char *value;
        -:   51:    size_t length;
        -:   52:} token_t;
        -:   53:
       39:   54:static void _finalize_mset(conn *c, int nbytes, enum store_item_type ret) {
       39:   55:    mc_resp *resp = c->resp;
       39:   56:    item *it = c->item;
       39:   57:    conn_set_state(c, conn_new_cmd);
        -:   58:
        -:   59:    // information about the response line has been stashed in wbuf.
       39:   60:    char *p = resp->wbuf + resp->wbytes;
       39:   61:    char *end = p; // end of the stashed data portion.
        -:   62:
       39:   63:    switch (ret) {
        -:   64:    case STORED:
       32:   65:      memcpy(p, "HD", 2);
        -:   66:      // Only place noreply is used for meta cmds is a nominal response.
       32:   67:      if (c->noreply) {
        2:   68:          resp->skip = true;
        -:   69:      }
        -:   70:      break;
        -:   71:    case EXISTS:
        3:   72:      memcpy(p, "EX", 2);
        -:   73:      break;
        -:   74:    case NOT_FOUND:
    #####:   75:      memcpy(p, "NF", 2);
        -:   76:      break;
        -:   77:    case NOT_STORED:
        4:   78:      memcpy(p, "NS", 2);
        -:   79:      break;
    #####:   80:    default:
    #####:   81:      c->noreply = false;
    #####:   82:      out_string(c, "SERVER_ERROR Unhandled storage type.");
    #####:   83:      return;
        -:   84:    }
       39:   85:    p += 2;
        -:   86:
       55:   87:    for (char *fp = resp->wbuf; fp < end; fp++) {
       16:   88:        switch (*fp) {
        1:   89:            case 'O':
        -:   90:                // Copy stashed opaque.
        1:   91:                META_SPACE(p);
        6:   92:                while (fp < end && *fp != ' ') {
        5:   93:                    *p = *fp;
        5:   94:                    p++;
        5:   95:                    fp++;
        -:   96:                }
        -:   97:                break;
        1:   98:            case 'k':
        -:   99:                // Encode the key here instead of earlier to minimize copying.
       1*:  100:                META_KEY(p, ITEM_key(it), it->nkey, (it->it_flags & ITEM_KEY_BINARY));
        -:  101:                break;
        4:  102:            case 'c':
        -:  103:                // We don't have the CAS until this point, which is why we
        -:  104:                // generate this line so late.
        4:  105:                META_CHAR(p, 'c');
        4:  106:                p = itoa_u64(c->cas, p);
        4:  107:                break;
        2:  108:            case 's':
        -:  109:                // Get final item size, ie from append/prepend
        2:  110:                META_CHAR(p, 's');
        -:  111:                // If the size changed during append/prepend
        2:  112:                if (nbytes != 0) {
        1:  113:                    p = itoa_u32(nbytes-2, p);
        -:  114:                } else {
        1:  115:                    p = itoa_u32(it->nbytes-2, p);
        -:  116:                }
        -:  117:                break;
        -:  118:            default:
        -:  119:                break;
        -:  120:        }
        -:  121:    }
        -:  122:
       39:  123:    memcpy(p, "\r\n", 2);
       39:  124:    p += 2;
        -:  125:    // we're offset into wbuf, but good convention to track wbytes.
       39:  126:    resp->wbytes = p - resp->wbuf;
       39:  127:    resp_add_iov(resp, end, p - end);
        -:  128:}
        -:  129:
        -:  130:/*
        -:  131: * we get here after reading the value in set/add/replace commands. The command
        -:  132: * has been stored in c->cmd, and the item is ready in c->item.
        -:  133: */
   302916:  134:void complete_nread_ascii(conn *c) {
  302916*:  135:    assert(c != NULL);
        -:  136:
   302916:  137:    item *it = c->item;
   302916:  138:    int comm = c->cmd;
   302916:  139:    enum store_item_type ret;
   302916:  140:    bool is_valid = false;
   302916:  141:    int nbytes = 0;
        -:  142:
   302916:  143:    pthread_mutex_lock(&c->thread->stats.mutex);
   302916:  144:    c->thread->stats.slab_stats[ITEM_clsid(it)].set_cmds++;
   302916:  145:    pthread_mutex_unlock(&c->thread->stats.mutex);
        -:  146:
   302916:  147:    if ((it->it_flags & ITEM_CHUNKED) == 0) {
   295674:  148:        if (strncmp(ITEM_data(it) + it->nbytes - 2, "\r\n", 2) == 0) {
        -:  149:            is_valid = true;
        -:  150:        }
        -:  151:    } else {
     7242:  152:        char buf[2];
        -:  153:        /* should point to the final item chunk */
     7242:  154:        item_chunk *ch = (item_chunk *) c->ritem;
    7242*:  155:        assert(ch->used != 0);
        -:  156:        /* :( We need to look at the last two bytes. This could span two
        -:  157:         * chunks.
        -:  158:         */
     7242:  159:        if (ch->used > 1) {
     7242:  160:            buf[0] = ch->data[ch->used - 2];
     7242:  161:            buf[1] = ch->data[ch->used - 1];
        -:  162:        } else {
    #####:  163:            assert(ch->prev);
    #####:  164:            assert(ch->used == 1);
    #####:  165:            buf[0] = ch->prev->data[ch->prev->used - 1];
    #####:  166:            buf[1] = ch->data[ch->used - 1];
        -:  167:        }
     7242:  168:        if (strncmp(buf, "\r\n", 2) == 0) {
     7242:  169:            is_valid = true;
        -:  170:        } else {
    #####:  171:            assert(1 == 0);
        -:  172:        }
        -:  173:    }
        -:  174:
    7242*:  175:    if (!is_valid) {
        -:  176:        // metaset mode always returns errors.
    #####:  177:        if (c->mset_res) {
    #####:  178:            c->noreply = false;
        -:  179:        }
    #####:  180:        out_string(c, "CLIENT_ERROR bad data chunk");
        -:  181:    } else {
   302916:  182:      uint64_t cas = 0;
   302916:  183:      c->thread->cur_sfd = c->sfd; // cuddle sfd for logging.
   302916:  184:      ret = store_item(it, comm, c->thread, &nbytes, &cas, c->set_stale);
        -:  185:
        -:  186:#ifdef ENABLE_DTRACE
        -:  187:      switch (c->cmd) {
        -:  188:      case NREAD_ADD:
        -:  189:          MEMCACHED_COMMAND_ADD(c->sfd, ITEM_key(it), it->nkey,
        -:  190:                                (ret == 1) ? it->nbytes : -1, cas);
        -:  191:          break;
        -:  192:      case NREAD_REPLACE:
        -:  193:          MEMCACHED_COMMAND_REPLACE(c->sfd, ITEM_key(it), it->nkey,
        -:  194:                                    (ret == 1) ? it->nbytes : -1, cas);
        -:  195:          break;
        -:  196:      case NREAD_APPEND:
        -:  197:          MEMCACHED_COMMAND_APPEND(c->sfd, ITEM_key(it), it->nkey,
        -:  198:                                   (ret == 1) ? it->nbytes : -1, cas);
        -:  199:          break;
        -:  200:      case NREAD_PREPEND:
        -:  201:          MEMCACHED_COMMAND_PREPEND(c->sfd, ITEM_key(it), it->nkey,
        -:  202:                                    (ret == 1) ? it->nbytes : -1, cas);
        -:  203:          break;
        -:  204:      case NREAD_SET:
        -:  205:          MEMCACHED_COMMAND_SET(c->sfd, ITEM_key(it), it->nkey,
        -:  206:                                (ret == 1) ? it->nbytes : -1, cas);
        -:  207:          break;
        -:  208:      case NREAD_CAS:
        -:  209:          MEMCACHED_COMMAND_CAS(c->sfd, ITEM_key(it), it->nkey, it->nbytes,
        -:  210:                                cas);
        -:  211:          break;
        -:  212:      }
        -:  213:#endif
        -:  214:
   302916:  215:      if (c->mset_res) {
       39:  216:          c->cas = cas;
       39:  217:          _finalize_mset(c, nbytes, ret);
        -:  218:      } else {
   302877:  219:          switch (ret) {
   302239:  220:          case STORED:
   302239:  221:              out_string(c, "STORED");
   302239:  222:              break;
        5:  223:          case EXISTS:
        5:  224:              out_string(c, "EXISTS");
        5:  225:              break;
        2:  226:          case NOT_FOUND:
        2:  227:              out_string(c, "NOT_FOUND");
        2:  228:              break;
      631:  229:          case NOT_STORED:
      631:  230:              out_string(c, "NOT_STORED");
      631:  231:              break;
    #####:  232:          default:
    #####:  233:              out_string(c, "SERVER_ERROR Unhandled storage type.");
        -:  234:          }
        -:  235:      }
        -:  236:
        -:  237:    }
        -:  238:
   302916:  239:    c->set_stale = false; /* force flag to be off just in case */
   302916:  240:    c->mset_res = false;
   302916:  241:    item_remove(c->item);       /* release the c->item reference */
   302916:  242:    c->item = 0;
   302916:  243:}
        -:  244:
        -:  245:#define COMMAND_TOKEN 0
        -:  246:#define SUBCOMMAND_TOKEN 1
        -:  247:#define KEY_TOKEN 1
        -:  248:
        -:  249:#define MAX_TOKENS 24
        -:  250:
        -:  251:#define WANT_TOKENS(ntokens, min, max) \
        -:  252:    do { \
        -:  253:        if ((min != -1 && ntokens < min) || (max != -1 && ntokens > max)) { \
        -:  254:            out_string(c, "ERROR"); \
        -:  255:            return; \
        -:  256:        } \
        -:  257:    } while (0)
        -:  258:
        -:  259:#define WANT_TOKENS_OR(ntokens, a, b) \
        -:  260:    do { \
        -:  261:        if (ntokens != a && ntokens != b) { \
        -:  262:            out_string(c, "ERROR"); \
        -:  263:            return; \
        -:  264:        } \
        -:  265:    } while (0)
        -:  266:
        -:  267:#define WANT_TOKENS_MIN(ntokens, min) \
        -:  268:    do { \
        -:  269:        if (ntokens < min) { \
        -:  270:            out_string(c, "ERROR"); \
        -:  271:            return; \
        -:  272:        } \
        -:  273:    } while (0)
        -:  274:
        -:  275:/*
        -:  276: * Tokenize the command string by replacing whitespace with '\0' and update
        -:  277: * the token array tokens with pointer to start of each token and length.
        -:  278: * Returns total number of tokens.  The last valid token is the terminal
        -:  279: * token (value points to the first unprocessed character of the string and
        -:  280: * length zero).
        -:  281: *
        -:  282: * Usage example:
        -:  283: *
        -:  284: *  while(tokenize_command(command, ncommand, tokens, max_tokens) > 0) {
        -:  285: *      for(int ix = 0; tokens[ix].length != 0; ix++) {
        -:  286: *          ...
        -:  287: *      }
        -:  288: *      ncommand = tokens[ix].value - command;
        -:  289: *      command  = tokens[ix].value;
        -:  290: *   }
        -:  291: */
   566683:  292:static size_t tokenize_command(char *command, token_t *tokens, const size_t max_tokens) {
   566683:  293:    char *s, *e;
   566683:  294:    size_t ntokens = 0;
  566683*:  295:    assert(command != NULL && tokens != NULL && max_tokens > 1);
   566683:  296:    size_t len = strlen(command);
   566683:  297:    unsigned int i = 0;
        -:  298:
   566683:  299:    s = e = command;
 28439518:  300:    for (i = 0; i < len; i++) {
 27873680:  301:        if (*e == ' ') {
  1657259:  302:            if (s != e) {
  1657245:  303:                tokens[ntokens].value = s;
  1657245:  304:                tokens[ntokens].length = e - s;
  1657245:  305:                ntokens++;
  1657245:  306:                *e = '\0';
  1657245:  307:                if (ntokens == max_tokens - 1) {
      845:  308:                    e++;
      845:  309:                    s = e; /* so we don't add an extra token */
      845:  310:                    break;
        -:  311:                }
        -:  312:            }
  1656414:  313:            s = e + 1;
        -:  314:        }
 27872835:  315:        e++;
        -:  316:    }
        -:  317:
   566683:  318:    if (s != e) {
   565833:  319:        tokens[ntokens].value = s;
   565833:  320:        tokens[ntokens].length = e - s;
   565833:  321:        ntokens++;
        -:  322:    }
        -:  323:
        -:  324:    /*
        -:  325:     * If we scanned the whole string, the terminal value pointer is null,
        -:  326:     * otherwise it is the first unprocessed character.
        -:  327:     */
   566683:  328:    tokens[ntokens].value =  *e == '\0' ? NULL : e;
   566683:  329:    tokens[ntokens].length = 0;
   566683:  330:    ntokens++;
        -:  331:
   566683:  332:    return ntokens;
        -:  333:}
        -:  334:
        5:  335:int try_read_command_asciiauth(conn *c) {
        5:  336:    token_t tokens[MAX_TOKENS];
        5:  337:    size_t ntokens;
        5:  338:    char *cont = NULL;
        -:  339:
        -:  340:    // TODO: move to another function.
        5:  341:    if (!c->sasl_started) {
        5:  342:        char *el;
        5:  343:        uint32_t size = 0;
        -:  344:
        -:  345:        // impossible for the auth command to be this short.
        5:  346:        if (c->rbytes < 2)
        1:  347:            return 0;
        -:  348:
        5:  349:        el = memchr(c->rcurr, '\n', c->rbytes);
        -:  350:
        -:  351:        // If no newline after 1k, getting junk data, close out.
        5:  352:        if (!el) {
    #####:  353:            if (c->rbytes > 2048) {
    #####:  354:                conn_set_state(c, conn_closing);
    #####:  355:                return 1;
        -:  356:            }
        -:  357:            return 0;
        -:  358:        }
        -:  359:
        -:  360:        // Looking for: "set foo 0 0 N\r\nuser pass\r\n"
        -:  361:        // key, flags, and ttl are ignored. N is used to see if we have the rest.
        -:  362:
        -:  363:        // so tokenize doesn't walk past into the value.
        -:  364:        // it's fine to leave the \r in, as strtoul will stop at it.
        5:  365:        *el = '\0';
        -:  366:
        5:  367:        ntokens = tokenize_command(c->rcurr, tokens, MAX_TOKENS);
        -:  368:        // ensure the buffer is consumed.
        5:  369:        c->rbytes -= (el - c->rcurr) + 1;
        5:  370:        c->rcurr += (el - c->rcurr) + 1;
        -:  371:
        -:  372:        // final token is a NULL ender, so we have one more than expected.
        5:  373:        if (ntokens < 6
        4:  374:                || strcmp(tokens[0].value, "set") != 0
        4:  375:                || !safe_strtoul(tokens[4].value, &size)) {
        1:  376:            if (!c->resp) {
        1:  377:                if (!resp_start(c)) {
    #####:  378:                    conn_set_state(c, conn_closing);
    #####:  379:                    return 1;
        -:  380:                }
        -:  381:            }
        1:  382:            out_string(c, "CLIENT_ERROR unauthenticated");
        1:  383:            return 1;
        -:  384:        }
        -:  385:
        -:  386:        // we don't actually care about the key at all; it can be anything.
        -:  387:        // we do care about the size of the remaining read.
        4:  388:        c->rlbytes = size + 2;
        -:  389:
        4:  390:        c->sasl_started = true; // reuse from binprot sasl, but not sasl :)
        -:  391:    }
        -:  392:
        4:  393:    if (c->rbytes < c->rlbytes) {
        -:  394:        // need more bytes.
        -:  395:        return 0;
        -:  396:    }
        -:  397:
        -:  398:    // Going to respond at this point, so attach a response object.
        4:  399:    if (!c->resp) {
        4:  400:        if (!resp_start(c)) {
    #####:  401:            conn_set_state(c, conn_closing);
    #####:  402:            return 1;
        -:  403:        }
        -:  404:    }
        -:  405:
        4:  406:    cont = c->rcurr;
        -:  407:    // advance buffer. no matter what we're stopping.
        4:  408:    c->rbytes -= c->rlbytes;
        4:  409:    c->rcurr += c->rlbytes;
        4:  410:    c->sasl_started = false;
        -:  411:
        -:  412:    // must end with \r\n
        -:  413:    // NB: I thought ASCII sets also worked with just \n, but according to
        -:  414:    // complete_nread_ascii only \r\n is valid.
        4:  415:    if (strncmp(cont + c->rlbytes - 2, "\r\n", 2) != 0) {
    #####:  416:        out_string(c, "CLIENT_ERROR bad command line termination");
    #####:  417:        return 1;
        -:  418:    }
        -:  419:
        -:  420:    // payload should be "user pass", so we can use the tokenizer.
        4:  421:    cont[c->rlbytes - 2] = '\0';
        4:  422:    ntokens = tokenize_command(cont, tokens, MAX_TOKENS);
        -:  423:
        4:  424:    if (ntokens < 3) {
        1:  425:        out_string(c, "CLIENT_ERROR bad authentication token format");
        1:  426:        return 1;
        -:  427:    }
        -:  428:
        3:  429:    if (authfile_check(tokens[0].value, tokens[1].value) == 1) {
        2:  430:        out_string(c, "STORED");
        2:  431:        c->authenticated = true;
        2:  432:        c->try_read_command = try_read_command_ascii;
        2:  433:        pthread_mutex_lock(&c->thread->stats.mutex);
        2:  434:        c->thread->stats.auth_cmds++;
        2:  435:        pthread_mutex_unlock(&c->thread->stats.mutex);
        -:  436:    } else {
        1:  437:        out_string(c, "CLIENT_ERROR authentication failure");
        1:  438:        pthread_mutex_lock(&c->thread->stats.mutex);
        1:  439:        c->thread->stats.auth_cmds++;
        1:  440:        c->thread->stats.auth_errors++;
        1:  441:        pthread_mutex_unlock(&c->thread->stats.mutex);
        -:  442:    }
        -:  443:
        -:  444:    return 1;
        -:  445:}
        -:  446:
   566303:  447:int try_read_command_ascii(conn *c) {
   566303:  448:    char *el, *cont;
        -:  449:
   566303:  450:    if (c->rbytes == 0)
        -:  451:        return 0;
        -:  452:
   566303:  453:    el = memchr(c->rcurr, '\n', c->rbytes);
   566303:  454:    if (!el) {
      472:  455:        if (c->rbytes > 2048) {
        -:  456:            /*
        -:  457:             * We didn't have a '\n' in the first few k. This _has_ to be a
        -:  458:             * large multiget, if not we should just nuke the connection.
        -:  459:             */
        -:  460:            char *ptr = c->rcurr;
     4201:  461:            while (*ptr == ' ') { /* ignore leading whitespaces */
     4196:  462:                ++ptr;
        -:  463:            }
        -:  464:
        5:  465:            if (ptr - c->rcurr > 100 ||
        3:  466:                (strncmp(ptr, "get ", 4) && strncmp(ptr, "gets ", 5))) {
        -:  467:
        2:  468:                conn_set_state(c, conn_closing);
        2:  469:                return 1;
        -:  470:            }
        -:  471:
        -:  472:            // ASCII multigets are unbound, so our fixed size rbuf may not
        -:  473:            // work for this particular workload... For backcompat we'll use a
        -:  474:            // malloc/realloc/free routine just for this.
        3:  475:            if (!c->rbuf_malloced) {
        3:  476:                if (!rbuf_switch_to_malloc(c)) {
    #####:  477:                    conn_set_state(c, conn_closing);
    #####:  478:                    return 1;
        -:  479:                }
        -:  480:            }
        -:  481:        }
        -:  482:
      470:  483:        return 0;
        -:  484:    }
   565831:  485:    cont = el + 1;
   565831:  486:    if ((el - c->rcurr) > 1 && *(el - 1) == '\r') {
   485810:  487:        el--;
        -:  488:    }
   565831:  489:    *el = '\0';
        -:  490:
  565831*:  491:    assert(cont <= (c->rcurr + c->rbytes));
        -:  492:
   565831:  493:    c->last_cmd_time = current_time;
   565831:  494:    process_command_ascii(c, c->rcurr);
        -:  495:
   565831:  496:    c->rbytes -= (cont - c->rcurr);
   565831:  497:    c->rcurr = cont;
        -:  498:
  565831*:  499:    assert(c->rcurr <= (c->rbuf + c->rsize));
        -:  500:
        -:  501:    return 1;
        -:  502:}
        -:  503:
        -:  504:
   315071:  505:static inline bool set_noreply_maybe(conn *c, token_t *tokens, size_t ntokens)
        -:  506:{
   315071:  507:    int noreply_index = ntokens - 2;
        -:  508:
        -:  509:    /*
        -:  510:      NOTE: this function is not the first place where we are going to
        -:  511:      send the reply.  We could send it instead from process_command()
        -:  512:      if the request line has wrong number of tokens.  However parsing
        -:  513:      malformed line for "noreply" option is not reliable anyway, so
        -:  514:      it can't be helped.
        -:  515:    */
   315071:  516:    if (tokens[noreply_index].value
   315071:  517:        && strcmp(tokens[noreply_index].value, "noreply") == 0) {
   164201:  518:        c->noreply = true;
        -:  519:    }
   315071:  520:    return c->noreply;
        -:  521:}
        -:  522:
        -:  523:/* client flags == 0 means use no storage for client flags */
    50553:  524:static inline int make_ascii_get_suffix(char *suffix, item *it, bool return_cas, int nbytes) {
    50553:  525:    char *p = suffix;
    50553:  526:    *p = ' ';
    50553:  527:    p++;
    50553:  528:    if (FLAGS_SIZE(it) == 0) {
    50549:  529:        *p = '0';
    50549:  530:        p++;
        -:  531:    } else {
        4:  532:        p = itoa_u32(*((uint32_t *) ITEM_suffix(it)), p);
        -:  533:    }
    50553:  534:    *p = ' ';
    50553:  535:    p = itoa_u32(nbytes-2, p+1);
        -:  536:
    50553:  537:    if (return_cas) {
       19:  538:        *p = ' ';
       19:  539:        p = itoa_u64(ITEM_get_cas(it), p+1);
        -:  540:    }
        -:  541:
    50553:  542:    *p = '\r';
    50553:  543:    *(p+1) = '\n';
    50553:  544:    *(p+2) = '\0';
    50553:  545:    return (p - suffix) + 2;
        -:  546:}
        -:  547:
        -:  548:/* ntokens is overwritten here... shrug.. */
   112690:  549:static inline void process_get_command(conn *c, token_t *tokens, size_t ntokens, bool return_cas, bool should_touch) {
   112690:  550:    char *key;
   112690:  551:    size_t nkey;
   112690:  552:    item *it;
   112690:  553:    token_t *key_token = &tokens[KEY_TOKEN];
   112690:  554:    int32_t exptime_int = 0;
   112690:  555:    rel_time_t exptime = 0;
   112690:  556:    bool fail_length = false;
  112690*:  557:    assert(c != NULL);
   112690:  558:    mc_resp *resp = c->resp;
        -:  559:
   112690:  560:    if (should_touch) {
        -:  561:        // For get and touch commands, use first token as exptime
        6:  562:        if (!safe_strtol(tokens[1].value, &exptime_int)) {
    #####:  563:            out_string(c, "CLIENT_ERROR invalid exptime argument");
    #####:  564:            return;
        -:  565:        }
        6:  566:        key_token++;
       11:  567:        exptime = realtime(EXPTIME_TO_POSITIVE_TIME(exptime_int));
        -:  568:    }
        -:  569:
        -:  570:    do {
   245690:  571:        while(key_token->length != 0) {
   132160:  572:            bool overflow; // not used here.
   132160:  573:            key = key_token->value;
   132160:  574:            nkey = key_token->length;
        -:  575:
   132160:  576:            if (nkey > KEY_MAX_LENGTH) {
        2:  577:                fail_length = true;
        4:  578:                goto stop;
        -:  579:            }
        -:  580:
   132158:  581:            it = limited_get(key, nkey, c->thread, exptime, should_touch, DO_UPDATE, &overflow);
   132158:  582:            if (settings.detail_enabled) {
        3:  583:                stats_prefix_record_get(key, nkey, NULL != it);
        -:  584:            }
   132158:  585:            if (it) {
        -:  586:                /*
        -:  587:                 * Construct the response. Each hit adds three elements to the
        -:  588:                 * outgoing data list:
        -:  589:                 *   "VALUE "
        -:  590:                 *   key
        -:  591:                 *   " " + flags + " " + data length + "\r\n" + data (with \r\n)
        -:  592:                 */
        -:  593:
        -:  594:                {
        -:  595:                  MEMCACHED_COMMAND_GET(c->sfd, ITEM_key(it), it->nkey,
    50553:  596:                                        it->nbytes, ITEM_get_cas(it));
    50553:  597:                  int nbytes = it->nbytes;
    50553:  598:                  char *p = resp->wbuf;
    50553:  599:                  memcpy(p, "VALUE ", 6);
    50553:  600:                  p += 6;
    50553:  601:                  memcpy(p, ITEM_key(it), it->nkey);
    50553:  602:                  p += it->nkey;
    50553:  603:                  p += make_ascii_get_suffix(p, it, return_cas, nbytes);
    50553:  604:                  resp_add_iov(resp, resp->wbuf, p - resp->wbuf);
        -:  605:
        -:  606:#ifdef EXTSTORE
    50553:  607:                  if (it->it_flags & ITEM_HDR) {
      354:  608:                      if (storage_get_item(c, it, resp) != 0) {
        1:  609:                          pthread_mutex_lock(&c->thread->stats.mutex);
        1:  610:                          c->thread->stats.get_oom_extstore++;
        1:  611:                          pthread_mutex_unlock(&c->thread->stats.mutex);
        -:  612:
        1:  613:                          item_remove(it);
        1:  614:                          goto stop;
        -:  615:                      }
    50199:  616:                  } else if ((it->it_flags & ITEM_CHUNKED) == 0) {
    31779:  617:                      resp_add_iov(resp, ITEM_data(it), it->nbytes);
        -:  618:                  } else {
    18420:  619:                      resp_add_chunked_iov(resp, it, it->nbytes);
        -:  620:                  }
        -:  621:#else
        -:  622:                  if ((it->it_flags & ITEM_CHUNKED) == 0) {
        -:  623:                      resp_add_iov(resp, ITEM_data(it), it->nbytes);
        -:  624:                  } else {
        -:  625:                      resp_add_chunked_iov(resp, it, it->nbytes);
        -:  626:                  }
        -:  627:#endif
        -:  628:                }
        -:  629:
    50552:  630:                if (settings.verbose > 1) {
    #####:  631:                    int ii;
    #####:  632:                    fprintf(stderr, ">%d sending key ", c->sfd);
    #####:  633:                    for (ii = 0; ii < it->nkey; ++ii) {
    #####:  634:                        fprintf(stderr, "%c", key[ii]);
        -:  635:                    }
    #####:  636:                    fprintf(stderr, "\n");
        -:  637:                }
        -:  638:
        -:  639:                /* item_get() has incremented it->refcount for us */
    50552:  640:                pthread_mutex_lock(&c->thread->stats.mutex);
    50552:  641:                if (should_touch) {
        7:  642:                    c->thread->stats.touch_cmds++;
        7:  643:                    c->thread->stats.slab_stats[ITEM_clsid(it)].touch_hits++;
        -:  644:                } else {
    50545:  645:                    c->thread->stats.lru_hits[it->slabs_clsid]++;
    50545:  646:                    c->thread->stats.get_cmds++;
        -:  647:                }
    50552:  648:                pthread_mutex_unlock(&c->thread->stats.mutex);
        -:  649:#ifdef EXTSTORE
        -:  650:                /* If ITEM_HDR, an io_wrap owns the reference. */
    50552:  651:                if ((it->it_flags & ITEM_HDR) == 0) {
    50199:  652:                    resp->item = it;
        -:  653:                }
        -:  654:#else
        -:  655:                resp->item = it;
        -:  656:#endif
        -:  657:            } else {
    81605:  658:                pthread_mutex_lock(&c->thread->stats.mutex);
    81605:  659:                if (should_touch) {
        1:  660:                    c->thread->stats.touch_cmds++;
        1:  661:                    c->thread->stats.touch_misses++;
        -:  662:                } else {
    81604:  663:                    c->thread->stats.get_misses++;
    81604:  664:                    c->thread->stats.get_cmds++;
        -:  665:                }
    81605:  666:                MEMCACHED_COMMAND_GET(c->sfd, key, nkey, -1, 0);
    81605:  667:                pthread_mutex_unlock(&c->thread->stats.mutex);
        -:  668:            }
        -:  669:
   132157:  670:            key_token++;
   132157:  671:            if (key_token->length != 0) {
    18627:  672:                if (!resp_start(c)) {
        1:  673:                    goto stop;
        -:  674:                }
    18626:  675:                resp = c->resp;
        -:  676:            }
        -:  677:        }
        -:  678:
        -:  679:        /*
        -:  680:         * If the command string hasn't been fully processed, get the next set
        -:  681:         * of tokens.
        -:  682:         */
   113530:  683:        if (key_token->value != NULL) {
      844:  684:            ntokens = tokenize_command(key_token->value, tokens, MAX_TOKENS);
      844:  685:            key_token = tokens;
      844:  686:            if (!resp_start(c)) {
    #####:  687:                goto stop;
        -:  688:            }
      844:  689:            resp = c->resp;
        -:  690:        }
   113530:  691:    } while(key_token->value != NULL);
   112686:  692:stop:
        -:  693:
   112690:  694:    if (settings.verbose > 1)
    #####:  695:        fprintf(stderr, ">%d END\n", c->sfd);
        -:  696:
        -:  697:    /*
        -:  698:        If the loop was terminated because of out-of-memory, it is not
        -:  699:        reliable to add END\r\n to the buffer, because it might not end
        -:  700:        in \r\n. So we send SERVER_ERROR instead.
        -:  701:    */
   112690:  702:    if (key_token->value != NULL) {
        -:  703:        // Kill any stacked responses we had.
        4:  704:        conn_release_items(c);
        -:  705:        // Start a new response object for the error message.
        4:  706:        if (!resp_start(c)) {
        -:  707:            // severe out of memory error.
    #####:  708:            conn_set_state(c, conn_closing);
    #####:  709:            return;
        -:  710:        }
        4:  711:        if (fail_length) {
        2:  712:            out_string(c, "CLIENT_ERROR bad command line format");
        -:  713:        } else {
        2:  714:            out_of_memory(c, "SERVER_ERROR out of memory writing get response");
        -:  715:        }
        -:  716:    } else {
        -:  717:        // Tag the end token onto the most recent response object.
   112686:  718:        resp_add_iov(resp, "END\r\n", 5);
   112686:  719:        conn_set_state(c, conn_mwrite);
        -:  720:    }
        -:  721:}
        -:  722:
       10:  723:inline static void process_stats_detail(conn *c, const char *command) {
      10*:  724:    assert(c != NULL);
        -:  725:
       10:  726:    if (strcmp(command, "on") == 0) {
        1:  727:        settings.detail_enabled = 1;
        1:  728:        out_string(c, "OK");
        -:  729:    }
        9:  730:    else if (strcmp(command, "off") == 0) {
        1:  731:        settings.detail_enabled = 0;
        1:  732:        out_string(c, "OK");
        -:  733:    }
        8:  734:    else if (strcmp(command, "dump") == 0) {
        8:  735:        int len;
        8:  736:        char *stats = stats_prefix_dump(&len);
        8:  737:        write_and_free(c, stats, len);
        -:  738:    }
        -:  739:    else {
    #####:  740:        out_string(c, "CLIENT_ERROR usage: stats detail on|off|dump");
        -:  741:    }
       10:  742:}
        -:  743:
     5340:  744:static void process_stat(conn *c, token_t *tokens, const size_t ntokens) {
     5340:  745:    const char *subcommand = tokens[SUBCOMMAND_TOKEN].value;
    5340*:  746:    assert(c != NULL);
        -:  747:
     5340:  748:    if (ntokens < 2) {
    #####:  749:        out_string(c, "CLIENT_ERROR bad command line");
    #####:  750:        return;
        -:  751:    }
        -:  752:
     5340:  753:    if (ntokens == 2) {
     3742:  754:        server_stats(&append_stats, c);
     3742:  755:        (void)get_stats(NULL, 0, &append_stats, c);
     1598:  756:    } else if (strcmp(subcommand, "reset") == 0) {
        3:  757:        stats_reset();
        3:  758:        out_string(c, "RESET");
        3:  759:        return;
     1595:  760:    } else if (strcmp(subcommand, "detail") == 0) {
        -:  761:        /* NOTE: how to tackle detail with binary? */
       10:  762:        if (ntokens < 4)
    #####:  763:            process_stats_detail(c, "");  /* outputs the error message */
        -:  764:        else
       10:  765:            process_stats_detail(c, tokens[2].value);
        -:  766:        /* Output already generated */
       10:  767:        return;
     1585:  768:    } else if (strcmp(subcommand, "settings") == 0) {
       18:  769:        process_stat_settings(&append_stats, c);
     1567:  770:    } else if (strcmp(subcommand, "cachedump") == 0) {
        3:  771:        char *buf;
        3:  772:        unsigned int bytes, id, limit = 0;
        -:  773:
        3:  774:        if (!settings.dump_enabled) {
    #####:  775:            out_string(c, "CLIENT_ERROR stats cachedump not allowed");
    #####:  776:            return;
        -:  777:        }
        -:  778:
        3:  779:        if (ntokens < 5) {
    #####:  780:            out_string(c, "CLIENT_ERROR bad command line");
    #####:  781:            return;
        -:  782:        }
        -:  783:
        6:  784:        if (!safe_strtoul(tokens[2].value, &id) ||
        3:  785:            !safe_strtoul(tokens[3].value, &limit)) {
    #####:  786:            out_string(c, "CLIENT_ERROR bad command line format");
    #####:  787:            return;
        -:  788:        }
        -:  789:
        3:  790:        if (id >= MAX_NUMBER_OF_SLAB_CLASSES) {
        1:  791:            out_string(c, "CLIENT_ERROR Illegal slab id");
        1:  792:            return;
        -:  793:        }
        -:  794:
        2:  795:        buf = item_cachedump(id, limit, &bytes);
        2:  796:        write_and_free(c, buf, bytes);
        2:  797:        return;
     1564:  798:    } else if (strcmp(subcommand, "conns") == 0) {
        4:  799:        process_stats_conns(&append_stats, c);
        -:  800:#ifdef EXTSTORE
     1560:  801:    } else if (strcmp(subcommand, "extstore") == 0) {
    #####:  802:        process_extstore_stats(&append_stats, c);
        -:  803:#endif
        -:  804:#ifdef PROXY
        -:  805:    } else if (strcmp(subcommand, "proxy") == 0) {
        -:  806:        process_proxy_stats(settings.proxy_ctx, &append_stats, c);
        -:  807:#endif
        -:  808:    } else {
        -:  809:        /* getting here means that the subcommand is either engine specific or
        -:  810:           is invalid. query the engine and see. */
     1560:  811:        if (get_stats(subcommand, strlen(subcommand), &append_stats, c)) {
     1560:  812:            if (c->stats.buffer == NULL) {
    #####:  813:                out_of_memory(c, "SERVER_ERROR out of memory writing stats");
        -:  814:            } else {
     1560:  815:                write_and_free(c, c->stats.buffer, c->stats.offset);
     1560:  816:                c->stats.buffer = NULL;
        -:  817:            }
        -:  818:        } else {
    #####:  819:            out_string(c, "ERROR");
        -:  820:        }
     1560:  821:        return;
        -:  822:    }
        -:  823:
        -:  824:    /* append terminator and start the transfer */
     3764:  825:    append_stats(NULL, 0, NULL, 0, c);
        -:  826:
     3764:  827:    if (c->stats.buffer == NULL) {
    #####:  828:        out_of_memory(c, "SERVER_ERROR out of memory writing stats");
        -:  829:    } else {
     3764:  830:        write_and_free(c, c->stats.buffer, c->stats.offset);
     3764:  831:        c->stats.buffer = NULL;
        -:  832:    }
        -:  833:}
        -:  834:
        -:  835:// slow snprintf for debugging purposes.
        2:  836:static void process_meta_command(conn *c, token_t *tokens, const size_t ntokens) {
       2*:  837:    assert(c != NULL);
        -:  838:
        2:  839:    if (ntokens < 3 || tokens[KEY_TOKEN].length > KEY_MAX_LENGTH) {
    #####:  840:        out_string(c, "CLIENT_ERROR bad command line format");
    #####:  841:        return;
        -:  842:    }
        -:  843:
        2:  844:    char *key = tokens[KEY_TOKEN].value;
        2:  845:    size_t nkey = tokens[KEY_TOKEN].length;
        -:  846:
       2*:  847:    if (ntokens >= 4 && tokens[2].length == 1 && tokens[2].value[0] == 'b') {
    #####:  848:        size_t ret = base64_decode((unsigned char *)key, nkey,
        -:  849:                    (unsigned char *)key, nkey);
    #####:  850:        if (ret == 0) {
        -:  851:            // failed to decode.
    #####:  852:            out_string(c, "CLIENT_ERROR bad command line format");
    #####:  853:            return;
        -:  854:        }
        -:  855:        nkey = ret;
        -:  856:    }
        -:  857:
        2:  858:    bool overflow; // not used here.
        2:  859:    item *it = limited_get(key, nkey, c->thread, 0, false, DONT_UPDATE, &overflow);
        2:  860:    if (it) {
        1:  861:        mc_resp *resp = c->resp;
        1:  862:        size_t total = 0;
        1:  863:        size_t ret;
        -:  864:        // similar to out_string().
        1:  865:        memcpy(resp->wbuf, "ME ", 3);
        1:  866:        total += 3;
        1:  867:        if (it->it_flags & ITEM_KEY_BINARY) {
        -:  868:            // re-encode from memory rather than copy the original key;
        -:  869:            // to help give confidence that what in memory is what we asked
        -:  870:            // for.
    #####:  871:            total += base64_encode((unsigned char *) ITEM_key(it), it->nkey, (unsigned char *)resp->wbuf + total, WRITE_BUFFER_SIZE - total);
        -:  872:        } else {
        1:  873:            memcpy(resp->wbuf + total, ITEM_key(it), it->nkey);
        1:  874:            total += it->nkey;
        -:  875:        }
        1:  876:        resp->wbuf[total] = ' ';
        1:  877:        total++;
        -:  878:
       2*:  879:        ret = snprintf(resp->wbuf + total, WRITE_BUFFER_SIZE - (it->nkey + 12),
        -:  880:                "exp=%d la=%llu cas=%llu fetch=%s cls=%u size=%lu\r\n",
    #####:  881:                (it->exptime == 0) ? -1 : (current_time - it->exptime),
        1:  882:                (unsigned long long)(current_time - it->time),
        -:  883:                (unsigned long long)ITEM_get_cas(it),
        -:  884:                (it->it_flags & ITEM_FETCHED) ? "yes" : "no",
        1:  885:                ITEM_clsid(it),
        1:  886:                (unsigned long) ITEM_ntotal(it));
        -:  887:
        1:  888:        item_remove(it);
        1:  889:        resp->wbytes = total + ret;
        1:  890:        resp_add_iov(resp, resp->wbuf, resp->wbytes);
        1:  891:        conn_set_state(c, conn_new_cmd);
        -:  892:    } else {
        1:  893:        out_string(c, "EN");
        -:  894:    }
        2:  895:    pthread_mutex_lock(&c->thread->stats.mutex);
        2:  896:    c->thread->stats.meta_cmds++;
        2:  897:    pthread_mutex_unlock(&c->thread->stats.mutex);
        -:  898:}
        -:  899:
        -:  900:#define MFLAG_MAX_OPT_LENGTH 20
        -:  901:#define MFLAG_MAX_OPAQUE_LENGTH 32
        -:  902:
        -:  903:struct _meta_flags {
        -:  904:    unsigned int has_error :1; // flipped if we found an error during parsing.
        -:  905:    unsigned int no_update :1;
        -:  906:    unsigned int locked :1;
        -:  907:    unsigned int vivify :1;
        -:  908:    unsigned int la :1;
        -:  909:    unsigned int hit :1;
        -:  910:    unsigned int value :1;
        -:  911:    unsigned int set_stale :1;
        -:  912:    unsigned int no_reply :1;
        -:  913:    unsigned int has_cas :1;
        -:  914:    unsigned int new_ttl :1;
        -:  915:    unsigned int key_binary:1;
        -:  916:    char mode; // single character mode switch, common to ms/ma
        -:  917:    rel_time_t exptime;
        -:  918:    rel_time_t autoviv_exptime;
        -:  919:    rel_time_t recache_time;
        -:  920:    uint32_t client_flags;
        -:  921:    uint64_t req_cas_id;
        -:  922:    uint64_t delta; // ma
        -:  923:    uint64_t initial; // ma
        -:  924:};
        -:  925:
     1374:  926:static int _meta_flag_preparse(token_t *tokens, const size_t start,
        -:  927:        struct _meta_flags *of, char **errstr) {
     1374:  928:    unsigned int i;
     1374:  929:    size_t ret;
     1374:  930:    int32_t tmp_int;
     1374:  931:    uint8_t seen[127] = {0};
        -:  932:    // Start just past the key token. Look at first character of each token.
     1625:  933:    for (i = start; tokens[i].length != 0; i++) {
      252:  934:        uint8_t o = (uint8_t)tokens[i].value[0];
        -:  935:        // zero out repeat flags so we don't over-parse for return data.
      252:  936:        if (o >= 127 || seen[o] != 0) {
    #####:  937:            *errstr = "CLIENT_ERROR duplicate flag";
    #####:  938:            return -1;
        -:  939:        }
      252:  940:        seen[o] = 1;
      252:  941:        switch (o) {
        -:  942:            // base64 decode the key in-place, as the binary should always be
        -:  943:            // shorter and the conversion code buffers bytes.
        2:  944:            case 'b':
        4:  945:                ret = base64_decode((unsigned char *)tokens[KEY_TOKEN].value, tokens[KEY_TOKEN].length,
        2:  946:                            (unsigned char *)tokens[KEY_TOKEN].value, tokens[KEY_TOKEN].length);
        2:  947:                if (ret == 0) {
        -:  948:                    // Failed to decode
    #####:  949:                    *errstr = "CLIENT_ERROR error decoding key";
    #####:  950:                    of->has_error = 1;
        -:  951:                }
        2:  952:                tokens[KEY_TOKEN].length = ret;
        2:  953:                of->key_binary = 1;
        2:  954:                break;
        -:  955:            /* Negative exptimes can underflow and end up immortal. realtime() will
        -:  956:               immediately expire values that are greater than REALTIME_MAXDELTA, but less
        -:  957:               than process_started, so lets aim for that. */
       18:  958:            case 'N':
       18:  959:                of->locked = 1;
       18:  960:                of->vivify = 1;
       18:  961:                if (!safe_strtol(tokens[i].value+1, &tmp_int)) {
    #####:  962:                    *errstr = "CLIENT_ERROR bad token in command line format";
    #####:  963:                    of->has_error = 1;
        -:  964:                } else {
       36:  965:                    of->autoviv_exptime = realtime(EXPTIME_TO_POSITIVE_TIME(tmp_int));
        -:  966:                }
        -:  967:                break;
       29:  968:            case 'T':
       29:  969:                of->locked = 1;
       29:  970:                if (!safe_strtol(tokens[i].value+1, &tmp_int)) {
    #####:  971:                    *errstr = "CLIENT_ERROR bad token in command line format";
    #####:  972:                    of->has_error = 1;
        -:  973:                } else {
       58:  974:                    of->exptime = realtime(EXPTIME_TO_POSITIVE_TIME(tmp_int));
       29:  975:                    of->new_ttl = true;
        -:  976:                }
        -:  977:                break;
        2:  978:            case 'R':
        2:  979:                of->locked = 1;
        2:  980:                if (!safe_strtol(tokens[i].value+1, &tmp_int)) {
    #####:  981:                    *errstr = "CLIENT_ERROR bad token in command line format";
    #####:  982:                    of->has_error = 1;
        -:  983:                } else {
        4:  984:                    of->recache_time = realtime(EXPTIME_TO_POSITIVE_TIME(tmp_int));
        -:  985:                }
        -:  986:                break;
        1:  987:            case 'l':
        1:  988:                of->la = 1;
        1:  989:                of->locked = 1; // need locked to delay LRU bump
        1:  990:                break;
        -:  991:            case 'O':
        -:  992:            case 'P':
        -:  993:            case 'L':
        -:  994:                break;
        -:  995:            case 'k': // known but no special handling
        -:  996:            case 's':
        -:  997:            case 't':
        -:  998:            case 'c':
        -:  999:            case 'f':
        -: 1000:                break;
       53: 1001:            case 'v':
       53: 1002:                of->value = 1;
       53: 1003:                break;
        5: 1004:            case 'h':
        5: 1005:                of->locked = 1; // need locked to delay LRU bump
        5: 1006:                break;
        2: 1007:            case 'u':
        2: 1008:                of->no_update = 1;
        2: 1009:                break;
       10: 1010:            case 'q':
       10: 1011:                of->no_reply = 1;
       10: 1012:                break;
        -: 1013:            // mset-related.
    #####: 1014:            case 'F':
    #####: 1015:                if (!safe_strtoul(tokens[i].value+1, &of->client_flags)) {
    #####: 1016:                    of->has_error = true;
        -: 1017:                }
        -: 1018:                break;
       14: 1019:            case 'C': // mset, mdelete, marithmetic
       14: 1020:                if (!safe_strtoull(tokens[i].value+1, &of->req_cas_id)) {
    #####: 1021:                    *errstr = "CLIENT_ERROR bad token in command line format";
    #####: 1022:                    of->has_error = true;
        -: 1023:                } else {
       14: 1024:                    of->has_cas = true;
        -: 1025:                }
        -: 1026:                break;
       15: 1027:            case 'M': // mset and marithmetic mode switch
       15: 1028:                if (tokens[i].length != 2) {
    #####: 1029:                    *errstr = "CLIENT_ERROR incorrect length for M token";
    #####: 1030:                    of->has_error = 1;
        -: 1031:                } else {
       15: 1032:                    of->mode = tokens[i].value[1];
        -: 1033:                }
        -: 1034:                break;
        5: 1035:            case 'J': // marithmetic initial value
        5: 1036:                if (!safe_strtoull(tokens[i].value+1, &of->initial)) {
    #####: 1037:                    *errstr = "CLIENT_ERROR invalid numeric initial value";
    #####: 1038:                    of->has_error = 1;
        -: 1039:                }
        -: 1040:                break;
        5: 1041:            case 'D': // marithmetic delta value
        5: 1042:                if (!safe_strtoull(tokens[i].value+1, &of->delta)) {
    #####: 1043:                    *errstr = "CLIENT_ERROR invalid numeric delta value";
    #####: 1044:                    of->has_error = 1;
        -: 1045:                }
        -: 1046:                break;
        3: 1047:            case 'I':
        3: 1048:                of->set_stale = 1;
        3: 1049:                break;
        1: 1050:            default: // unknown flag, bail.
        1: 1051:                *errstr = "CLIENT_ERROR invalid flag";
        1: 1052:                return -1;
        -: 1053:        }
        -: 1054:    }
        -: 1055:
     1373: 1056:    return of->has_error ? -1 : 0;
        -: 1057:}
        -: 1058:
     1310: 1059:static void process_mget_command(conn *c, token_t *tokens, const size_t ntokens) {
     1310: 1060:    char *key;
     1310: 1061:    size_t nkey;
     1310: 1062:    item *it;
     1310: 1063:    unsigned int i = 0;
     1310: 1064:    struct _meta_flags of = {0}; // option bitflags.
     1310: 1065:    uint32_t hv; // cached hash value for unlocking an item.
     1310: 1066:    bool failed = false;
     1310: 1067:    bool item_created = false;
     1310: 1068:    bool won_token = false;
     1310: 1069:    bool ttl_set = false;
     1310: 1070:    char *errstr = "CLIENT_ERROR bad command line format";
    1310*: 1071:    assert(c != NULL);
     1310: 1072:    mc_resp *resp = c->resp;
     1310: 1073:    char *p = resp->wbuf;
        -: 1074:
    2620*: 1075:    WANT_TOKENS_MIN(ntokens, 3);
        -: 1076:
        -: 1077:    // FIXME: do we move this check to after preparse?
     1310: 1078:    if (tokens[KEY_TOKEN].length > KEY_MAX_LENGTH) {
    #####: 1079:        out_errstring(c, "CLIENT_ERROR bad command line format");
    #####: 1080:        return;
        -: 1081:    }
        -: 1082:
        -: 1083:    // NOTE: final token has length == 0.
        -: 1084:    // KEY_TOKEN == 1. 0 is command.
        -: 1085:
     1310: 1086:    if (ntokens > MFLAG_MAX_OPT_LENGTH) {
        -: 1087:        // TODO: ensure the command tokenizer gives us at least this many
    #####: 1088:        out_errstring(c, "CLIENT_ERROR options flags are too long");
    #####: 1089:        return;
        -: 1090:    }
        -: 1091:
        -: 1092:    // scrubs duplicated options and sets flags for how to load the item.
        -: 1093:    // we pass in the first token that should be a flag.
     1310: 1094:    if (_meta_flag_preparse(tokens, 2, &of, &errstr) != 0) {
        1: 1095:        out_errstring(c, errstr);
        1: 1096:        return;
        -: 1097:    }
     1309: 1098:    c->noreply = of.no_reply;
        -: 1099:
        -: 1100:    // Grab key and length after meta preparsing in case it was decoded.
     1309: 1101:    key = tokens[KEY_TOKEN].value;
     1309: 1102:    nkey = tokens[KEY_TOKEN].length;
        -: 1103:
        -: 1104:    // TODO: need to indicate if the item was overflowed or not?
        -: 1105:    // I think we do, since an overflow shouldn't trigger an alloc/replace.
     1309: 1106:    bool overflow = false;
     1309: 1107:    if (!of.locked) {
     1295: 1108:        it = limited_get(key, nkey, c->thread, 0, false, !of.no_update, &overflow);
        -: 1109:    } else {
        -: 1110:        // If we had to lock the item, we're doing our own bump later.
       14: 1111:        it = limited_get_locked(key, nkey, c->thread, DONT_UPDATE, &hv, &overflow);
        -: 1112:    }
        -: 1113:
        -: 1114:    // Since we're a new protocol, we can actually inform users that refcount
        -: 1115:    // overflow is happening by straight up throwing an error.
        -: 1116:    // We definitely don't want to re-autovivify by accident.
     1309: 1117:    if (overflow) {
    #####: 1118:        assert(it == NULL);
    #####: 1119:        out_errstring(c, "SERVER_ERROR refcount overflow during fetch");
    #####: 1120:        return;
        -: 1121:    }
        -: 1122:
     1309: 1123:    if (it == NULL && of.vivify) {
        -: 1124:        // Fill in the exptime during parsing later.
        2: 1125:        it = item_alloc(key, nkey, 0, realtime(0), 2);
        -: 1126:        // We don't actually need any of do_store_item's logic:
        -: 1127:        // - already fetched and missed an existing item.
        -: 1128:        // - lock is still held.
        -: 1129:        // - not append/prepend/replace
        -: 1130:        // - not testing CAS
        2: 1131:        if (it != NULL) {
        -: 1132:            // I look forward to the day I get rid of this :)
        2: 1133:            memcpy(ITEM_data(it), "\r\n", 2);
        -: 1134:            // NOTE: This initializes the CAS value.
        2: 1135:            do_item_link(it, hv);
        2: 1136:            item_created = true;
        -: 1137:        }
        -: 1138:    }
        -: 1139:
        -: 1140:    // don't have to check result of add_iov() since the iov size defaults are
        -: 1141:    // enough.
     1309: 1142:    if (it) {
     1291: 1143:        if (of.value) {
       26: 1144:            memcpy(p, "VA ", 3);
       26: 1145:            p = itoa_u32(it->nbytes-2, p+3);
        -: 1146:        } else {
     1265: 1147:            memcpy(p, "HD", 2);
     1265: 1148:            p += 2;
        -: 1149:        }
        -: 1150:
     1408: 1151:        for (i = KEY_TOKEN+1; i < ntokens-1; i++) {
      117: 1152:            switch (tokens[i].value[0]) {
        1: 1153:                case 'T':
        1: 1154:                    ttl_set = true;
        1: 1155:                    it->exptime = of.exptime;
        1: 1156:                    break;
        7: 1157:                case 'N':
        7: 1158:                    if (item_created) {
        2: 1159:                        it->exptime = of.autoviv_exptime;
        2: 1160:                        won_token = true;
        -: 1161:                    }
        -: 1162:                    break;
        2: 1163:                case 'R':
        -: 1164:                    // If we haven't autovivified and supplied token is less
        -: 1165:                    // than current TTL, mark a win.
        2: 1166:                    if ((it->it_flags & ITEM_TOKEN_SENT) == 0
        1: 1167:                            && !item_created
        1: 1168:                            && it->exptime != 0
        1: 1169:                            && it->exptime < of.recache_time) {
        1: 1170:                        won_token = true;
        -: 1171:                    }
        -: 1172:                    break;
       32: 1173:                case 's':
       32: 1174:                    META_CHAR(p, 's');
       32: 1175:                    p = itoa_u32(it->nbytes-2, p);
       32: 1176:                    break;
       21: 1177:                case 't':
        -: 1178:                    // TTL remaining as of this request.
        -: 1179:                    // needs to be relative because server clocks may not be in sync.
       21: 1180:                    META_CHAR(p, 't');
       21: 1181:                    if (it->exptime == 0) {
    #####: 1182:                        *p = '-';
    #####: 1183:                        *(p+1) = '1';
    #####: 1184:                        p += 2;
        -: 1185:                    } else {
       21: 1186:                        p = itoa_u32(it->exptime - current_time, p);
        -: 1187:                    }
        -: 1188:                    break;
       11: 1189:                case 'c':
       11: 1190:                    META_CHAR(p, 'c');
       11: 1191:                    p = itoa_u64(ITEM_get_cas(it), p);
       11: 1192:                    break;
    #####: 1193:                case 'f':
    #####: 1194:                    META_CHAR(p, 'f');
    #####: 1195:                    if (FLAGS_SIZE(it) == 0) {
    #####: 1196:                        *p = '0';
    #####: 1197:                        p++;
        -: 1198:                    } else {
    #####: 1199:                        p = itoa_u32(*((uint32_t *) ITEM_suffix(it)), p);
        -: 1200:                    }
        -: 1201:                    break;
        1: 1202:                case 'l':
        1: 1203:                    META_CHAR(p, 'l');
        1: 1204:                    p = itoa_u32(current_time - it->time, p);
        1: 1205:                    break;
        5: 1206:                case 'h':
        5: 1207:                    META_CHAR(p, 'h');
        5: 1208:                    if (it->it_flags & ITEM_FETCHED) {
        2: 1209:                        *p = '1';
        -: 1210:                    } else {
        3: 1211:                        *p = '0';
        -: 1212:                    }
        5: 1213:                    p++;
        5: 1214:                    break;
        2: 1215:                case 'O':
        2: 1216:                    if (tokens[i].length > MFLAG_MAX_OPAQUE_LENGTH) {
    #####: 1217:                        errstr = "CLIENT_ERROR opaque token too long";
    #####: 1218:                        goto error;
        -: 1219:                    }
        2: 1220:                    META_SPACE(p);
        2: 1221:                    memcpy(p, tokens[i].value, tokens[i].length);
        2: 1222:                    p += tokens[i].length;
        2: 1223:                    break;
        3: 1224:                case 'k':
        3: 1225:                    META_KEY(p, ITEM_key(it), it->nkey, (it->it_flags & ITEM_KEY_BINARY));
        -: 1226:                    break;
        -: 1227:            }
        -: 1228:        }
        -: 1229:
        -: 1230:        // Has this item already sent a token?
        -: 1231:        // Important to do this here so we don't send W with Z.
        -: 1232:        // Isn't critical, but easier for client authors to understand.
     1291: 1233:        if (it->it_flags & ITEM_TOKEN_SENT) {
        3: 1234:            META_CHAR(p, 'Z');
        -: 1235:        }
     1291: 1236:        if (it->it_flags & ITEM_STALE) {
        3: 1237:            META_CHAR(p, 'X');
        -: 1238:            // FIXME: think hard about this. is this a default, or a flag?
        3: 1239:            if ((it->it_flags & ITEM_TOKEN_SENT) == 0) {
        -: 1240:                // If we're stale but no token already sent, now send one.
        -: 1241:                won_token = true;
        -: 1242:            }
        -: 1243:        }
        -: 1244:
     1289: 1245:        if (won_token) {
        -: 1246:            // Mark a win into the flag buffer.
        5: 1247:            META_CHAR(p, 'W');
        5: 1248:            it->it_flags |= ITEM_TOKEN_SENT;
        -: 1249:        }
        -: 1250:
     1291: 1251:        *p = '\r';
     1291: 1252:        *(p+1) = '\n';
     1291: 1253:        *(p+2) = '\0';
     1291: 1254:        p += 2;
        -: 1255:        // finally, chain in the buffer.
     1291: 1256:        resp_add_iov(resp, resp->wbuf, p - resp->wbuf);
        -: 1257:
     1291: 1258:        if (of.value) {
        -: 1259:#ifdef EXTSTORE
       26: 1260:            if (it->it_flags & ITEM_HDR) {
        2: 1261:                if (storage_get_item(c, it, resp) != 0) {
    #####: 1262:                    pthread_mutex_lock(&c->thread->stats.mutex);
    #####: 1263:                    c->thread->stats.get_oom_extstore++;
    #####: 1264:                    pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 1265:
    #####: 1266:                    failed = true;
        -: 1267:                }
       24: 1268:            } else if ((it->it_flags & ITEM_CHUNKED) == 0) {
       24: 1269:                resp_add_iov(resp, ITEM_data(it), it->nbytes);
        -: 1270:            } else {
    #####: 1271:                resp_add_chunked_iov(resp, it, it->nbytes);
        -: 1272:            }
        -: 1273:#else
        -: 1274:            if ((it->it_flags & ITEM_CHUNKED) == 0) {
        -: 1275:                resp_add_iov(resp, ITEM_data(it), it->nbytes);
        -: 1276:            } else {
        -: 1277:                resp_add_chunked_iov(resp, it, it->nbytes);
        -: 1278:            }
        -: 1279:#endif
        -: 1280:        }
        -: 1281:
        -: 1282:        // need to hold the ref at least because of the key above.
        -: 1283:#ifdef EXTSTORE
      24*: 1284:        if (!failed) {
     1291: 1285:            if ((it->it_flags & ITEM_HDR) != 0 && of.value) {
        -: 1286:                // Only have extstore clean if header and returning value.
        2: 1287:                resp->item = NULL;
        -: 1288:            } else {
     1289: 1289:                resp->item = it;
        -: 1290:            }
        -: 1291:        } else {
        -: 1292:            // Failed to set up extstore fetch.
    #####: 1293:            if (of.locked) {
    #####: 1294:                do_item_remove(it);
        -: 1295:            } else {
    #####: 1296:                item_remove(it);
        -: 1297:            }
        -: 1298:        }
        -: 1299:#else
        -: 1300:        resp->item = it;
        -: 1301:#endif
        -: 1302:    } else {
        -: 1303:        failed = true;
        -: 1304:    }
        -: 1305:
     1309: 1306:    if (of.locked) {
        -: 1307:        // Delayed bump so we could get fetched/last access time pre-update.
       14: 1308:        if (!of.no_update && it != NULL) {
       12: 1309:            do_item_bump(c->thread, it, hv);
        -: 1310:        }
       14: 1311:        item_unlock(hv);
        -: 1312:    }
        -: 1313:
        -: 1314:    // we count this command as a normal one if we've gotten this far.
        -: 1315:    // TODO: for autovivify case, miss never happens. Is this okay?
     1309: 1316:    if (!failed) {
     1291: 1317:        pthread_mutex_lock(&c->thread->stats.mutex);
     1291: 1318:        if (ttl_set) {
        1: 1319:            c->thread->stats.touch_cmds++;
        1: 1320:            c->thread->stats.slab_stats[ITEM_clsid(it)].touch_hits++;
        -: 1321:        } else {
     1290: 1322:            c->thread->stats.lru_hits[it->slabs_clsid]++;
     1290: 1323:            c->thread->stats.get_cmds++;
        -: 1324:        }
     1291: 1325:        pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 1326:
     1291: 1327:        conn_set_state(c, conn_new_cmd);
        -: 1328:    } else {
       18: 1329:        pthread_mutex_lock(&c->thread->stats.mutex);
       18: 1330:        if (ttl_set) {
    #####: 1331:            c->thread->stats.touch_cmds++;
    #####: 1332:            c->thread->stats.touch_misses++;
        -: 1333:        } else {
       18: 1334:            c->thread->stats.get_misses++;
       18: 1335:            c->thread->stats.get_cmds++;
        -: 1336:        }
       18: 1337:        MEMCACHED_COMMAND_GET(c->sfd, key, nkey, -1, 0);
       18: 1338:        pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 1339:
        -: 1340:        // This gets elided in noreply mode.
       18: 1341:        if (c->noreply)
        3: 1342:            resp->skip = true;
       18: 1343:        memcpy(p, "EN", 2);
       18: 1344:        p += 2;
       41: 1345:        for (i = KEY_TOKEN+1; i < ntokens-1; i++) {
       23: 1346:            switch (tokens[i].value[0]) {
        -: 1347:                // TODO: macro perhaps?
    #####: 1348:                case 'O':
    #####: 1349:                    if (tokens[i].length > MFLAG_MAX_OPAQUE_LENGTH) {
    #####: 1350:                        errstr = "CLIENT_ERROR opaque token too long";
    #####: 1351:                        goto error;
        -: 1352:                    }
    #####: 1353:                    META_SPACE(p);
    #####: 1354:                    memcpy(p, tokens[i].value, tokens[i].length);
    #####: 1355:                    p += tokens[i].length;
    #####: 1356:                    break;
    #####: 1357:                case 'k':
    #####: 1358:                    META_KEY(p, key, nkey, of.key_binary);
        -: 1359:                    break;
        -: 1360:            }
        -: 1361:        }
       18: 1362:        resp->wbytes = p - resp->wbuf;
       18: 1363:        memcpy(resp->wbuf + resp->wbytes, "\r\n", 2);
       18: 1364:        resp->wbytes += 2;
       18: 1365:        resp_add_iov(resp, resp->wbuf, resp->wbytes);
       18: 1366:        conn_set_state(c, conn_new_cmd);
        -: 1367:    }
        -: 1368:    return;
    #####: 1369:error:
    #####: 1370:    if (it) {
    #####: 1371:        do_item_remove(it);
    #####: 1372:        if (of.locked) {
    #####: 1373:            item_unlock(hv);
        -: 1374:        }
        -: 1375:    }
    #####: 1376:    out_errstring(c, errstr);
        -: 1377:}
        -: 1378:
       41: 1379:static void process_mset_command(conn *c, token_t *tokens, const size_t ntokens) {
       41: 1380:    char *key;
       41: 1381:    size_t nkey;
       41: 1382:    item *it;
       41: 1383:    int i;
       41: 1384:    short comm = NREAD_SET;
       41: 1385:    struct _meta_flags of = {0}; // option bitflags.
       41: 1386:    char *errstr = "CLIENT_ERROR bad command line format";
       41: 1387:    uint32_t hv; // cached hash value.
       41: 1388:    int vlen = 0; // value from data line.
      41*: 1389:    assert(c != NULL);
       41: 1390:    mc_resp *resp = c->resp;
       41: 1391:    char *p = resp->wbuf;
       41: 1392:    rel_time_t exptime = 0;
        -: 1393:
      81*: 1394:    WANT_TOKENS_MIN(ntokens, 3);
        -: 1395:
        -: 1396:    // TODO: most of this is identical to mget.
       41: 1397:    if (tokens[KEY_TOKEN].length > KEY_MAX_LENGTH) {
    #####: 1398:        out_errstring(c, "CLIENT_ERROR bad command line format");
    #####: 1399:        return;
        -: 1400:    }
        -: 1401:
       41: 1402:    if (ntokens == 3) {
        1: 1403:        out_errstring(c, "CLIENT_ERROR bad command line format");
        1: 1404:        return;
        -: 1405:    }
        -: 1406:
       40: 1407:    if (ntokens > MFLAG_MAX_OPT_LENGTH) {
    #####: 1408:        out_errstring(c, "CLIENT_ERROR options flags too long");
    #####: 1409:        return;
        -: 1410:    }
        -: 1411:
        -: 1412:    // We note tokens into the front of the write buffer, so we can create the
        -: 1413:    // final buffer in complete_nread_ascii.
       40: 1414:    p = resp->wbuf;
        -: 1415:
       40: 1416:    if (!safe_strtol(tokens[KEY_TOKEN + 1].value, (int32_t*)&vlen)) {
    #####: 1417:        out_errstring(c, "CLIENT_ERROR bad command line format");
    #####: 1418:        return;
        -: 1419:    }
        -: 1420:
       40: 1421:    if (vlen < 0 || vlen > (INT_MAX - 2)) {
    #####: 1422:        out_errstring(c, "CLIENT_ERROR bad command line format");
    #####: 1423:        return;
        -: 1424:    }
       40: 1425:    vlen += 2;
        -: 1426:
        -: 1427:    // We need to at least try to get the size to properly slurp bad bytes
        -: 1428:    // after an error.
        -: 1429:    // we pass in the first token that should be a flag.
       40: 1430:    if (_meta_flag_preparse(tokens, 3, &of, &errstr) != 0) {
    #####: 1431:        goto error;
        -: 1432:    }
        -: 1433:
       40: 1434:    key = tokens[KEY_TOKEN].value;
       40: 1435:    nkey = tokens[KEY_TOKEN].length;
        -: 1436:
        -: 1437:    // Set noreply after tokens are understood.
       40: 1438:    c->noreply = of.no_reply;
        -: 1439:    // Clear cas return value
       40: 1440:    c->cas = 0;
       40: 1441:    exptime = of.exptime;
        -: 1442:
       40: 1443:    bool has_error = false;
      143: 1444:    for (i = KEY_TOKEN+1; i < ntokens-1; i++) {
      103: 1445:        switch (tokens[i].value[0]) {
        -: 1446:            // TODO: macro perhaps?
        1: 1447:            case 'O':
        1: 1448:                if (tokens[i].length > MFLAG_MAX_OPAQUE_LENGTH) {
    #####: 1449:                    errstr = "CLIENT_ERROR opaque token too long";
    #####: 1450:                    has_error = true;
    #####: 1451:                    break;
        -: 1452:                }
        1: 1453:                META_SPACE(p);
        1: 1454:                memcpy(p, tokens[i].value, tokens[i].length);
        1: 1455:                p += tokens[i].length;
        1: 1456:                break;
        1: 1457:            case 'k':
        1: 1458:                META_CHAR(p, 'k');
        1: 1459:                break;
        4: 1460:            case 'c':
        -: 1461:                // need to set the cas value post-assignment.
        4: 1462:                META_CHAR(p, 'c');
        4: 1463:                break;
        2: 1464:            case 's':
        -: 1465:                // get the final size post-fill
        2: 1466:                META_CHAR(p, 's');
        2: 1467:                break;
        -: 1468:        }
        -: 1469:    }
        -: 1470:
        -: 1471:    // "mode switch" to alternative commands
       40: 1472:    switch (of.mode) {
        -: 1473:        case 0:
        -: 1474:            break; // no mode supplied.
        2: 1475:        case 'E': // Add...
        2: 1476:            comm = NREAD_ADD;
        2: 1477:            break;
        6: 1478:        case 'A': // Append.
        6: 1479:            if (of.vivify) {
        2: 1480:                comm = NREAD_APPENDVIV;
        2: 1481:                exptime = of.autoviv_exptime;
        -: 1482:            } else {
        -: 1483:                comm = NREAD_APPEND;
        -: 1484:            }
        -: 1485:            break;
        1: 1486:        case 'P': // Prepend.
        1: 1487:            if (of.vivify) {
    #####: 1488:                comm = NREAD_PREPENDVIV;
    #####: 1489:                exptime = of.autoviv_exptime;
        -: 1490:            } else {
        -: 1491:                comm = NREAD_PREPEND;
        -: 1492:            }
        -: 1493:            break;
        2: 1494:        case 'R': // Replace.
        2: 1495:            comm = NREAD_REPLACE;
        2: 1496:            break;
        -: 1497:        case 'S': // Set. Default.
        -: 1498:            comm = NREAD_SET;
        -: 1499:            break;
        1: 1500:        default:
        1: 1501:            errstr = "CLIENT_ERROR invalid mode for ms M token";
        1: 1502:            goto error;
        -: 1503:    }
        -: 1504:
        -: 1505:    // The item storage function doesn't exactly map to mset.
        -: 1506:    // If a CAS value is supplied, upgrade default SET mode to CAS mode.
        -: 1507:    // Also allows REPLACE to work, as REPLACE + CAS works the same as CAS.
        -: 1508:    // add-with-cas works the same as add; but could only LRU bump if match..
        -: 1509:    // APPEND/PREPEND allow a simplified CAS check.
       39: 1510:    if (of.has_cas && (comm == NREAD_SET || comm == NREAD_REPLACE)) {
        8: 1511:        comm = NREAD_CAS;
        -: 1512:    }
        -: 1513:
        -: 1514:    // We attempt to process as much as we can in hopes of getting a valid and
        -: 1515:    // adjusted vlen, or else the data swallowed after error will be for 0b.
       39: 1516:    if (has_error)
    #####: 1517:        goto error;
        -: 1518:
       39: 1519:    it = item_alloc(key, nkey, of.client_flags, exptime, vlen);
        -: 1520:
       39: 1521:    if (it == 0) {
    #####: 1522:        enum store_item_type status;
        -: 1523:        // TODO: These could be normalized codes (TL and OM). Need to
        -: 1524:        // reorganize the output stuff a bit though.
    #####: 1525:        if (! item_size_ok(nkey, of.client_flags, vlen)) {
    #####: 1526:            errstr = "SERVER_ERROR object too large for cache";
    #####: 1527:            status = TOO_LARGE;
    #####: 1528:            pthread_mutex_lock(&c->thread->stats.mutex);
    #####: 1529:            c->thread->stats.store_too_large++;
    #####: 1530:            pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 1531:        } else {
    #####: 1532:            errstr = "SERVER_ERROR out of memory storing object";
    #####: 1533:            status = NO_MEMORY;
    #####: 1534:            pthread_mutex_lock(&c->thread->stats.mutex);
    #####: 1535:            c->thread->stats.store_no_memory++;
    #####: 1536:            pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 1537:        }
        -: 1538:        // FIXME: LOGGER_LOG specific to mset, include options.
    #####: 1539:        LOGGER_LOG(c->thread->l, LOG_MUTATIONS, LOGGER_ITEM_STORE,
        -: 1540:                NULL, status, comm, key, nkey, 0, 0);
        -: 1541:
        -: 1542:        /* Avoid stale data persisting in cache because we failed alloc. */
        -: 1543:        // NOTE: only if SET mode?
    #####: 1544:        it = item_get_locked(key, nkey, c->thread, DONT_UPDATE, &hv);
    #####: 1545:        if (it) {
    #####: 1546:            do_item_unlink(it, hv);
    #####: 1547:            STORAGE_delete(c->thread->storage, it);
    #####: 1548:            do_item_remove(it);
        -: 1549:        }
    #####: 1550:        item_unlock(hv);
        -: 1551:
    #####: 1552:        goto error;
        -: 1553:    }
       39: 1554:    ITEM_set_cas(it, of.req_cas_id);
        -: 1555:
       39: 1556:    c->item = it;
        -: 1557:#ifdef NEED_ALIGN
        -: 1558:    if (it->it_flags & ITEM_CHUNKED) {
        -: 1559:        c->ritem = ITEM_schunk(it);
        -: 1560:    } else {
        -: 1561:        c->ritem = ITEM_data(it);
        -: 1562:    }
        -: 1563:#else
       39: 1564:    c->ritem = ITEM_data(it);
        -: 1565:#endif
       39: 1566:    c->rlbytes = it->nbytes;
       39: 1567:    c->cmd = comm;
        -: 1568:
        -: 1569:    // Prevent printing back the key in meta commands as garbage.
       39: 1570:    if (of.key_binary) {
        1: 1571:        it->it_flags |= ITEM_KEY_BINARY;
        -: 1572:    }
        -: 1573:
       39: 1574:    if (of.set_stale && comm == NREAD_CAS) {
        1: 1575:        c->set_stale = true;
        -: 1576:    }
       39: 1577:    resp->wbytes = p - resp->wbuf;
        -: 1578:    // we don't set up the iov here, instead after complete_nread_ascii when
        -: 1579:    // we have the full status code and item data.
       39: 1580:    c->mset_res = true;
       39: 1581:    conn_set_state(c, conn_nread);
       39: 1582:    return;
        1: 1583:error:
        -: 1584:    /* swallow the data line */
        1: 1585:    c->sbytes = vlen;
        -: 1586:
        -: 1587:    // Note: no errors possible after the item was successfully allocated.
        -: 1588:    // So we're just looking at dumping error codes and returning.
        1: 1589:    out_errstring(c, errstr);
        -: 1590:    // TODO: pass state in? else switching twice meh.
        1: 1591:    conn_set_state(c, conn_swallow);
        -: 1592:}
        -: 1593:
        9: 1594:static void process_mdelete_command(conn *c, token_t *tokens, const size_t ntokens) {
        9: 1595:    char *key;
        9: 1596:    size_t nkey;
        9: 1597:    item *it = NULL;
        9: 1598:    int i;
        9: 1599:    uint32_t hv;
        9: 1600:    struct _meta_flags of = {0}; // option bitflags.
        9: 1601:    char *errstr = "CLIENT_ERROR bad command line format";
       9*: 1602:    assert(c != NULL);
        9: 1603:    mc_resp *resp = c->resp;
        -: 1604:    // reserve bytes for status code
        9: 1605:    char *p = resp->wbuf + 2;
        -: 1606:
      18*: 1607:    WANT_TOKENS_MIN(ntokens, 3);
        -: 1608:
        -: 1609:    // TODO: most of this is identical to mget.
        9: 1610:    if (tokens[KEY_TOKEN].length > KEY_MAX_LENGTH) {
    #####: 1611:        out_string(c, "CLIENT_ERROR bad command line format");
    #####: 1612:        return;
        -: 1613:    }
        -: 1614:
        9: 1615:    if (ntokens > MFLAG_MAX_OPT_LENGTH) {
    #####: 1616:        out_string(c, "CLIENT_ERROR options flags too long");
    #####: 1617:        return;
        -: 1618:    }
        -: 1619:
        -: 1620:    // scrubs duplicated options and sets flags for how to load the item.
        -: 1621:    // we pass in the first token that should be a flag.
        -: 1622:    // FIXME: not using the preparse errstr?
        9: 1623:    if (_meta_flag_preparse(tokens, 2, &of, &errstr) != 0) {
    #####: 1624:        out_errstring(c, "CLIENT_ERROR invalid or duplicate flag");
    #####: 1625:        return;
        -: 1626:    }
        9: 1627:    assert(c != NULL);
        9: 1628:    c->noreply = of.no_reply;
        -: 1629:
        9: 1630:    key = tokens[KEY_TOKEN].value;
        9: 1631:    nkey = tokens[KEY_TOKEN].length;
        -: 1632:
       15: 1633:    for (i = KEY_TOKEN+1; i < ntokens-1; i++) {
        6: 1634:        switch (tokens[i].value[0]) {
        -: 1635:            // TODO: macro perhaps?
    #####: 1636:            case 'O':
    #####: 1637:                if (tokens[i].length > MFLAG_MAX_OPAQUE_LENGTH) {
    #####: 1638:                    errstr = "CLIENT_ERROR opaque token too long";
    #####: 1639:                    goto error;
        -: 1640:                }
    #####: 1641:                META_SPACE(p);
    #####: 1642:                memcpy(p, tokens[i].value, tokens[i].length);
    #####: 1643:                p += tokens[i].length;
    #####: 1644:                break;
    #####: 1645:            case 'k':
    #####: 1646:                META_KEY(p, key, nkey, of.key_binary);
        -: 1647:                break;
        -: 1648:        }
        -: 1649:    }
        -: 1650:
        9: 1651:    it = item_get_locked(key, nkey, c->thread, DONT_UPDATE, &hv);
        9: 1652:    if (it) {
        7: 1653:        MEMCACHED_COMMAND_DELETE(c->sfd, ITEM_key(it), it->nkey);
        -: 1654:
        -: 1655:        // allow only deleting/marking if a CAS value matches.
        7: 1656:        if (of.has_cas && ITEM_get_cas(it) != of.req_cas_id) {
        1: 1657:            pthread_mutex_lock(&c->thread->stats.mutex);
        1: 1658:            c->thread->stats.delete_misses++;
        1: 1659:            pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 1660:
        1: 1661:            memcpy(resp->wbuf, "EX", 2);
        1: 1662:            goto cleanup;
        -: 1663:        }
        -: 1664:
        -: 1665:        // If we're to set this item as stale, we don't actually want to
        -: 1666:        // delete it. We mark the stale bit, bump CAS, and update exptime if
        -: 1667:        // we were supplied a new TTL.
        6: 1668:        if (of.set_stale) {
        2: 1669:            if (of.new_ttl) {
        1: 1670:                it->exptime = of.exptime;
        -: 1671:            }
        2: 1672:            it->it_flags |= ITEM_STALE;
        -: 1673:            // Also need to remove TOKEN_SENT, so next client can win.
        2: 1674:            it->it_flags &= ~ITEM_TOKEN_SENT;
        -: 1675:
        2: 1676:            ITEM_set_cas(it, (settings.use_cas) ? get_cas_id() : 0);
        -: 1677:
        -: 1678:            // Clients can noreply nominal responses.
        2: 1679:            if (c->noreply)
    #####: 1680:                resp->skip = true;
        2: 1681:            memcpy(resp->wbuf, "HD", 2);
        -: 1682:        } else {
        4: 1683:            pthread_mutex_lock(&c->thread->stats.mutex);
        4: 1684:            c->thread->stats.slab_stats[ITEM_clsid(it)].delete_hits++;
        4: 1685:            pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 1686:
        4: 1687:            LOGGER_LOG(NULL, LOG_DELETIONS, LOGGER_DELETIONS, it, LOG_TYPE_META_DELETE);
        4: 1688:            do_item_unlink(it, hv);
        4: 1689:            STORAGE_delete(c->thread->storage, it);
        4: 1690:            if (c->noreply)
        1: 1691:                resp->skip = true;
        4: 1692:            memcpy(resp->wbuf, "HD", 2);
        -: 1693:        }
        6: 1694:        goto cleanup;
        -: 1695:    } else {
        2: 1696:        pthread_mutex_lock(&c->thread->stats.mutex);
        2: 1697:        c->thread->stats.delete_misses++;
        2: 1698:        pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 1699:
        2: 1700:        memcpy(resp->wbuf, "NF", 2);
        2: 1701:        goto cleanup;
        -: 1702:    }
        9: 1703:cleanup:
        9: 1704:    if (it) {
        7: 1705:        do_item_remove(it);
        -: 1706:    }
        -: 1707:    // Item is always returned locked, even if missing.
        9: 1708:    item_unlock(hv);
        9: 1709:    resp->wbytes = p - resp->wbuf;
        9: 1710:    memcpy(resp->wbuf + resp->wbytes, "\r\n", 2);
        9: 1711:    resp->wbytes += 2;
        9: 1712:    resp_add_iov(resp, resp->wbuf, resp->wbytes);
        9: 1713:    conn_set_state(c, conn_new_cmd);
        9: 1714:    return;
    #####: 1715:error:
    #####: 1716:    out_errstring(c, errstr);
        -: 1717:}
        -: 1718:
       15: 1719:static void process_marithmetic_command(conn *c, token_t *tokens, const size_t ntokens) {
       15: 1720:    char *key;
       15: 1721:    size_t nkey;
       15: 1722:    int i;
       15: 1723:    struct _meta_flags of = {0}; // option bitflags.
       15: 1724:    char *errstr = "CLIENT_ERROR bad command line format";
      15*: 1725:    assert(c != NULL);
       15: 1726:    mc_resp *resp = c->resp;
        -: 1727:    // no reservation (like del/set) since we post-process the status line.
       15: 1728:    char *p = resp->wbuf;
        -: 1729:
        -: 1730:    // If no argument supplied, incr or decr by one.
       15: 1731:    of.delta = 1;
       15: 1732:    of.initial = 0; // redundant, for clarity.
       15: 1733:    bool incr = true; // default mode is to increment.
       15: 1734:    bool locked = false;
       15: 1735:    uint32_t hv = 0;
       15: 1736:    item *it = NULL; // item returned by do_add_delta.
        -: 1737:
      29*: 1738:    WANT_TOKENS_MIN(ntokens, 3);
        -: 1739:
        -: 1740:    // TODO: most of this is identical to mget.
       15: 1741:    if (tokens[KEY_TOKEN].length > KEY_MAX_LENGTH) {
    #####: 1742:        out_string(c, "CLIENT_ERROR bad command line format");
    #####: 1743:        return;
        -: 1744:    }
        -: 1745:
       15: 1746:    if (ntokens > MFLAG_MAX_OPT_LENGTH) {
    #####: 1747:        out_string(c, "CLIENT_ERROR options flags too long");
    #####: 1748:        return;
        -: 1749:    }
        -: 1750:
        -: 1751:    // scrubs duplicated options and sets flags for how to load the item.
        -: 1752:    // we pass in the first token that should be a flag.
       15: 1753:    if (_meta_flag_preparse(tokens, 2, &of, &errstr) != 0) {
    #####: 1754:        out_errstring(c, "CLIENT_ERROR invalid or duplicate flag");
    #####: 1755:        return;
        -: 1756:    }
       15: 1757:    assert(c != NULL);
       15: 1758:    c->noreply = of.no_reply;
        -: 1759:
       15: 1760:    key = tokens[KEY_TOKEN].value;
       15: 1761:    nkey = tokens[KEY_TOKEN].length;
        -: 1762:
        -: 1763:    // "mode switch" to alternative commands
       15: 1764:    switch (of.mode) {
        -: 1765:        case 0: // no switch supplied.
        -: 1766:            break;
        -: 1767:        case 'I': // Incr (default)
        -: 1768:        case '+':
        -: 1769:            incr = true;
        -: 1770:            break;
        2: 1771:        case 'D': // Decr.
        -: 1772:        case '-':
        2: 1773:            incr = false;
        2: 1774:            break;
    #####: 1775:        default:
    #####: 1776:            errstr = "CLIENT_ERROR invalid mode for ma M token";
    #####: 1777:            goto error;
       15: 1778:            break;
        -: 1779:    }
        -: 1780:
        -: 1781:    // take hash value and manually lock item... hold lock during store phase
        -: 1782:    // on miss and avoid recalculating the hash multiple times.
       15: 1783:    hv = hash(key, nkey);
       15: 1784:    item_lock(hv);
       15: 1785:    locked = true;
       15: 1786:    char tmpbuf[INCR_MAX_STORAGE_LEN];
        -: 1787:
        -: 1788:    // return a referenced item if it exists, so we can modify it here, rather
        -: 1789:    // than adding even more parameters to do_add_delta.
       15: 1790:    bool item_created = false;
       15: 1791:    switch(do_add_delta(c->thread, key, nkey, incr, of.delta, tmpbuf, &of.req_cas_id, hv, &it)) {
        8: 1792:    case OK:
        8: 1793:        if (c->noreply)
        1: 1794:            resp->skip = true;
        -: 1795:        // *it was filled, set the status below.
        -: 1796:        break;
        1: 1797:    case NON_NUMERIC:
        1: 1798:        errstr = "CLIENT_ERROR cannot increment or decrement non-numeric value";
        1: 1799:        goto error;
    #####: 1800:        break;
    #####: 1801:    case EOM:
    #####: 1802:        errstr = "SERVER_ERROR out of memory";
    #####: 1803:        goto error;
        5: 1804:        break;
        5: 1805:    case DELTA_ITEM_NOT_FOUND:
        5: 1806:        if (of.vivify) {
        3: 1807:            itoa_u64(of.initial, tmpbuf);
        3: 1808:            int vlen = strlen(tmpbuf);
        -: 1809:
        3: 1810:            it = item_alloc(key, nkey, 0, 0, vlen+2);
        3: 1811:            if (it != NULL) {
        3: 1812:                memcpy(ITEM_data(it), tmpbuf, vlen);
        3: 1813:                memcpy(ITEM_data(it) + vlen, "\r\n", 2);
        3: 1814:                if (do_store_item(it, NREAD_ADD, c->thread, hv, NULL, NULL, CAS_NO_STALE)) {
        -: 1815:                    item_created = true;
        -: 1816:                } else {
        -: 1817:                    // Not sure how we can get here if we're holding the lock.
    #####: 1818:                    memcpy(resp->wbuf, "NS", 2);
        -: 1819:                }
        -: 1820:            } else {
    #####: 1821:                errstr = "SERVER_ERROR Out of memory allocating new item";
    #####: 1822:                goto error;
        -: 1823:            }
        -: 1824:        } else {
        2: 1825:            pthread_mutex_lock(&c->thread->stats.mutex);
        2: 1826:            if (incr) {
        2: 1827:                c->thread->stats.incr_misses++;
        -: 1828:            } else {
    #####: 1829:                c->thread->stats.decr_misses++;
        -: 1830:            }
        2: 1831:            pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 1832:            // won't have a valid it here.
        2: 1833:            memcpy(p, "NF", 2);
        2: 1834:            p += 2;
        -: 1835:        }
        -: 1836:        break;
        -: 1837:    case DELTA_ITEM_CAS_MISMATCH:
        -: 1838:        // also returns without a valid it.
        1: 1839:        memcpy(p, "EX", 2);
        1: 1840:        p += 2;
        1: 1841:        break;
        -: 1842:    }
        -: 1843:
        -: 1844:    // final loop
        -: 1845:    // allows building the response with information after vivifying from a
        -: 1846:    // miss, or returning a new CAS value after add_delta().
       14: 1847:    if (it) {
       11: 1848:        size_t vlen = strlen(tmpbuf);
       11: 1849:        if (of.value) {
        8: 1850:            memcpy(p, "VA ", 3);
        8: 1851:            p = itoa_u32(vlen, p+3);
        -: 1852:        } else {
        3: 1853:            memcpy(p, "HD", 2);
        3: 1854:            p += 2;
        -: 1855:        }
        -: 1856:
       49: 1857:        for (i = KEY_TOKEN+1; i < ntokens-1; i++) {
       38: 1858:            switch (tokens[i].value[0]) {
        2: 1859:                case 'c':
        2: 1860:                    META_CHAR(p, 'c');
        2: 1861:                    p = itoa_u64(ITEM_get_cas(it), p);
        2: 1862:                    break;
        6: 1863:                case 't':
        6: 1864:                    META_CHAR(p, 't');
        6: 1865:                    if (it->exptime == 0) {
        5: 1866:                        *p = '-';
        5: 1867:                        *(p+1) = '1';
        5: 1868:                        p += 2;
        -: 1869:                    } else {
        1: 1870:                        p = itoa_u32(it->exptime - current_time, p);
        -: 1871:                    }
        -: 1872:                    break;
        1: 1873:                case 'T':
        1: 1874:                    it->exptime = of.exptime;
        1: 1875:                    break;
        8: 1876:                case 'N':
        8: 1877:                    if (item_created) {
        3: 1878:                        it->exptime = of.autoviv_exptime;
        -: 1879:                    }
        -: 1880:                    break;
        -: 1881:                // TODO: macro perhaps?
    #####: 1882:                case 'O':
    #####: 1883:                    if (tokens[i].length > MFLAG_MAX_OPAQUE_LENGTH) {
    #####: 1884:                        errstr = "CLIENT_ERROR opaque token too long";
    #####: 1885:                        goto error;
        -: 1886:                    }
    #####: 1887:                    META_SPACE(p);
    #####: 1888:                    memcpy(p, tokens[i].value, tokens[i].length);
    #####: 1889:                    p += tokens[i].length;
    #####: 1890:                    break;
    #####: 1891:                case 'k':
    #####: 1892:                    META_KEY(p, key, nkey, of.key_binary);
        -: 1893:                    break;
        -: 1894:            }
        -: 1895:        }
        -: 1896:
       11: 1897:        if (of.value) {
        8: 1898:            *p = '\r';
        8: 1899:            *(p+1) = '\n';
        8: 1900:            p += 2;
        8: 1901:            memcpy(p, tmpbuf, vlen);
        8: 1902:            p += vlen;
        -: 1903:        }
        -: 1904:
       11: 1905:        do_item_remove(it);
        -: 1906:    } else {
        -: 1907:        // No item to handle. still need to return opaque/key tokens
        7: 1908:        for (i = KEY_TOKEN+1; i < ntokens-1; i++) {
        4: 1909:            switch (tokens[i].value[0]) {
        -: 1910:                // TODO: macro perhaps?
    #####: 1911:                case 'O':
    #####: 1912:                    if (tokens[i].length > MFLAG_MAX_OPAQUE_LENGTH) {
    #####: 1913:                        errstr = "CLIENT_ERROR opaque token too long";
    #####: 1914:                        goto error;
        -: 1915:                    }
    #####: 1916:                    META_SPACE(p);
    #####: 1917:                    memcpy(p, tokens[i].value, tokens[i].length);
    #####: 1918:                    p += tokens[i].length;
    #####: 1919:                    break;
    #####: 1920:                case 'k':
    #####: 1921:                    META_KEY(p, key, nkey, of.key_binary);
        -: 1922:                    break;
        -: 1923:            }
        -: 1924:        }
        -: 1925:    }
        -: 1926:
       14: 1927:    item_unlock(hv);
        -: 1928:
       14: 1929:    resp->wbytes = p - resp->wbuf;
       14: 1930:    memcpy(resp->wbuf + resp->wbytes, "\r\n", 2);
       14: 1931:    resp->wbytes += 2;
       14: 1932:    resp_add_iov(resp, resp->wbuf, resp->wbytes);
       14: 1933:    conn_set_state(c, conn_new_cmd);
       14: 1934:    return;
        1: 1935:error:
        1: 1936:    if (it != NULL)
    #####: 1937:        do_item_remove(it);
        1: 1938:    if (locked)
        1: 1939:        item_unlock(hv);
        1: 1940:    out_errstring(c, errstr);
        -: 1941:}
        -: 1942:
        -: 1943:
   302895: 1944:static void process_update_command(conn *c, token_t *tokens, const size_t ntokens, int comm, bool handle_cas) {
   302895: 1945:    char *key;
   302895: 1946:    size_t nkey;
   302895: 1947:    unsigned int flags;
   302895: 1948:    int32_t exptime_int = 0;
   302895: 1949:    rel_time_t exptime = 0;
   302895: 1950:    int vlen;
   302895: 1951:    uint64_t req_cas_id=0;
   302895: 1952:    item *it;
        -: 1953:
  302895*: 1954:    assert(c != NULL);
        -: 1955:
   302895: 1956:    set_noreply_maybe(c, tokens, ntokens);
        -: 1957:
   302895: 1958:    if (tokens[KEY_TOKEN].length > KEY_MAX_LENGTH) {
    #####: 1959:        out_string(c, "CLIENT_ERROR bad command line format");
      16*: 1960:        return;
        -: 1961:    }
        -: 1962:
   302895: 1963:    key = tokens[KEY_TOKEN].value;
   302895: 1964:    nkey = tokens[KEY_TOKEN].length;
        -: 1965:
   605788: 1966:    if (! (safe_strtoul(tokens[2].value, (uint32_t *)&flags)
   302894: 1967:           && safe_strtol(tokens[3].value, &exptime_int)
   302893: 1968:           && safe_strtol(tokens[4].value, (int32_t *)&vlen))) {
        3: 1969:        out_string(c, "CLIENT_ERROR bad command line format");
        3: 1970:        return;
        -: 1971:    }
        -: 1972:
   605783: 1973:    exptime = realtime(EXPTIME_TO_POSITIVE_TIME(exptime_int));
        -: 1974:
        -: 1975:    // does cas value exist?
   302892: 1976:    if (handle_cas) {
       13: 1977:        if (!safe_strtoull(tokens[5].value, &req_cas_id)) {
        1: 1978:            out_string(c, "CLIENT_ERROR bad command line format");
        1: 1979:            return;
        -: 1980:        }
        -: 1981:    }
        -: 1982:
   302891: 1983:    if (vlen < 0 || vlen > (INT_MAX - 2)) {
        3: 1984:        out_string(c, "CLIENT_ERROR bad command line format");
        3: 1985:        return;
        -: 1986:    }
   302888: 1987:    vlen += 2;
        -: 1988:
   302888: 1989:    if (settings.detail_enabled) {
      101: 1990:        stats_prefix_record_set(key, nkey);
        -: 1991:    }
        -: 1992:
   302888: 1993:    it = item_alloc(key, nkey, flags, exptime, vlen);
        -: 1994:
   302888: 1995:    if (it == 0) {
        9: 1996:        enum store_item_type status;
        9: 1997:        if (! item_size_ok(nkey, flags, vlen)) {
        4: 1998:            out_string(c, "SERVER_ERROR object too large for cache");
        4: 1999:            status = TOO_LARGE;
        4: 2000:            pthread_mutex_lock(&c->thread->stats.mutex);
        4: 2001:            c->thread->stats.store_too_large++;
        4: 2002:            pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 2003:        } else {
        5: 2004:            out_of_memory(c, "SERVER_ERROR out of memory storing object");
        5: 2005:            status = NO_MEMORY;
        5: 2006:            pthread_mutex_lock(&c->thread->stats.mutex);
        5: 2007:            c->thread->stats.store_no_memory++;
        5: 2008:            pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 2009:        }
       9*: 2010:        LOGGER_LOG(c->thread->l, LOG_MUTATIONS, LOGGER_ITEM_STORE,
        -: 2011:                NULL, status, comm, key, nkey, 0, 0, c->sfd);
        -: 2012:        /* swallow the data line */
        9: 2013:        conn_set_state(c, conn_swallow);
        9: 2014:        c->sbytes = vlen;
        -: 2015:
        -: 2016:        /* Avoid stale data persisting in cache because we failed alloc.
        -: 2017:         * Unacceptable for SET. Anywhere else too? */
        9: 2018:        if (comm == NREAD_SET) {
        9: 2019:            it = item_get(key, nkey, c->thread, DONT_UPDATE);
        9: 2020:            if (it) {
        2: 2021:                item_unlink(it);
        2: 2022:                STORAGE_delete(c->thread->storage, it);
        2: 2023:                item_remove(it);
        -: 2024:            }
        -: 2025:        }
        -: 2026:
        9: 2027:        return;
        -: 2028:    }
   302879: 2029:    ITEM_set_cas(it, req_cas_id);
        -: 2030:
   302879: 2031:    c->item = it;
        -: 2032:#ifdef NEED_ALIGN
        -: 2033:    if (it->it_flags & ITEM_CHUNKED) {
        -: 2034:        c->ritem = ITEM_schunk(it);
        -: 2035:    } else {
        -: 2036:        c->ritem = ITEM_data(it);
        -: 2037:    }
        -: 2038:#else
   302879: 2039:    c->ritem = ITEM_data(it);
        -: 2040:#endif
   302879: 2041:    c->rlbytes = it->nbytes;
   302879: 2042:    c->cmd = comm;
   302879: 2043:    conn_set_state(c, conn_nread);
        -: 2044:}
        -: 2045:
     2004: 2046:static void process_touch_command(conn *c, token_t *tokens, const size_t ntokens) {
     2004: 2047:    char *key;
     2004: 2048:    size_t nkey;
     2004: 2049:    int32_t exptime_int = 0;
     2004: 2050:    rel_time_t exptime = 0;
     2004: 2051:    item *it;
        -: 2052:
    2004*: 2053:    assert(c != NULL);
        -: 2054:
     2004: 2055:    set_noreply_maybe(c, tokens, ntokens);
        -: 2056:
     2004: 2057:    if (tokens[KEY_TOKEN].length > KEY_MAX_LENGTH) {
    #####: 2058:        out_string(c, "CLIENT_ERROR bad command line format");
    #####: 2059:        return;
        -: 2060:    }
        -: 2061:
     2004: 2062:    key = tokens[KEY_TOKEN].value;
     2004: 2063:    nkey = tokens[KEY_TOKEN].length;
        -: 2064:
     2004: 2065:    if (!safe_strtol(tokens[2].value, &exptime_int)) {
    #####: 2066:        out_string(c, "CLIENT_ERROR invalid exptime argument");
    #####: 2067:        return;
        -: 2068:    }
        -: 2069:
     4007: 2070:    exptime = realtime(EXPTIME_TO_POSITIVE_TIME(exptime_int));
     2004: 2071:    it = item_touch(key, nkey, exptime, c->thread);
     2004: 2072:    if (it) {
     2004: 2073:        pthread_mutex_lock(&c->thread->stats.mutex);
     2004: 2074:        c->thread->stats.touch_cmds++;
     2004: 2075:        c->thread->stats.slab_stats[ITEM_clsid(it)].touch_hits++;
     2004: 2076:        pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 2077:
     2004: 2078:        out_string(c, "TOUCHED");
     2004: 2079:        item_remove(it);
        -: 2080:    } else {
    #####: 2081:        pthread_mutex_lock(&c->thread->stats.mutex);
    #####: 2082:        c->thread->stats.touch_cmds++;
    #####: 2083:        c->thread->stats.touch_misses++;
    #####: 2084:        pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 2085:
    #####: 2086:        out_string(c, "NOT_FOUND");
        -: 2087:    }
        -: 2088:}
        -: 2089:
      273: 2090:static void process_arithmetic_command(conn *c, token_t *tokens, const size_t ntokens, const bool incr) {
      273: 2091:    char temp[INCR_MAX_STORAGE_LEN];
      273: 2092:    uint64_t delta;
      273: 2093:    char *key;
      273: 2094:    size_t nkey;
        -: 2095:
     273*: 2096:    assert(c != NULL);
        -: 2097:
      273: 2098:    set_noreply_maybe(c, tokens, ntokens);
        -: 2099:
      273: 2100:    if (tokens[KEY_TOKEN].length > KEY_MAX_LENGTH) {
    #####: 2101:        out_string(c, "CLIENT_ERROR bad command line format");
    #####: 2102:        return;
        -: 2103:    }
        -: 2104:
      273: 2105:    key = tokens[KEY_TOKEN].value;
      273: 2106:    nkey = tokens[KEY_TOKEN].length;
        -: 2107:
      273: 2108:    if (!safe_strtoull(tokens[2].value, &delta)) {
    #####: 2109:        out_string(c, "CLIENT_ERROR invalid numeric delta argument");
    #####: 2110:        return;
        -: 2111:    }
        -: 2112:
      273: 2113:    switch(add_delta(c->thread, key, nkey, incr, delta, temp, NULL)) {
      267: 2114:    case OK:
      267: 2115:        out_string(c, temp);
      267: 2116:        break;
        2: 2117:    case NON_NUMERIC:
        2: 2118:        out_string(c, "CLIENT_ERROR cannot increment or decrement non-numeric value");
        2: 2119:        break;
    #####: 2120:    case EOM:
    #####: 2121:        out_of_memory(c, "SERVER_ERROR out of memory");
    #####: 2122:        break;
        4: 2123:    case DELTA_ITEM_NOT_FOUND:
        4: 2124:        pthread_mutex_lock(&c->thread->stats.mutex);
        4: 2125:        if (incr) {
        1: 2126:            c->thread->stats.incr_misses++;
        -: 2127:        } else {
        3: 2128:            c->thread->stats.decr_misses++;
        -: 2129:        }
        4: 2130:        pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 2131:
        4: 2132:        out_string(c, "NOT_FOUND");
        4: 2133:        break;
        -: 2134:    case DELTA_ITEM_CAS_MISMATCH:
        -: 2135:        break; /* Should never get here */
        -: 2136:    }
        -: 2137:}
        -: 2138:
        -: 2139:
   141092: 2140:static void process_delete_command(conn *c, token_t *tokens, const size_t ntokens) {
   141092: 2141:    char *key;
   141092: 2142:    size_t nkey;
   141092: 2143:    item *it;
   141092: 2144:    uint32_t hv;
        -: 2145:
  141092*: 2146:    assert(c != NULL);
        -: 2147:
   141092: 2148:    if (ntokens > 3) {
     9852: 2149:        bool hold_is_zero = strcmp(tokens[KEY_TOKEN+1].value, "0") == 0;
     9852: 2150:        bool sets_noreply = set_noreply_maybe(c, tokens, ntokens);
     9850: 2151:        bool valid = (ntokens == 4 && (hold_is_zero || sets_noreply))
     9853: 2152:            || (ntokens == 5 && hold_is_zero && sets_noreply);
     9852: 2153:        if (!valid) {
        2: 2154:            out_string(c, "CLIENT_ERROR bad command line format.  "
        -: 2155:                       "Usage: delete <key> [noreply]");
        4: 2156:            return;
        -: 2157:        }
        -: 2158:    }
        -: 2159:
        -: 2160:
   141090: 2161:    key = tokens[KEY_TOKEN].value;
   141090: 2162:    nkey = tokens[KEY_TOKEN].length;
        -: 2163:
   141090: 2164:    if(nkey > KEY_MAX_LENGTH) {
    #####: 2165:        out_string(c, "CLIENT_ERROR bad command line format");
    #####: 2166:        return;
        -: 2167:    }
        -: 2168:
   141090: 2169:    if (settings.detail_enabled) {
        1: 2170:        stats_prefix_record_delete(key, nkey);
        -: 2171:    }
        -: 2172:
   141090: 2173:    it = item_get_locked(key, nkey, c->thread, DONT_UPDATE, &hv);
   141090: 2174:    if (it) {
   141082: 2175:        MEMCACHED_COMMAND_DELETE(c->sfd, ITEM_key(it), it->nkey);
        -: 2176:
   141082: 2177:        pthread_mutex_lock(&c->thread->stats.mutex);
   141082: 2178:        c->thread->stats.slab_stats[ITEM_clsid(it)].delete_hits++;
   141082: 2179:        pthread_mutex_unlock(&c->thread->stats.mutex);
   141082: 2180:        LOGGER_LOG(NULL, LOG_DELETIONS, LOGGER_DELETIONS, it, LOG_TYPE_DELETE);
   141082: 2181:        do_item_unlink(it, hv);
   141082: 2182:        STORAGE_delete(c->thread->storage, it);
   141082: 2183:        do_item_remove(it);      /* release our reference */
   141082: 2184:        out_string(c, "DELETED");
        -: 2185:    } else {
        8: 2186:        pthread_mutex_lock(&c->thread->stats.mutex);
        8: 2187:        c->thread->stats.delete_misses++;
        8: 2188:        pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 2189:
        8: 2190:        out_string(c, "NOT_FOUND");
        -: 2191:    }
   141090: 2192:    item_unlock(hv);
        -: 2193:}
        -: 2194:
        2: 2195:static void process_verbosity_command(conn *c, token_t *tokens, const size_t ntokens) {
        2: 2196:    unsigned int level;
        -: 2197:
       2*: 2198:    assert(c != NULL);
        -: 2199:
        2: 2200:    set_noreply_maybe(c, tokens, ntokens);
        -: 2201:
        2: 2202:    if (!safe_strtoul(tokens[1].value, (uint32_t*)&level)) {
        1: 2203:        out_string(c, "CLIENT_ERROR bad command line format");
        1: 2204:        return;
        -: 2205:    }
        1: 2206:    settings.verbose = level > MAX_VERBOSITY_LEVEL ? MAX_VERBOSITY_LEVEL : level;
        1: 2207:    out_string(c, "OK");
        1: 2208:    return;
        -: 2209:}
        -: 2210:
        -: 2211:#ifdef MEMCACHED_DEBUG
    #####: 2212:static void process_misbehave_command(conn *c) {
    #####: 2213:    int allowed = 0;
        -: 2214:
        -: 2215:    // try opening new TCP socket
    #####: 2216:    int i = socket(AF_INET, SOCK_STREAM, 0);
    #####: 2217:    if (i != -1) {
    #####: 2218:        allowed++;
    #####: 2219:        close(i);
        -: 2220:    }
        -: 2221:
        -: 2222:    // try executing new commands
    #####: 2223:    i = system("sleep 0");
    #####: 2224:    if (i != -1) {
    #####: 2225:        allowed++;
        -: 2226:    }
        -: 2227:
    #####: 2228:    if (allowed) {
    #####: 2229:        out_string(c, "ERROR");
        -: 2230:    } else {
    #####: 2231:        out_string(c, "OK");
        -: 2232:    }
    #####: 2233:}
        -: 2234:
        5: 2235:static void process_debugtime_command(conn *c, token_t *tokens, const size_t ntokens) {
        5: 2236:    if (strcmp(tokens[1].value, "p") == 0) {
    #####: 2237:        if (!is_paused) {
    #####: 2238:            is_paused = true;
        -: 2239:        }
        5: 2240:    } else if (strcmp(tokens[1].value, "r") == 0) {
    #####: 2241:        if (is_paused) {
    #####: 2242:            is_paused = false;
        -: 2243:        }
        -: 2244:    } else {
        5: 2245:        int64_t time_delta = 0;
        5: 2246:        if (!safe_strtoll(tokens[1].value, &time_delta)) {
    #####: 2247:            out_string(c, "ERROR");
    #####: 2248:            return;
        -: 2249:        }
        5: 2250:        delta += time_delta;
        5: 2251:        current_time += delta;
        -: 2252:    }
        5: 2253:    out_string(c, "OK");
        -: 2254:}
        -: 2255:#endif
        -: 2256:
        2: 2257:static void process_slabs_automove_command(conn *c, token_t *tokens, const size_t ntokens) {
        2: 2258:    unsigned int level;
        2: 2259:    double ratio;
        -: 2260:
       2*: 2261:    assert(c != NULL);
        -: 2262:
        2: 2263:    set_noreply_maybe(c, tokens, ntokens);
        -: 2264:
        2: 2265:    if (strcmp(tokens[2].value, "ratio") == 0) {
    #####: 2266:        if (ntokens < 5 || !safe_strtod(tokens[3].value, &ratio)) {
    #####: 2267:            out_string(c, "ERROR");
    #####: 2268:            return;
        -: 2269:        }
    #####: 2270:        settings.slab_automove_ratio = ratio;
        -: 2271:    } else {
        2: 2272:        if (!safe_strtoul(tokens[2].value, (uint32_t*)&level)) {
        1: 2273:            out_string(c, "CLIENT_ERROR bad command line format");
        1: 2274:            return;
        -: 2275:        }
        1: 2276:        if (level == 0) {
        1: 2277:            settings.slab_automove = 0;
    #####: 2278:        } else if (level == 1 || level == 2) {
    #####: 2279:            settings.slab_automove = level;
        -: 2280:        } else {
    #####: 2281:            out_string(c, "ERROR");
    #####: 2282:            return;
        -: 2283:        }
        -: 2284:    }
        1: 2285:    out_string(c, "OK");
        1: 2286:    return;
        -: 2287:}
        -: 2288:
        -: 2289:/* TODO: decide on syntax for sampling? */
       12: 2290:static void process_watch_command(conn *c, token_t *tokens, const size_t ntokens) {
       12: 2291:    uint16_t f = 0;
       12: 2292:    int x;
      12*: 2293:    assert(c != NULL);
        -: 2294:
       12: 2295:    set_noreply_maybe(c, tokens, ntokens);
       12: 2296:    if (!settings.watch_enabled) {
        1: 2297:        out_string(c, "CLIENT_ERROR watch commands not allowed");
        1: 2298:        return;
        -: 2299:    }
        -: 2300:
       11: 2301:    if (resp_has_stack(c)) {
    #####: 2302:        out_string(c, "ERROR cannot pipeline other commands before watch");
    #####: 2303:        return;
        -: 2304:    }
        -: 2305:
       11: 2306:    if (ntokens > 2) {
       24: 2307:        for (x = COMMAND_TOKEN + 1; x < ntokens - 1; x++) {
       14: 2308:            if ((strcmp(tokens[x].value, "rawcmds") == 0)) {
    #####: 2309:                f |= LOG_RAWCMDS;
       14: 2310:            } else if ((strcmp(tokens[x].value, "evictions") == 0)) {
        2: 2311:                f |= LOG_EVICTIONS;
       12: 2312:            } else if ((strcmp(tokens[x].value, "fetchers") == 0)) {
        5: 2313:                f |= LOG_FETCHERS;
        7: 2314:            } else if ((strcmp(tokens[x].value, "mutations") == 0)) {
        5: 2315:                f |= LOG_MUTATIONS;
        2: 2316:            } else if ((strcmp(tokens[x].value, "sysevents") == 0)) {
    #####: 2317:                f |= LOG_SYSEVENTS;
        2: 2318:            } else if ((strcmp(tokens[x].value, "connevents") == 0)) {
        1: 2319:                f |= LOG_CONNEVENTS;
        1: 2320:            } else if ((strcmp(tokens[x].value, "proxyreqs") == 0)) {
    #####: 2321:                f |= LOG_PROXYREQS;
        1: 2322:            } else if ((strcmp(tokens[x].value, "proxyevents") == 0)) {
    #####: 2323:                f |= LOG_PROXYEVENTS;
        1: 2324:            } else if ((strcmp(tokens[x].value, "proxyuser") == 0)) {
    #####: 2325:                f |= LOG_PROXYUSER;
        1: 2326:            } else if ((strcmp(tokens[x].value, "deletions") == 0)) {
        1: 2327:                f |= LOG_DELETIONS;
        -: 2328:            } else {
    #####: 2329:                out_string(c, "ERROR");
    #####: 2330:                return;
        -: 2331:            }
        -: 2332:        }
        -: 2333:    } else {
        -: 2334:        f |= LOG_FETCHERS;
        -: 2335:    }
        -: 2336:
       11: 2337:    switch(logger_add_watcher(c, c->sfd, f)) {
    #####: 2338:        case LOGGER_ADD_WATCHER_TOO_MANY:
    #####: 2339:            out_string(c, "WATCHER_TOO_MANY log watcher limit reached");
    #####: 2340:            break;
    #####: 2341:        case LOGGER_ADD_WATCHER_FAILED:
    #####: 2342:            out_string(c, "WATCHER_FAILED failed to add log watcher");
    #####: 2343:            break;
       11: 2344:        case LOGGER_ADD_WATCHER_OK:
       11: 2345:            conn_set_state(c, conn_watch);
       11: 2346:            event_del(&c->event);
       11: 2347:            break;
        -: 2348:    }
        -: 2349:}
        -: 2350:
        3: 2351:static void process_memlimit_command(conn *c, token_t *tokens, const size_t ntokens) {
        3: 2352:    uint32_t memlimit;
       3*: 2353:    assert(c != NULL);
        -: 2354:
        3: 2355:    set_noreply_maybe(c, tokens, ntokens);
        -: 2356:
        3: 2357:    if (!safe_strtoul(tokens[1].value, &memlimit)) {
    #####: 2358:        out_string(c, "ERROR");
        -: 2359:    } else {
        3: 2360:        if (memlimit < 8) {
    #####: 2361:            out_string(c, "MEMLIMIT_TOO_SMALL cannot set maxbytes to less than 8m");
        -: 2362:        } else {
        3: 2363:            if (memlimit > 1000000000) {
    #####: 2364:                out_string(c, "MEMLIMIT_ADJUST_FAILED input value is megabytes not bytes");
        3: 2365:            } else if (slabs_adjust_mem_limit((size_t) memlimit * 1024 * 1024)) {
        3: 2366:                if (settings.verbose > 0) {
    #####: 2367:                    fprintf(stderr, "maxbytes adjusted to %llum\n", (unsigned long long)memlimit);
        -: 2368:                }
        -: 2369:
        3: 2370:                out_string(c, "OK");
        -: 2371:            } else {
    #####: 2372:                out_string(c, "MEMLIMIT_ADJUST_FAILED out of bounds or unable to adjust");
        -: 2373:            }
        -: 2374:        }
        -: 2375:    }
        3: 2376:}
        -: 2377:
    #####: 2378:static void process_lru_command(conn *c, token_t *tokens, const size_t ntokens) {
    #####: 2379:    uint32_t pct_hot;
    #####: 2380:    uint32_t pct_warm;
    #####: 2381:    double hot_factor;
    #####: 2382:    int32_t ttl;
    #####: 2383:    double factor;
        -: 2384:
    #####: 2385:    set_noreply_maybe(c, tokens, ntokens);
        -: 2386:
    #####: 2387:    if (strcmp(tokens[1].value, "tune") == 0 && ntokens >= 7) {
    #####: 2388:        if (!safe_strtoul(tokens[2].value, &pct_hot) ||
    #####: 2389:            !safe_strtoul(tokens[3].value, &pct_warm) ||
    #####: 2390:            !safe_strtod(tokens[4].value, &hot_factor) ||
    #####: 2391:            !safe_strtod(tokens[5].value, &factor)) {
    #####: 2392:            out_string(c, "ERROR");
        -: 2393:        } else {
    #####: 2394:            if (pct_hot + pct_warm > 80) {
    #####: 2395:                out_string(c, "ERROR hot and warm pcts must not exceed 80");
    #####: 2396:            } else if (factor <= 0 || hot_factor <= 0) {
    #####: 2397:                out_string(c, "ERROR hot/warm age factors must be greater than 0");
        -: 2398:            } else {
    #####: 2399:                settings.hot_lru_pct = pct_hot;
    #####: 2400:                settings.warm_lru_pct = pct_warm;
    #####: 2401:                settings.hot_max_factor = hot_factor;
    #####: 2402:                settings.warm_max_factor = factor;
    #####: 2403:                out_string(c, "OK");
        -: 2404:            }
        -: 2405:        }
    #####: 2406:    } else if (strcmp(tokens[1].value, "mode") == 0 && ntokens >= 4 &&
    #####: 2407:               settings.lru_maintainer_thread) {
    #####: 2408:        if (strcmp(tokens[2].value, "flat") == 0) {
    #####: 2409:            settings.lru_segmented = false;
    #####: 2410:            out_string(c, "OK");
    #####: 2411:        } else if (strcmp(tokens[2].value, "segmented") == 0) {
    #####: 2412:            settings.lru_segmented = true;
    #####: 2413:            out_string(c, "OK");
        -: 2414:        } else {
    #####: 2415:            out_string(c, "ERROR");
        -: 2416:        }
    #####: 2417:    } else if (strcmp(tokens[1].value, "temp_ttl") == 0 && ntokens >= 4 &&
    #####: 2418:               settings.lru_maintainer_thread) {
    #####: 2419:        if (!safe_strtol(tokens[2].value, &ttl)) {
    #####: 2420:            out_string(c, "ERROR");
        -: 2421:        } else {
    #####: 2422:            if (ttl < 0) {
    #####: 2423:                settings.temp_lru = false;
        -: 2424:            } else {
    #####: 2425:                settings.temp_lru = true;
    #####: 2426:                settings.temporary_ttl = ttl;
        -: 2427:            }
    #####: 2428:            out_string(c, "OK");
        -: 2429:        }
        -: 2430:    } else {
    #####: 2431:        out_string(c, "ERROR");
        -: 2432:    }
    #####: 2433:}
        -: 2434:#ifdef EXTSTORE
       16: 2435:static void process_extstore_command(conn *c, token_t *tokens, const size_t ntokens) {
       16: 2436:    set_noreply_maybe(c, tokens, ntokens);
       16: 2437:    bool ok = true;
       16: 2438:    if (ntokens < 4) {
        -: 2439:        ok = false;
      16*: 2440:    } else if (strcmp(tokens[1].value, "free_memchunks") == 0 && ntokens > 4) {
        -: 2441:        // setting is deprecated and ignored, but accepted for backcompat
    #####: 2442:        unsigned int clsid = 0;
    #####: 2443:        unsigned int limit = 0;
    #####: 2444:        if (!safe_strtoul(tokens[2].value, &clsid) ||
    #####: 2445:                !safe_strtoul(tokens[3].value, &limit)) {
    #####: 2446:            ok = false;
        -: 2447:        } else {
    #####: 2448:            if (clsid < MAX_NUMBER_OF_SLAB_CLASSES) {
        -: 2449:                ok = true;
        -: 2450:            } else {
    #####: 2451:                ok = false;
        -: 2452:            }
        -: 2453:        }
       16: 2454:    } else if (strcmp(tokens[1].value, "item_size") == 0) {
    #####: 2455:        if (!safe_strtoul(tokens[2].value, &settings.ext_item_size))
        -: 2456:            ok = false;
       16: 2457:    } else if (strcmp(tokens[1].value, "item_age") == 0) {
    #####: 2458:        if (!safe_strtoul(tokens[2].value, &settings.ext_item_age))
        -: 2459:            ok = false;
       16: 2460:    } else if (strcmp(tokens[1].value, "low_ttl") == 0) {
    #####: 2461:        if (!safe_strtoul(tokens[2].value, &settings.ext_low_ttl))
        -: 2462:            ok = false;
       16: 2463:    } else if (strcmp(tokens[1].value, "recache_rate") == 0) {
        2: 2464:        if (!safe_strtoul(tokens[2].value, &settings.ext_recache_rate))
        -: 2465:            ok = false;
       14: 2466:    } else if (strcmp(tokens[1].value, "compact_under") == 0) {
        4: 2467:        if (!safe_strtoul(tokens[2].value, &settings.ext_compact_under))
        -: 2468:            ok = false;
       10: 2469:    } else if (strcmp(tokens[1].value, "drop_under") == 0) {
        3: 2470:        if (!safe_strtoul(tokens[2].value, &settings.ext_drop_under))
        -: 2471:            ok = false;
        7: 2472:    } else if (strcmp(tokens[1].value, "max_sleep") == 0) {
    #####: 2473:        if (!safe_strtoul(tokens[2].value, &settings.ext_max_sleep))
        -: 2474:            ok = false;
        7: 2475:    } else if (strcmp(tokens[1].value, "max_frag") == 0) {
        3: 2476:        if (!safe_strtod(tokens[2].value, &settings.ext_max_frag))
        -: 2477:            ok = false;
        4: 2478:    } else if (strcmp(tokens[1].value, "drop_unread") == 0) {
        4: 2479:        unsigned int v;
        4: 2480:        if (!safe_strtoul(tokens[2].value, &v)) {
        -: 2481:            ok = false;
        -: 2482:        } else {
        4: 2483:            settings.ext_drop_unread = v == 0 ? false : true;
        -: 2484:        }
        -: 2485:    } else {
        -: 2486:        ok = false;
        -: 2487:    }
       4*: 2488:    if (!ok) {
    #####: 2489:        out_string(c, "ERROR");
        -: 2490:    } else {
       16: 2491:        out_string(c, "OK");
        -: 2492:    }
       16: 2493:}
        -: 2494:#endif
       12: 2495:static void process_flush_all_command(conn *c, token_t *tokens, const size_t ntokens) {
       12: 2496:    int32_t exptime = 0;
       12: 2497:    rel_time_t new_oldest = 0;
        -: 2498:
       12: 2499:    set_noreply_maybe(c, tokens, ntokens);
        -: 2500:
       12: 2501:    pthread_mutex_lock(&c->thread->stats.mutex);
       12: 2502:    c->thread->stats.flush_cmds++;
       12: 2503:    pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 2504:
       12: 2505:    if (!settings.flush_enabled) {
        -: 2506:        // flush_all is not allowed but we log it on stats
        1: 2507:        out_string(c, "CLIENT_ERROR flush_all not allowed");
        3: 2508:        return;
        -: 2509:    }
        -: 2510:
       20: 2511:    if (ntokens != (c->noreply ? 3 : 2)) {
        6: 2512:        if (!safe_strtol(tokens[1].value, &exptime)) {
        1: 2513:            out_string(c, "CLIENT_ERROR invalid exptime argument");
        1: 2514:            return;
        -: 2515:        }
        -: 2516:    }
        -: 2517:
        -: 2518:    /*
        -: 2519:      If exptime is zero realtime() would return zero too, and
        -: 2520:      realtime(exptime) - 1 would overflow to the max unsigned
        -: 2521:      value.  So we process exptime == 0 the same way we do when
        -: 2522:      no delay is given at all.
        -: 2523:    */
       10: 2524:    if (exptime > 0) {
        2: 2525:        new_oldest = realtime(exptime);
        -: 2526:    } else { /* exptime == 0 */
        8: 2527:        new_oldest = current_time;
        -: 2528:    }
        -: 2529:
       10: 2530:    if (settings.use_cas) {
        9: 2531:        settings.oldest_live = new_oldest - 1;
        9: 2532:        if (settings.oldest_live <= current_time)
        7: 2533:            settings.oldest_cas = get_cas_id();
        -: 2534:    } else {
        1: 2535:        settings.oldest_live = new_oldest;
        -: 2536:    }
       10: 2537:    out_string(c, "OK");
        -: 2538:}
        -: 2539:
        6: 2540:static void process_version_command(conn *c) {
        6: 2541:    out_string(c, "VERSION " VERSION);
        6: 2542:}
        -: 2543:
        3: 2544:static void process_quit_command(conn *c) {
        3: 2545:    conn_set_state(c, conn_mwrite);
        3: 2546:    c->close_after_write = true;
        3: 2547:    c->close_reason = NORMAL_CLOSE;
        3: 2548:}
        -: 2549:
        5: 2550:static void process_shutdown_command(conn *c, token_t *tokens, const size_t ntokens) {
        5: 2551:    if (!settings.shutdown_command) {
        1: 2552:        out_string(c, "ERROR: shutdown not enabled");
        1: 2553:        return;
        -: 2554:    }
        -: 2555:
        4: 2556:    if (ntokens == 2) {
        2: 2557:        c->close_reason = SHUTDOWN_CLOSE;
        2: 2558:        conn_set_state(c, conn_closing);
        2: 2559:        raise(SIGINT);
        2: 2560:    } else if (ntokens == 3 && strcmp(tokens[SUBCOMMAND_TOKEN].value, "graceful") == 0) {
        1: 2561:        c->close_reason = SHUTDOWN_CLOSE;
        1: 2562:        conn_set_state(c, conn_closing);
        1: 2563:        raise(SIGUSR1);
        -: 2564:    } else {
        1: 2565:        out_string(c, "CLIENT_ERROR invalid shutdown mode");
        -: 2566:    }
        -: 2567:}
        -: 2568:
       71: 2569:static void process_slabs_command(conn *c, token_t *tokens, const size_t ntokens) {
       71: 2570:    if (ntokens == 5 && strcmp(tokens[COMMAND_TOKEN + 1].value, "reassign") == 0) {
       69: 2571:        int src, dst, rv;
        -: 2572:
       69: 2573:        if (settings.slab_reassign == false) {
    #####: 2574:            out_string(c, "CLIENT_ERROR slab reassignment disabled");
    #####: 2575:            return;
        -: 2576:        }
        -: 2577:
      137: 2578:        if (! (safe_strtol(tokens[2].value, (int32_t*)&src)
       68: 2579:               && safe_strtol(tokens[3].value, (int32_t*)&dst))) {
        1: 2580:            out_string(c, "CLIENT_ERROR bad command line format");
        1: 2581:            return;
        -: 2582:        }
        -: 2583:
       68: 2584:        rv = slabs_reassign(src, dst);
       68: 2585:        switch (rv) {
       66: 2586:        case REASSIGN_OK:
       66: 2587:            out_string(c, "OK");
       66: 2588:            break;
    #####: 2589:        case REASSIGN_RUNNING:
    #####: 2590:            out_string(c, "BUSY currently processing reassign request");
    #####: 2591:            break;
    #####: 2592:        case REASSIGN_BADCLASS:
    #####: 2593:            out_string(c, "BADCLASS invalid src or dst class id");
    #####: 2594:            break;
        2: 2595:        case REASSIGN_NOSPARE:
        2: 2596:            out_string(c, "NOSPARE source class has no spare pages");
        2: 2597:            break;
    #####: 2598:        case REASSIGN_SRC_DST_SAME:
    #####: 2599:            out_string(c, "SAME src and dst class are identical");
    #####: 2600:            break;
        -: 2601:        }
       68: 2602:        return;
        2: 2603:    } else if (ntokens >= 4 &&
        2: 2604:        (strcmp(tokens[COMMAND_TOKEN + 1].value, "automove") == 0)) {
        2: 2605:        process_slabs_automove_command(c, tokens, ntokens);
        -: 2606:    } else {
    #####: 2607:        out_string(c, "ERROR");
        -: 2608:    }
        -: 2609:}
        -: 2610:
        9: 2611:static void process_lru_crawler_command(conn *c, token_t *tokens, const size_t ntokens) {
        9: 2612:    if (ntokens == 4 && strcmp(tokens[COMMAND_TOKEN + 1].value, "crawl") == 0) {
        4: 2613:        int rv;
        4: 2614:        if (settings.lru_crawler == false) {
    #####: 2615:            out_string(c, "CLIENT_ERROR lru crawler disabled");
    #####: 2616:            return;
        -: 2617:        }
        -: 2618:
        4: 2619:        rv = lru_crawler_crawl(tokens[2].value, CRAWLER_EXPIRED, NULL, 0,
        -: 2620:                settings.lru_crawler_tocrawl);
        4: 2621:        switch(rv) {
        4: 2622:        case CRAWLER_OK:
        4: 2623:            out_string(c, "OK");
        4: 2624:            break;
    #####: 2625:        case CRAWLER_RUNNING:
    #####: 2626:            out_string(c, "BUSY currently processing crawler request");
    #####: 2627:            break;
    #####: 2628:        case CRAWLER_BADCLASS:
    #####: 2629:            out_string(c, "BADCLASS invalid class id");
    #####: 2630:            break;
    #####: 2631:        case CRAWLER_NOTSTARTED:
    #####: 2632:            out_string(c, "NOTSTARTED no items to crawl");
    #####: 2633:            break;
    #####: 2634:        case CRAWLER_ERROR:
    #####: 2635:            out_string(c, "ERROR an unknown error happened");
    #####: 2636:            break;
        -: 2637:        }
        4: 2638:        return;
        5: 2639:    } else if (ntokens == 4 && strcmp(tokens[COMMAND_TOKEN + 1].value, "metadump") == 0) {
        3: 2640:        if (settings.lru_crawler == false) {
    #####: 2641:            out_string(c, "CLIENT_ERROR lru crawler disabled");
    #####: 2642:            return;
        -: 2643:        }
        3: 2644:        if (!settings.dump_enabled) {
    #####: 2645:            out_string(c, "ERROR metadump not allowed");
    #####: 2646:            return;
        -: 2647:        }
        3: 2648:        if (resp_has_stack(c)) {
        1: 2649:            out_string(c, "ERROR cannot pipeline other commands before metadump");
        1: 2650:            return;
        -: 2651:        }
        -: 2652:
        2: 2653:        int rv = lru_crawler_crawl(tokens[2].value, CRAWLER_METADUMP,
        -: 2654:                c, c->sfd, LRU_CRAWLER_CAP_REMAINING);
        2: 2655:        switch(rv) {
        2: 2656:            case CRAWLER_OK:
        -: 2657:                // TODO: documentation says this string is returned, but
        -: 2658:                // it never was before. We never switch to conn_write so
        -: 2659:                // this o_s call never worked. Need to talk to users and
        -: 2660:                // decide if removing the OK from docs is fine.
        -: 2661:                //out_string(c, "OK");
        -: 2662:                // TODO: Don't reuse conn_watch here.
        2: 2663:                conn_set_state(c, conn_watch);
        2: 2664:                event_del(&c->event);
        2: 2665:                break;
    #####: 2666:            case CRAWLER_RUNNING:
    #####: 2667:                out_string(c, "BUSY currently processing crawler request");
    #####: 2668:                break;
    #####: 2669:            case CRAWLER_BADCLASS:
    #####: 2670:                out_string(c, "BADCLASS invalid class id");
    #####: 2671:                break;
    #####: 2672:            case CRAWLER_NOTSTARTED:
    #####: 2673:                out_string(c, "NOTSTARTED no items to crawl");
    #####: 2674:                break;
    #####: 2675:            case CRAWLER_ERROR:
    #####: 2676:                out_string(c, "ERROR an unknown error happened");
    #####: 2677:                break;
        -: 2678:        }
        2: 2679:        return;
       2*: 2680:    } else if (ntokens == 4 && strcmp(tokens[COMMAND_TOKEN + 1].value, "mgdump") == 0) {
    #####: 2681:        if (settings.lru_crawler == false) {
    #####: 2682:            out_string(c, "CLIENT_ERROR lru crawler disabled");
    #####: 2683:            return;
        -: 2684:        }
    #####: 2685:        if (!settings.dump_enabled) {
    #####: 2686:            out_string(c, "ERROR key dump not allowed");
    #####: 2687:            return;
        -: 2688:        }
    #####: 2689:        if (resp_has_stack(c)) {
    #####: 2690:            out_string(c, "ERROR cannot pipeline other commands before mgdump");
    #####: 2691:            return;
        -: 2692:        }
        -: 2693:
    #####: 2694:        int rv = lru_crawler_crawl(tokens[2].value, CRAWLER_MGDUMP,
        -: 2695:                c, c->sfd, LRU_CRAWLER_CAP_REMAINING);
    #####: 2696:        switch(rv) {
    #####: 2697:            case CRAWLER_OK:
    #####: 2698:                conn_set_state(c, conn_watch);
    #####: 2699:                event_del(&c->event);
    #####: 2700:                break;
    #####: 2701:            case CRAWLER_RUNNING:
    #####: 2702:                out_string(c, "BUSY currently processing crawler request");
    #####: 2703:                break;
    #####: 2704:            case CRAWLER_BADCLASS:
    #####: 2705:                out_string(c, "BADCLASS invalid class id");
    #####: 2706:                break;
    #####: 2707:            case CRAWLER_NOTSTARTED:
    #####: 2708:                out_string(c, "NOTSTARTED no items to crawl");
    #####: 2709:                break;
    #####: 2710:            case CRAWLER_ERROR:
    #####: 2711:                out_string(c, "ERROR an unknown error happened");
    #####: 2712:                break;
        -: 2713:        }
    #####: 2714:        return;
       2*: 2715:    } else if (ntokens == 4 && strcmp(tokens[COMMAND_TOKEN + 1].value, "tocrawl") == 0) {
    #####: 2716:        uint32_t tocrawl;
    #####: 2717:         if (!safe_strtoul(tokens[2].value, &tocrawl)) {
    #####: 2718:            out_string(c, "CLIENT_ERROR bad command line format");
    #####: 2719:            return;
        -: 2720:        }
    #####: 2721:        settings.lru_crawler_tocrawl = tocrawl;
    #####: 2722:        out_string(c, "OK");
    #####: 2723:        return;
       2*: 2724:    } else if (ntokens == 4 && strcmp(tokens[COMMAND_TOKEN + 1].value, "sleep") == 0) {
    #####: 2725:        uint32_t tosleep;
    #####: 2726:        if (!safe_strtoul(tokens[2].value, &tosleep)) {
    #####: 2727:            out_string(c, "CLIENT_ERROR bad command line format");
    #####: 2728:            return;
        -: 2729:        }
    #####: 2730:        if (tosleep > 1000000) {
    #####: 2731:            out_string(c, "CLIENT_ERROR sleep must be one second or less");
    #####: 2732:            return;
        -: 2733:        }
    #####: 2734:        settings.lru_crawler_sleep = tosleep;
    #####: 2735:        out_string(c, "OK");
    #####: 2736:        return;
        2: 2737:    } else if (ntokens == 3) {
        2: 2738:        if ((strcmp(tokens[COMMAND_TOKEN + 1].value, "enable") == 0)) {
        1: 2739:            if (start_item_crawler_thread() == 0) {
        1: 2740:                out_string(c, "OK");
        -: 2741:            } else {
    #####: 2742:                out_string(c, "ERROR failed to start lru crawler thread");
        -: 2743:            }
        1: 2744:        } else if ((strcmp(tokens[COMMAND_TOKEN + 1].value, "disable") == 0)) {
        1: 2745:            if (stop_item_crawler_thread(CRAWLER_NOWAIT) == 0) {
        1: 2746:                out_string(c, "OK");
        -: 2747:            } else {
    #####: 2748:                out_string(c, "ERROR failed to stop lru crawler thread");
        -: 2749:            }
        -: 2750:        } else {
    #####: 2751:            out_string(c, "ERROR");
        -: 2752:        }
        2: 2753:        return;
        -: 2754:    } else {
    #####: 2755:        out_string(c, "ERROR");
        -: 2756:    }
        -: 2757:}
        -: 2758:#ifdef TLS
        -: 2759:static void process_refresh_certs_command(conn *c, token_t *tokens, const size_t ntokens) {
        -: 2760:    set_noreply_maybe(c, tokens, ntokens);
        -: 2761:    char *errmsg = NULL;
        -: 2762:    if (refresh_certs(&errmsg)) {
        -: 2763:        out_string(c, "OK");
        -: 2764:    } else {
        -: 2765:        write_and_free(c, errmsg, strlen(errmsg));
        -: 2766:    }
        -: 2767:    return;
        -: 2768:}
        -: 2769:#endif
        -: 2770:
        -: 2771:// TODO: pipelined commands are incompatible with shifting connections to a
        -: 2772:// side thread. Given this only happens in two instances (watch and
        -: 2773:// lru_crawler metadump) it should be fine for things to bail. It _should_ be
        -: 2774:// unusual for these commands.
        -: 2775:// This is hard to fix since tokenize_command() mutilates the read buffer, so
        -: 2776:// we can't drop out and back in again.
        -: 2777:// Leaving this note here to spend more time on a fix when necessary, or if an
        -: 2778:// opportunity becomes obvious.
   565831: 2779:void process_command_ascii(conn *c, char *command) {
        -: 2780:
   565831: 2781:    token_t tokens[MAX_TOKENS];
   565831: 2782:    size_t ntokens;
   565831: 2783:    int comm;
        -: 2784:
  565831*: 2785:    assert(c != NULL);
        -: 2786:
   565831: 2787:    MEMCACHED_PROCESS_COMMAND_START(c->sfd, c->rcurr, c->rbytes);
        -: 2788:
   565831: 2789:    if (settings.verbose > 1)
    #####: 2790:        fprintf(stderr, "<%d %s\n", c->sfd, command);
        -: 2791:
        -: 2792:    /*
        -: 2793:     * for commands set/add/replace, we build an item and read the data
        -: 2794:     * directly into it, then continue in nread_complete().
        -: 2795:     */
        -: 2796:
        -: 2797:    // Prep the response object for this query.
   565831: 2798:    if (!resp_start(c)) {
        1: 2799:        conn_set_state(c, conn_closing);
        1: 2800:        return;
        -: 2801:    }
        -: 2802:
   565830: 2803:    c->thread->cur_sfd = c->sfd; // cuddle sfd for logging.
   565830: 2804:    ntokens = tokenize_command(command, tokens, MAX_TOKENS);
        -: 2805:    // All commands need a minimum of two tokens: cmd and NULL finalizer
        -: 2806:    // There are also no valid commands shorter than two bytes.
   565830: 2807:    if (ntokens < 2 || tokens[COMMAND_TOKEN].length < 2) {
        5: 2808:        out_string(c, "ERROR");
        5: 2809:        return;
        -: 2810:    }
        -: 2811:
        -: 2812:    // Meta commands are all 2-char in length.
   565825: 2813:    char first = tokens[COMMAND_TOKEN].value[0];
   565825: 2814:    if (first == 'm' && tokens[COMMAND_TOKEN].length == 2) {
     1380: 2815:        switch (tokens[COMMAND_TOKEN].value[1]) {
     1310: 2816:            case 'g':
     1310: 2817:                process_mget_command(c, tokens, ntokens);
     1310: 2818:                break;
       41: 2819:            case 's':
       41: 2820:                process_mset_command(c, tokens, ntokens);
       41: 2821:                break;
        9: 2822:            case 'd':
        9: 2823:                process_mdelete_command(c, tokens, ntokens);
        9: 2824:                break;
        3: 2825:            case 'n':
        3: 2826:                out_string(c, "MN");
        -: 2827:                // mn command forces immediate writeback flush.
        3: 2828:                conn_set_state(c, conn_mwrite);
        3: 2829:                break;
       15: 2830:            case 'a':
       15: 2831:                process_marithmetic_command(c, tokens, ntokens);
       15: 2832:                break;
        2: 2833:            case 'e':
        2: 2834:                process_meta_command(c, tokens, ntokens);
        2: 2835:                break;
    #####: 2836:            default:
    #####: 2837:                out_string(c, "ERROR");
    #####: 2838:                break;
        -: 2839:        }
   564445: 2840:    } else if (first == 'g') {
        -: 2841:        // Various get commands are very common.
  112690*: 2842:        WANT_TOKENS_MIN(ntokens, 3);
   112690: 2843:        if (strcmp(tokens[COMMAND_TOKEN].value, "get") == 0) {
        -: 2844:
   112666: 2845:            process_get_command(c, tokens, ntokens, false, false);
       24: 2846:        } else if (strcmp(tokens[COMMAND_TOKEN].value, "gets") == 0) {
        -: 2847:
       18: 2848:            process_get_command(c, tokens, ntokens, true, false);
        6: 2849:        } else if (strcmp(tokens[COMMAND_TOKEN].value, "gat") == 0) {
        -: 2850:
        5: 2851:            process_get_command(c, tokens, ntokens, false, true);
        1: 2852:        } else if (strcmp(tokens[COMMAND_TOKEN].value, "gats") == 0) {
        -: 2853:
        1: 2854:            process_get_command(c, tokens, ntokens, true, true);
        -: 2855:        } else {
    #####: 2856:            out_string(c, "ERROR");
        -: 2857:        }
        -: 2858:    } else if (first == 's') {
   291648: 2859:        if (strcmp(tokens[COMMAND_TOKEN].value, "set") == 0 && (comm = NREAD_SET)) {
        -: 2860:
  286232*: 2861:            WANT_TOKENS_OR(ntokens, 6, 7);
   286232: 2862:            process_update_command(c, tokens, ntokens, comm, false);
     5416: 2863:        } else if (strcmp(tokens[COMMAND_TOKEN].value, "stats") == 0) {
        -: 2864:
     5340: 2865:            process_stat(c, tokens, ntokens);
       76: 2866:        } else if (strcmp(tokens[COMMAND_TOKEN].value, "shutdown") == 0) {
        -: 2867:
        5: 2868:            process_shutdown_command(c, tokens, ntokens);
       71: 2869:        } else if (strcmp(tokens[COMMAND_TOKEN].value, "slabs") == 0) {
        -: 2870:
       71: 2871:            process_slabs_command(c, tokens, ntokens);
        -: 2872:        } else {
    #####: 2873:            out_string(c, "ERROR");
        -: 2874:        }
        -: 2875:    } else if (first == 'a') {
     8641: 2876:        if ((strcmp(tokens[COMMAND_TOKEN].value, "add") == 0 && (comm = NREAD_ADD)) ||
     8003: 2877:            (strcmp(tokens[COMMAND_TOKEN].value, "append") == 0 && (comm = NREAD_APPEND)) ) {
        -: 2878:
    8641*: 2879:            WANT_TOKENS_OR(ntokens, 6, 7);
     8641: 2880:            process_update_command(c, tokens, ntokens, comm, false);
        -: 2881:        } else {
    #####: 2882:            out_string(c, "ERROR");
        -: 2883:        }
        -: 2884:    } else if (first == 'c') {
       20: 2885:        if (strcmp(tokens[COMMAND_TOKEN].value, "cas") == 0 && (comm = NREAD_CAS)) {
        -: 2886:
       17: 2887:            WANT_TOKENS_OR(ntokens, 7, 8);
       16: 2888:            process_update_command(c, tokens, ntokens, comm, true);
        3: 2889:        } else if (strcmp(tokens[COMMAND_TOKEN].value, "cache_memlimit") == 0) {
        -: 2890:
       3*: 2891:            WANT_TOKENS_OR(ntokens, 3, 4);
        3: 2892:            process_memlimit_command(c, tokens, ntokens);
        -: 2893:        } else {
    #####: 2894:            out_string(c, "ERROR");
        -: 2895:        }
        -: 2896:    } else if (first == 'i') {
      263: 2897:        if (strcmp(tokens[COMMAND_TOKEN].value, "incr") == 0) {
        -: 2898:
     263*: 2899:            WANT_TOKENS_OR(ntokens, 4, 5);
      263: 2900:            process_arithmetic_command(c, tokens, ntokens, 1);
        -: 2901:        } else {
    #####: 2902:            out_string(c, "ERROR");
        -: 2903:        }
        -: 2904:    } else if (first == 'd') {
   141107: 2905:        if (strcmp(tokens[COMMAND_TOKEN].value, "delete") == 0) {
        -: 2906:
  141092*: 2907:            WANT_TOKENS(ntokens, 3, 5);
   141092: 2908:            process_delete_command(c, tokens, ntokens);
       15: 2909:        } else if (strcmp(tokens[COMMAND_TOKEN].value, "decr") == 0) {
        -: 2910:
      10*: 2911:            WANT_TOKENS_OR(ntokens, 4, 5);
       10: 2912:            process_arithmetic_command(c, tokens, ntokens, 0);
        -: 2913:#ifdef MEMCACHED_DEBUG
        5: 2914:        } else if (strcmp(tokens[COMMAND_TOKEN].value, "debugtime") == 0) {
        5: 2915:            WANT_TOKENS_MIN(ntokens, 2);
        5: 2916:            process_debugtime_command(c, tokens, ntokens);
        -: 2917:#endif
        -: 2918:        } else {
    #####: 2919:            out_string(c, "ERROR");
        -: 2920:        }
        -: 2921:    } else if (first == 't') {
     2004: 2922:        if (strcmp(tokens[COMMAND_TOKEN].value, "touch") == 0) {
        -: 2923:
    2004*: 2924:            WANT_TOKENS_OR(ntokens, 4, 5);
     2004: 2925:            process_touch_command(c, tokens, ntokens);
        -: 2926:        } else {
    #####: 2927:            out_string(c, "ERROR");
        -: 2928:        }
     8072: 2929:    } else if (
     8072: 2930:                (strcmp(tokens[COMMAND_TOKEN].value, "replace") == 0 && (comm = NREAD_REPLACE)) ||
     8069: 2931:                (strcmp(tokens[COMMAND_TOKEN].value, "prepend") == 0 && (comm = NREAD_PREPEND)) ) {
        -: 2932:
    8006*: 2933:        WANT_TOKENS_OR(ntokens, 6, 7);
     8006: 2934:        process_update_command(c, tokens, ntokens, comm, false);
        -: 2935:
       66: 2936:    } else if (strcmp(tokens[COMMAND_TOKEN].value, "bget") == 0) {
        -: 2937:        // ancient "binary get" command which isn't in any documentation, was
        -: 2938:        // removed > 10 years ago, etc. Keeping for compatibility reasons but
        -: 2939:        // we should look deeper into client code and remove this.
    #####: 2940:        WANT_TOKENS_MIN(ntokens, 3);
    #####: 2941:        process_get_command(c, tokens, ntokens, false, false);
        -: 2942:
       66: 2943:    } else if (strcmp(tokens[COMMAND_TOKEN].value, "flush_all") == 0) {
        -: 2944:
      12*: 2945:        WANT_TOKENS(ntokens, 2, 4);
       12: 2946:        process_flush_all_command(c, tokens, ntokens);
        -: 2947:
       54: 2948:    } else if (strcmp(tokens[COMMAND_TOKEN].value, "version") == 0) {
        -: 2949:
        6: 2950:        process_version_command(c);
        -: 2951:
       48: 2952:    } else if (strcmp(tokens[COMMAND_TOKEN].value, "quit") == 0) {
        -: 2953:
        3: 2954:        process_quit_command(c);
        -: 2955:
       45: 2956:    } else if (strcmp(tokens[COMMAND_TOKEN].value, "lru_crawler") == 0) {
        -: 2957:
        9: 2958:        process_lru_crawler_command(c, tokens, ntokens);
        -: 2959:
       36: 2960:    } else if (strcmp(tokens[COMMAND_TOKEN].value, "watch") == 0) {
        -: 2961:
       12: 2962:        process_watch_command(c, tokens, ntokens);
        -: 2963:
       24: 2964:    } else if (strcmp(tokens[COMMAND_TOKEN].value, "verbosity") == 0) {
       2*: 2965:        WANT_TOKENS_OR(ntokens, 3, 4);
        2: 2966:        process_verbosity_command(c, tokens, ntokens);
       22: 2967:    } else if (strcmp(tokens[COMMAND_TOKEN].value, "lru") == 0) {
    #####: 2968:        WANT_TOKENS_MIN(ntokens, 3);
    #####: 2969:        process_lru_command(c, tokens, ntokens);
        -: 2970:#ifdef MEMCACHED_DEBUG
        -: 2971:    // commands which exist only for testing the memcached's security protection
       22: 2972:    } else if (strcmp(tokens[COMMAND_TOKEN].value, "misbehave") == 0) {
    #####: 2973:        process_misbehave_command(c);
        -: 2974:#endif
        -: 2975:#ifdef EXTSTORE
       22: 2976:    } else if (strcmp(tokens[COMMAND_TOKEN].value, "extstore") == 0) {
      16*: 2977:        WANT_TOKENS_MIN(ntokens, 3);
       16: 2978:        process_extstore_command(c, tokens, ntokens);
        -: 2979:#endif
        -: 2980:#ifdef TLS
        -: 2981:    } else if (strcmp(tokens[COMMAND_TOKEN].value, "refresh_certs") == 0) {
        -: 2982:        process_refresh_certs_command(c, tokens, ntokens);
        -: 2983:#endif
        -: 2984:    } else {
        6: 2985:        if (strncmp(tokens[ntokens - 2].value, "HTTP/", 5) == 0) {
        4: 2986:            conn_set_state(c, conn_closing);
        -: 2987:        } else {
        2: 2988:            out_string(c, "ERROR");
        -: 2989:        }
        -: 2990:    }
        -: 2991:    return;
        -: 2992:}
        -: 2993:
        -: 2994:
